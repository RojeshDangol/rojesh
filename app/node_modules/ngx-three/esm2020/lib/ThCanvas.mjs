import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, Inject, Input, ViewChild } from '@angular/core';
import { RaycasterService } from './events/raycaster.service';
import { ThObject3D } from './generated/ThObject3D';
import { ThEngineService } from './ThEngine.service';
import { ThView } from './ThView';
import * as i0 from "@angular/core";
import * as i1 from "./ThEngine.service";
import * as i2 from "./events/raycaster.service";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ThCanvas extends ThView {
    constructor(engServ, raycaster) {
        super(engServ, raycaster);
        this.engServ = engServ;
        this.raycaster = raycaster;
        this.nid = ThCanvas.instanceCnt++;
        /**
         * if true does not use the ThCanvas as view
         * this is esepcially usefull if you have multiple views
         * and want to iterate over all of them with *ngFor
         * use statically (before ngOnInit is triggered)
         */
        this.disableDefaultView = false;
        console.log('canvas ' + this.nid);
    }
    get obj() {
        return this;
    }
    set views(viewList) {
        viewList.forEach((v) => this.engServ.addView(v));
    }
    set rendererCanvas(canvas) {
        if (!canvas) {
            return;
        }
        this._rendererCanvas = canvas;
        canvas.nativeElement.id += this.nid;
        this.engServ.setCanvas(canvas.nativeElement);
    }
    get rendererCanvas() {
        return this._rendererCanvas;
    }
    ngAfterViewInit() {
        this.engServ.requestAnimationFrame();
    }
    ngOnInit() {
        if (!this.rendererCanvas) {
            throw new Error('Missing Canvas');
        }
        this.engServ.setCanvas(this.rendererCanvas.nativeElement);
        super.ngOnInit();
        if (!this.disableDefaultView) {
            this.engServ.addView(this);
        }
    }
}
ThCanvas.instanceCnt = 0;
ThCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCanvas, deps: [{ token: i1.ThEngineService }, { token: forwardRef(() => RaycasterService) }], target: i0.ɵɵFactoryTarget.Component });
ThCanvas.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCanvas, selector: "th-canvas", inputs: { disableDefaultView: "disableDefaultView" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThCanvas) },
        ThEngineService,
        forwardRef(() => RaycasterService),
        { provide: ThView, useExisting: forwardRef(() => ThCanvas) }
    ], queries: [{ propertyName: "views", predicate: ThView }], viewQueries: [{ propertyName: "rendererCanvas", first: true, predicate: ["rendererCanvas"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: '<canvas #rendererCanvas id="rendererCanvas" style="width: 100%; height: 100%"></canvas>', isInline: true, styles: [":host{display:flex;flex:1;height:100%;line-height:0}canvas{flex:1;outline:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCanvas, decorators: [{
            type: Component,
            args: [{ selector: 'th-canvas', template: '<canvas #rendererCanvas id="rendererCanvas" style="width: 100%; height: 100%"></canvas>', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThCanvas) },
                        ThEngineService,
                        forwardRef(() => RaycasterService),
                        { provide: ThView, useExisting: forwardRef(() => ThCanvas) }
                    ], styles: [":host{display:flex;flex:1;height:100%;line-height:0}canvas{flex:1;outline:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }, { type: i2.RaycasterService, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => RaycasterService)]
                }] }]; }, propDecorators: { disableDefaultView: [{
                type: Input
            }], views: [{
                type: ContentChildren,
                args: [ThView]
            }], rendererCanvas: [{
                type: ViewChild,
                args: ['rendererCanvas', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDYW52YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9UaENhbnZhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxlQUFlLEVBRWYsVUFBVSxFQUNWLE1BQU0sRUFDTixLQUFLLEVBSUwsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQzs7OztBQWNsQyxrRUFBa0U7QUFDbEUsTUFBTSxPQUFPLFFBQVMsU0FBUSxNQUFNO0lBcUNsQyxZQUNZLE9BQXdCLEVBRXhCLFNBQTJCO1FBRXJDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFKaEIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFFeEIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUF0Q3ZCLFFBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFN0M7Ozs7O1dBS0c7UUFFSSx1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFnQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBL0JELElBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQ1csS0FBSyxDQUFDLFFBQTJCO1FBQzFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUdELElBQ1csY0FBYyxDQUFDLE1BQWlEO1FBQ3pFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztRQUM5QixNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBV0QsZUFBZTtRQUNiLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRU0sUUFBUTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNuQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFMUQsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDOztBQTNEYyxvQkFBVyxHQUFHLENBQUUsQ0FBQTtxR0FEcEIsUUFBUSxpREF1Q1QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO3lGQXZDakMsUUFBUSwwRkFSUjtRQUNULEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ2hFLGVBQWU7UUFDZixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7UUFDbEMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUU7S0FDN0QsZ0RBb0JnQixNQUFNLG9MQTNCYix5RkFBeUY7MkZBVXhGLFFBQVE7a0JBYnBCLFNBQVM7K0JBQ0UsV0FBVyxZQUVYLHlGQUF5RixtQkFDbEYsdUJBQXVCLENBQUMsTUFBTSxhQUNwQzt3QkFDVCxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUU7d0JBQ2hFLGVBQWU7d0JBQ2YsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO3dCQUNsQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUU7cUJBQzdEOzswQkEwQ0UsTUFBTTsyQkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7NENBNUJyQyxrQkFBa0I7c0JBRHhCLEtBQUs7Z0JBUUssS0FBSztzQkFEZixlQUFlO3VCQUFDLE1BQU07Z0JBT1osY0FBYztzQkFEeEIsU0FBUzt1QkFBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJheWNhc3RlclNlcnZpY2UgfSBmcm9tICcuL2V2ZW50cy9yYXljYXN0ZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuL2dlbmVyYXRlZC9UaE9iamVjdDNEJztcblxuaW1wb3J0IHsgVGhFbmdpbmVTZXJ2aWNlIH0gZnJvbSAnLi9UaEVuZ2luZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRoVmlldyB9IGZyb20gJy4vVGhWaWV3JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtY2FudmFzJyxcbiAgc3R5bGVVcmxzOiBbJy4vVGhDYW52YXMuc2NzcyddLFxuICB0ZW1wbGF0ZTogJzxjYW52YXMgI3JlbmRlcmVyQ2FudmFzIGlkPVwicmVuZGVyZXJDYW52YXNcIiBzdHlsZT1cIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCVcIj48L2NhbnZhcz4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBUaE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaENhbnZhcykgfSxcbiAgICBUaEVuZ2luZVNlcnZpY2UsXG4gICAgZm9yd2FyZFJlZigoKSA9PiBSYXljYXN0ZXJTZXJ2aWNlKSxcbiAgICB7IHByb3ZpZGU6IFRoVmlldywgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhDYW52YXMpIH1cbiAgXVxufSlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFRoQ2FudmFzIGV4dGVuZHMgVGhWaWV3IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2VDbnQgPSAwO1xuICBwdWJsaWMgcmVhZG9ubHkgbmlkID0gVGhDYW52YXMuaW5zdGFuY2VDbnQrKztcblxuICAvKipcbiAgICogaWYgdHJ1ZSBkb2VzIG5vdCB1c2UgdGhlIFRoQ2FudmFzIGFzIHZpZXdcbiAgICogdGhpcyBpcyBlc2VwY2lhbGx5IHVzZWZ1bGwgaWYgeW91IGhhdmUgbXVsdGlwbGUgdmlld3NcbiAgICogYW5kIHdhbnQgdG8gaXRlcmF0ZSBvdmVyIGFsbCBvZiB0aGVtIHdpdGggKm5nRm9yXG4gICAqIHVzZSBzdGF0aWNhbGx5IChiZWZvcmUgbmdPbkluaXQgaXMgdHJpZ2dlcmVkKVxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIGRpc2FibGVEZWZhdWx0VmlldyA9IGZhbHNlO1xuXG4gIHB1YmxpYyBnZXQgb2JqKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgQENvbnRlbnRDaGlsZHJlbihUaFZpZXcpXG4gIHB1YmxpYyBzZXQgdmlld3Modmlld0xpc3Q6IFF1ZXJ5TGlzdDxUaFZpZXc+KSB7XG4gICAgdmlld0xpc3QuZm9yRWFjaCgodikgPT4gdGhpcy5lbmdTZXJ2LmFkZFZpZXcodikpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9yZW5kZXJlckNhbnZhcz86IEVsZW1lbnRSZWY8SFRNTENhbnZhc0VsZW1lbnQ+O1xuICBAVmlld0NoaWxkKCdyZW5kZXJlckNhbnZhcycsIHsgc3RhdGljOiB0cnVlIH0pXG4gIHB1YmxpYyBzZXQgcmVuZGVyZXJDYW52YXMoY2FudmFzOiBFbGVtZW50UmVmPEhUTUxDYW52YXNFbGVtZW50PiB8IHVuZGVmaW5lZCkge1xuICAgIGlmICghY2FudmFzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3JlbmRlcmVyQ2FudmFzID0gY2FudmFzO1xuICAgIGNhbnZhcy5uYXRpdmVFbGVtZW50LmlkICs9IHRoaXMubmlkO1xuICAgIHRoaXMuZW5nU2Vydi5zZXRDYW52YXMoY2FudmFzLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgcHVibGljIGdldCByZW5kZXJlckNhbnZhcygpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXJDYW52YXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgZW5nU2VydjogVGhFbmdpbmVTZXJ2aWNlLFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBSYXljYXN0ZXJTZXJ2aWNlKSlcbiAgICBwcm90ZWN0ZWQgcmF5Y2FzdGVyOiBSYXljYXN0ZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGVuZ1NlcnYsIHJheWNhc3Rlcik7XG4gICAgY29uc29sZS5sb2coJ2NhbnZhcyAnICsgdGhpcy5uaWQpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZW5nU2Vydi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyZXJDYW52YXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBDYW52YXMnKTtcbiAgICB9XG4gICAgdGhpcy5lbmdTZXJ2LnNldENhbnZhcyh0aGlzLnJlbmRlcmVyQ2FudmFzLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZURlZmF1bHRWaWV3KSB7XG4gICAgICB0aGlzLmVuZ1NlcnYuYWRkVmlldyh0aGlzKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==