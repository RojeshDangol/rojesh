import { EventEmitter, Injectable } from '@angular/core';
import * as THREE from 'three';
import { Vector4 } from 'three';
import * as i0 from "@angular/core";
export class ThEngineService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.views = [];
        this.beforeRenderEmitter = new EventEmitter();
        this.beforeRender$ = this.beforeRenderEmitter.asObservable();
    }
    get renderer() {
        return this._renderer;
    }
    ngOnDestroy() {
        if (this.frameId !== undefined) {
            cancelAnimationFrame(this.frameId);
        }
        if (this.resizeObserver && this.canvas) {
            this.resizeObserver.unobserve(this.canvas);
        }
    }
    initResizeObserver() {
        // We have to run this outside angular zones,
        // because it could trigger heavy changeDetection cycles.
        this.ngZone.runOutsideAngular(() => {
            if (!this.canvas) {
                throw new Error('missing canvas element');
            }
            if (!this.resizeObserver) {
                // @ts-ignore
                this.resizeObserver = new ResizeObserver(() => {
                    this.resize();
                });
            }
            this.resizeObserver.observe(this.canvas);
        });
    }
    initRenderer() {
        if (this._renderer) {
            return;
        }
        this._renderer = new THREE.WebGLRenderer({
            canvas: this.canvas,
            alpha: true,
            antialias: true,
            preserveDrawingBuffer: true
        });
        this.resize();
        // this.renderer.setSize(this.canvas?.width ?? 0, this.canvas?.width ?? 0);
    }
    setCanvas(canvas) {
        this.canvas = canvas;
        this.initRenderer();
        this.initResizeObserver();
    }
    addView(view) {
        this.views.push(view);
    }
    requestAnimationFrame() {
        if (this.frameId === undefined) {
            this.ngZone.runOutsideAngular(() => (this.frameId = requestAnimationFrame(() => {
                this.render();
            })));
        }
    }
    /*
    public animate(): void {
      // We have to run this outside angular zones,
      // because it could trigger heavy changeDetection cycles.
      this.ngZone.runOutsideAngular(() => {
        if (document.readyState !== 'loading') {
          this.render();
        } else {
          window.addEventListener('DOMContentLoaded', () => {
            this.render();
          });
        }
      });
    }
    */
    render() {
        this.frameId = undefined;
        // TODO: conditional rendere loop
        this.requestAnimationFrame();
        // emit before render
        this.beforeRenderEmitter.next({ engine: this });
        for (const view of this.views) {
            this.renderView(view);
        }
    }
    renderView(view) {
        if (!this._renderer) {
            return;
        }
        const camera = view.camera;
        const scene = view.scene;
        if (!camera || !scene || !camera.objRef || !scene.objRef) {
            return;
        }
        const renderer = this._renderer;
        if (view.onRender.observers.length) {
            this.ngZone.run(() => view.onRender.emit({
                renderer,
                scene,
                camera
            }));
        }
        this.applyRendererParametersFromView(view);
        if (view.effectComposer) {
            view.effectComposer.render();
        }
        else {
            this._renderer.render(scene.objRef, camera.objRef);
        }
    }
    applyRendererParametersFromView(view) {
        if (!this._renderer) {
            return;
        }
        if (view.viewPort) {
            if (view.viewPort instanceof Vector4) {
                this._renderer.setViewport(view.viewPort);
            }
            else {
                this._renderer.setViewport(view.viewPort.x, view.viewPort.y, view.viewPort.width, view.viewPort.height);
            }
        }
        if (view.scissor) {
            if (view.scissor instanceof Vector4) {
                this._renderer.setScissor(view.scissor);
            }
            else {
                this._renderer.setScissor(view.scissor.x, view.scissor.y, view.scissor.width, view.scissor.height);
            }
        }
        if (view.scissorTest !== undefined) {
            this._renderer.setScissorTest(view.scissorTest);
        }
        if (view.clearColor) {
            this._renderer.setClearColor(view.clearColor);
        }
        if (view.clearAlpha !== undefined) {
            this._renderer.setClearAlpha(view.clearAlpha);
        }
        if (view.shadow !== undefined) {
            this._renderer.shadowMap.enabled = true;
        }
    }
    resize() {
        if (!this._renderer) {
            return;
        }
        const width = this.canvas?.parentElement?.clientWidth ?? 0;
        const height = this.canvas?.parentElement?.clientHeight ?? 0;
        this._renderer.setSize(width, height, false);
        for (const view of this.views) {
            if (!view.viewPort) {
                if (view.camera && view.camera.objRef.aspect) {
                    view.camera.objRef.aspect = width / height;
                    view.camera.objRef.updateProjectionMatrix();
                }
                view.effectComposer?.setSize(width, height);
            }
        }
    }
}
ThEngineService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEngineService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
ThEngineService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEngineService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEngineService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,