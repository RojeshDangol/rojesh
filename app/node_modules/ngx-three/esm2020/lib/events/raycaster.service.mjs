import { Injectable } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
// eslint-disable-next-line no-shadow
export var RaycasterEvent;
(function (RaycasterEvent) {
    RaycasterEvent["mouseEnter"] = "mouseEnter";
    RaycasterEvent["mouseExit"] = "mouseExit";
    RaycasterEvent["click"] = "click";
})(RaycasterEvent || (RaycasterEvent = {}));
export class RaycasterService {
    constructor() {
        this.raycaster = new THREE.Raycaster();
        this.selected = null;
        this.enabled = true;
        this.groups = [];
        this.paused = false;
        this.maxClickDistance = 23;
        this.nid = RaycasterService.instanceCnt++;
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerUp = this.onPointerUp.bind(this);
    }
    ngOnDestroy() {
        this.disable();
        this.unsubscribe();
    }
    subscribe() {
        if (!this.canvas) {
            throw new Error('missing canvas');
        }
        this.canvas.addEventListener('pointermove', this.onPointerMove);
        this.canvas.addEventListener('pointerdown', this.onPointerDown);
        this.canvas.addEventListener('pointerup', this.onPointerUp);
    }
    unsubscribe() {
        if (!this.canvas) {
            throw new Error('missing canvas');
        }
        this.canvas.removeEventListener('pointermove', this.onPointerMove);
        this.canvas.removeEventListener('pointerdown', this.onPointerDown);
        this.canvas.removeEventListener('pointerup', this.onPointerUp);
    }
    enable() {
        this.enabled = true;
    }
    disable() {
        this.enabled = false;
    }
    pause() {
        this.paused = true;
    }
    resume() {
        this.paused = false;
    }
    get isEnabled() {
        return this.enabled;
    }
    init(camera, canvas) {
        // console.log('Add camera to raycaster', camera);
        this.camera = camera;
        this.canvas = canvas;
        this.subscribe();
    }
    addEventTarget(target) {
        // console.log('RaycasterService.addGroup', group.name, group);
        this.groups.push(target);
    }
    removeEventTarget(target) {
        const index = this.groups.indexOf(target);
        if (index >= 0) {
            this.groups.splice(index, 1);
        }
    }
    onPointerMove(event /*MouseEvent  & { layerX: number, layerY: number}*/) {
        if (!this.isReady()) {
            return;
        }
        const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (!this.selected || this.selected !== i.target) {
            if (this.selected) {
                this.selected.host.objRef?.dispatchEvent({
                    type: RaycasterEvent.mouseExit
                });
                this.selected.onMouseExit();
                this.selected = null;
            }
            if (i && i.target) {
                this.selected = i.target;
                const evt = {
                    type: RaycasterEvent.mouseEnter,
                    face: i.face
                };
                this.selected.host.objRef?.dispatchEvent(evt);
                this.selected.onMouseEnter(evt);
            }
        }
    }
    onPointerDown(event) {
        this.maxClickDistance = event.width;
        this.pointerDownEvent = event;
    }
    onPointerUp(event) {
        const downEvent = this.pointerDownEvent;
        this.pointerDownEvent = undefined;
        if (!this.isReady() || this.calcPointerDownUpDinstance(event, downEvent) > this.maxClickDistance) {
            return;
        }
        const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (i && i.target && i.target.host.objRef) {
            const evt = { type: RaycasterEvent.click, face: i.face };
            i.target.host.objRef.dispatchEvent(evt);
            i.target.onClick(evt);
        }
    }
    isReady(ignorePaused) {
        return !!(this.enabled && (ignorePaused || !this.paused) && this.camera && this.camera.objRef && this.groups && this.groups.length > 0);
    }
    calcPointerDownUpDinstance(upEvent, downEvent) {
        if (!downEvent) {
            return Number.MAX_VALUE;
        }
        const xDist = upEvent.layerX - downEvent.layerX;
        const yDist = upEvent.layerY - downEvent.layerY;
        return Math.sqrt(xDist * xDist + yDist * yDist);
    }
    getFirstIntersectedGroup(x, y) {
        if (!this.camera || !this.canvas || !this.camera.objRef) {
            return { face: null, target: null };
        }
        x = (x / this.canvas.clientWidth) * 2 - 1;
        y = -(y / this.canvas.clientHeight) * 2 + 1;
        const mouseVector = new THREE.Vector2(x, y);
        this.raycaster.setFromCamera(mouseVector, this.camera.objRef);
        let face = null;
        // loop across all groups. Try to find the group with nearest distance.
        let nearestIntersection;
        let nearestGroup;
        for (const group of this.groups) {
            const i = group.host.objRef;
            if (!i) {
                continue;
            }
            const intersection = this.raycaster.intersectObject(i, true);
            if (intersection.length > 0 && (!nearestIntersection || nearestIntersection.distance > intersection[0].distance)) {
                nearestIntersection = intersection[0];
                face = nearestIntersection.face;
                nearestGroup = group;
            }
        }
        // return the group with nearest distance
        if (nearestGroup) {
            return {
                target: nearestGroup,
                face
            };
        }
        else {
            return {
                target: null,
                face: null
            };
        }
    }
}
RaycasterService.instanceCnt = 0;
RaycasterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RaycasterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,