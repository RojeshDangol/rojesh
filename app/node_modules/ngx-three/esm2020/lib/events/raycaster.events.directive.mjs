import { Directive, EventEmitter, Host, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../generated/ThObject3D";
import * as i2 from "./raycaster.service";
export class RaycasterEventDirective {
    constructor(host, raycasterService) {
        this.host = host;
        this.raycasterService = raycasterService;
        this.mouseEnter = new EventEmitter();
        this.mouseExit = new EventEmitter();
        /* eslint-disable @angular-eslint/no-output-native */
        this.click = new EventEmitter();
        this.onMouseEnter = this.onMouseEnter.bind(this);
        this.onMouseExit = this.onMouseExit.bind(this);
        this.onClick = this.onClick.bind(this);
    }
    ngAfterViewInit() {
        this.subscribeEvents();
    }
    subscribeEvents() {
        this.raycasterService.addEventTarget(this);
        /*
        const obj = this.host.obj;
        // TODO: addEventListener, removeEventListener for proxy
        if (this.mouseEnter.observers.length > 0) {
          obj.addEventListener(RaycasterEvent.mouseEnter, this.onMouseEnter);
        }
        if (this.mouseExit.observers.length > 0) {
          obj.addEventListener(RaycasterEvent.mouseExit, this.onMouseExit);
        }
        if (this.click.observers.length > 0) {
          obj.addEventListener(RaycasterEvent.click, this.onClick);
        }
        */
    }
    unSubscribeEvents() {
        /*
        const obj = this.host.obj;
        if (obj) {
          obj.removeEventListener(RaycasterEvent.mouseEnter, this.onMouseEnter);
          obj.removeEventListener(RaycasterEvent.mouseExit, this.onMouseExit);
          obj.removeEventListener(RaycasterEvent.click, this.onClick);
        }
        */
        this.raycasterService.removeEventTarget(this);
    }
    onMouseExit() {
        this.mouseExit.emit({
            component: this.host
        });
    }
    onMouseEnter(event) {
        // console.log('RaycasterGroupDirective.onMouseEnter', event);
        this.mouseEnter.emit({
            component: this.host,
            face: event.face
        });
    }
    onClick(event) {
        // console.log('onClick', event);
        this.click.emit({
            component: this.host,
            face: event.face
        });
    }
    ngOnDestroy() {
        this.unSubscribeEvents();
    }
}
RaycasterEventDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterEventDirective, deps: [{ token: i1.ThObject3D, host: true }, { token: i2.RaycasterService }], target: i0.ɵɵFactoryTarget.Directive });
RaycasterEventDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: RaycasterEventDirective, selector: "[onClick], [onMouseEnter], [onMouseExit]", outputs: { mouseEnter: "onMouseEnter", mouseExit: "onMouseExit", click: "onClick" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterEventDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[onClick], [onMouseEnter], [onMouseExit]' }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: Host
                }] }, { type: i2.RaycasterService }]; }, propDecorators: { mouseEnter: [{
                type: Output,
                args: ['onMouseEnter']
            }], mouseExit: [{
                type: Output,
                args: ['onMouseExit']
            }], click: [{
                type: Output,
                args: ['onClick']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF5Y2FzdGVyLmV2ZW50cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9ldmVudHMvcmF5Y2FzdGVyLmV2ZW50cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFZaEcsTUFBTSxPQUFPLHVCQUF1QjtJQU1sQyxZQUFvQyxJQUFnQixFQUFVLGdCQUFrQztRQUE1RCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUx4RSxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFDckQsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFzQixDQUFDO1FBQzFFLHFEQUFxRDtRQUNsQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFHaEUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVPLGVBQWU7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQzs7Ozs7Ozs7Ozs7O1VBWUU7SUFDSixDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCOzs7Ozs7O1VBT0U7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDbEIsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsS0FBWTtRQUM5Qiw4REFBOEQ7UUFDOUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ3BCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQVk7UUFDekIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ2QsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ3BCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7O29IQXJFVSx1QkFBdUI7d0dBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLDBDQUEwQyxFQUFFOzswQkFPcEQsSUFBSTsyRUFMTyxVQUFVO3NCQUFqQyxNQUFNO3VCQUFDLGNBQWM7Z0JBQ0MsU0FBUztzQkFBL0IsTUFBTTt1QkFBQyxhQUFhO2dCQUVGLEtBQUs7c0JBQXZCLE1BQU07dUJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0LCBPbkRlc3Ryb3ksIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBUaE9iamVjdDNEIH0gZnJvbSAnLi4vZ2VuZXJhdGVkL1RoT2JqZWN0M0QnO1xuXG5pbXBvcnQgeyBSYXljYXN0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9yYXljYXN0ZXIuc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmF5Y2FzdGVyRW1pdEV2ZW50IHtcbiAgY29tcG9uZW50OiBUaE9iamVjdDNEO1xuICBmYWNlPzogVEhSRUUuRmFjZTtcbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW29uQ2xpY2tdLCBbb25Nb3VzZUVudGVyXSwgW29uTW91c2VFeGl0XScgfSlcbmV4cG9ydCBjbGFzcyBSYXljYXN0ZXJFdmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIEBPdXRwdXQoJ29uTW91c2VFbnRlcicpIG1vdXNlRW50ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFJheWNhc3RlckVtaXRFdmVudD4oKTtcbiAgQE91dHB1dCgnb25Nb3VzZUV4aXQnKSBtb3VzZUV4aXQgPSBuZXcgRXZlbnRFbWl0dGVyPFJheWNhc3RlckVtaXRFdmVudD4oKTtcbiAgLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1uYXRpdmUgKi9cbiAgQE91dHB1dCgnb25DbGljaycpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxSYXljYXN0ZXJFbWl0RXZlbnQ+KCk7XG5cbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwdWJsaWMgcmVhZG9ubHkgaG9zdDogVGhPYmplY3QzRCwgcHJpdmF0ZSByYXljYXN0ZXJTZXJ2aWNlOiBSYXljYXN0ZXJTZXJ2aWNlKSB7XG4gICAgdGhpcy5vbk1vdXNlRW50ZXIgPSB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZUV4aXQgPSB0aGlzLm9uTW91c2VFeGl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpYmVFdmVudHMoKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlRXZlbnRzKCkge1xuICAgIHRoaXMucmF5Y2FzdGVyU2VydmljZS5hZGRFdmVudFRhcmdldCh0aGlzKTtcbiAgICAvKlxuICAgIGNvbnN0IG9iaiA9IHRoaXMuaG9zdC5vYmo7XG4gICAgLy8gVE9ETzogYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciBmb3IgcHJveHlcbiAgICBpZiAodGhpcy5tb3VzZUVudGVyLm9ic2VydmVycy5sZW5ndGggPiAwKSB7XG4gICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcihSYXljYXN0ZXJFdmVudC5tb3VzZUVudGVyLCB0aGlzLm9uTW91c2VFbnRlcik7XG4gICAgfVxuICAgIGlmICh0aGlzLm1vdXNlRXhpdC5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoUmF5Y2FzdGVyRXZlbnQubW91c2VFeGl0LCB0aGlzLm9uTW91c2VFeGl0KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2xpY2sub2JzZXJ2ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKFJheWNhc3RlckV2ZW50LmNsaWNrLCB0aGlzLm9uQ2xpY2spO1xuICAgIH1cbiAgICAqL1xuICB9XG5cbiAgcHJpdmF0ZSB1blN1YnNjcmliZUV2ZW50cygpIHtcbiAgICAvKlxuICAgIGNvbnN0IG9iaiA9IHRoaXMuaG9zdC5vYmo7XG4gICAgaWYgKG9iaikge1xuICAgICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoUmF5Y2FzdGVyRXZlbnQubW91c2VFbnRlciwgdGhpcy5vbk1vdXNlRW50ZXIpO1xuICAgICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoUmF5Y2FzdGVyRXZlbnQubW91c2VFeGl0LCB0aGlzLm9uTW91c2VFeGl0KTtcbiAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKFJheWNhc3RlckV2ZW50LmNsaWNrLCB0aGlzLm9uQ2xpY2spO1xuICAgIH1cbiAgICAqL1xuICAgIHRoaXMucmF5Y2FzdGVyU2VydmljZS5yZW1vdmVFdmVudFRhcmdldCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBvbk1vdXNlRXhpdCgpIHtcbiAgICB0aGlzLm1vdXNlRXhpdC5lbWl0KHtcbiAgICAgIGNvbXBvbmVudDogdGhpcy5ob3N0XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgb25Nb3VzZUVudGVyKGV2ZW50OiBFdmVudCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdSYXljYXN0ZXJHcm91cERpcmVjdGl2ZS5vbk1vdXNlRW50ZXInLCBldmVudCk7XG4gICAgdGhpcy5tb3VzZUVudGVyLmVtaXQoe1xuICAgICAgY29tcG9uZW50OiB0aGlzLmhvc3QsXG4gICAgICBmYWNlOiBldmVudC5mYWNlXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgb25DbGljayhldmVudDogRXZlbnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnb25DbGljaycsIGV2ZW50KTtcbiAgICB0aGlzLmNsaWNrLmVtaXQoe1xuICAgICAgY29tcG9uZW50OiB0aGlzLmhvc3QsXG4gICAgICBmYWNlOiBldmVudC5mYWNlXG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVuU3Vic2NyaWJlRXZlbnRzKCk7XG4gIH1cbn1cbiJdfQ==