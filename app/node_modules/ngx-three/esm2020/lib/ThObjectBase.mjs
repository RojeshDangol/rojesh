import { Component, Input } from '@angular/core';
import { ThWrapperBase } from './ThWrapperBase';
import * as i0 from "@angular/core";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ThObjectBase extends ThWrapperBase {
    constructor(parent) {
        super();
        this.parent = parent;
    }
    addToParent() {
        if (this._objRef && this._objRef.parent && this._objRef.parent.uuid !== this.parent.objRef.uuid) {
            this.parent.objRef.add(this._objRef);
        }
    }
    removeFromParent() {
        this._objRef?.parent?.remove(this._objRef);
    }
    applyObjRef(objRef) {
        this.attachToParent(objRef, this._objRef);
        this._objRef = objRef;
        this.emitObjRefChange();
    }
    attachToParent(newRef, oldRef) {
        if (!this.parent.objRef || (newRef === oldRef && oldRef?.parent?.uuid === this.parent.objRef.uuid)) {
            return;
        }
        // remove old obj from parent
        if (oldRef && oldRef.parent) {
            oldRef.parent.remove(oldRef);
        }
        // add new obj to parent
        if (newRef && (!newRef.parent || (newRef.parent && newRef.parent.uuid !== this.parent.objRef.uuid))) {
            this.parent.objRef.add(newRef);
        }
    }
    // object 3d methods
    set lookAt(vector) {
        Promise.resolve().then(() => {
            // execute next microtick, to assume all
            // position changes already happend,
            // because lookAt triggers a world matrix calculation
            if (!this.objRef) {
                return;
            }
            if (Array.isArray(vector)) {
                this.objRef.lookAt(...vector);
            }
            else {
                this.objRef.lookAt(vector);
            }
        });
    }
}
ThObjectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObjectBase, deps: [{ token: ThObjectBase }], target: i0.ɵɵFactoryTarget.Component });
ThObjectBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThObjectBase, selector: "th-abs-object", inputs: { lookAt: "lookAt" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObjectBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-object',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: ThObjectBase }]; }, propDecorators: { lookAt: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhPYmplY3RCYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvVGhPYmplY3RCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFLaEQsa0VBQWtFO0FBQ2xFLE1BQU0sT0FBTyxZQUFpRCxTQUFRLGFBQXNCO0lBQzFGLFlBQW1CLE1BQXlCO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBRFMsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7SUFFNUMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDL0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRVMsV0FBVyxDQUFDLE1BQXFCO1FBQ3pDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRVMsY0FBYyxDQUFDLE1BQVUsRUFBRSxNQUFVO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEcsT0FBTztTQUNSO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUI7UUFFRCx3QkFBd0I7UUFDeEIsSUFBSSxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDbkcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVELG9CQUFvQjtJQUNwQixJQUNXLE1BQU0sQ0FBQyxNQUFxRDtRQUNyRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMxQix3Q0FBd0M7WUFDeEMsb0NBQW9DO1lBQ3BDLHFEQUFxRDtZQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsT0FBTzthQUNSO1lBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzt5R0FyRFUsWUFBWSxrQkFDSSxZQUFZOzZGQUQ1QixZQUFZLDBHQUhiLEVBQUU7MkZBR0QsWUFBWTtrQkFMeEIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7MERBRzRCLFlBQVksMEJBc0M1QixNQUFNO3NCQURoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYmplY3QzRCwgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRoV3JhcHBlckJhc2UgfSBmcm9tICcuL1RoV3JhcHBlckJhc2UnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtYWJzLW9iamVjdCcsXG4gIHRlbXBsYXRlOiAnJ1xufSlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFRoT2JqZWN0QmFzZTxUIGV4dGVuZHMgT2JqZWN0M0QsIEFSR1MgPSB1bmtub3duPiBleHRlbmRzIFRoV3JhcHBlckJhc2U8VCwgQVJHUz4gaW1wbGVtZW50cyBPbkluaXQge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGFyZW50OiBUaE9iamVjdEJhc2U8YW55Pikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgYWRkVG9QYXJlbnQoKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZiAmJiB0aGlzLl9vYmpSZWYucGFyZW50ICYmIHRoaXMuX29ialJlZi5wYXJlbnQudXVpZCAhPT0gdGhpcy5wYXJlbnQub2JqUmVmLnV1aWQpIHtcbiAgICAgIHRoaXMucGFyZW50Lm9ialJlZi5hZGQodGhpcy5fb2JqUmVmKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlRnJvbVBhcmVudCgpIHtcbiAgICB0aGlzLl9vYmpSZWY/LnBhcmVudD8ucmVtb3ZlKHRoaXMuX29ialJlZik7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXBwbHlPYmpSZWYob2JqUmVmOiBUIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5hdHRhY2hUb1BhcmVudChvYmpSZWYsIHRoaXMuX29ialJlZik7XG4gICAgdGhpcy5fb2JqUmVmID0gb2JqUmVmO1xuICAgIHRoaXMuZW1pdE9ialJlZkNoYW5nZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGF0dGFjaFRvUGFyZW50KG5ld1JlZj86IFQsIG9sZFJlZj86IFQpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50Lm9ialJlZiB8fCAobmV3UmVmID09PSBvbGRSZWYgJiYgb2xkUmVmPy5wYXJlbnQ/LnV1aWQgPT09IHRoaXMucGFyZW50Lm9ialJlZi51dWlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBvbGQgb2JqIGZyb20gcGFyZW50XG4gICAgaWYgKG9sZFJlZiAmJiBvbGRSZWYucGFyZW50KSB7XG4gICAgICBvbGRSZWYucGFyZW50LnJlbW92ZShvbGRSZWYpO1xuICAgIH1cblxuICAgIC8vIGFkZCBuZXcgb2JqIHRvIHBhcmVudFxuICAgIGlmIChuZXdSZWYgJiYgKCFuZXdSZWYucGFyZW50IHx8IChuZXdSZWYucGFyZW50ICYmIG5ld1JlZi5wYXJlbnQudXVpZCAhPT0gdGhpcy5wYXJlbnQub2JqUmVmLnV1aWQpKSkge1xuICAgICAgdGhpcy5wYXJlbnQub2JqUmVmLmFkZChuZXdSZWYpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG9iamVjdCAzZCBtZXRob2RzXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgbG9va0F0KHZlY3RvcjogVmVjdG9yMyB8IFt4OiBudW1iZXIsIHk/OiBudW1iZXIsIHo/OiBudW1iZXJdKSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAvLyBleGVjdXRlIG5leHQgbWljcm90aWNrLCB0byBhc3N1bWUgYWxsXG4gICAgICAvLyBwb3NpdGlvbiBjaGFuZ2VzIGFscmVhZHkgaGFwcGVuZCxcbiAgICAgIC8vIGJlY2F1c2UgbG9va0F0IHRyaWdnZXJzIGEgd29ybGQgbWF0cml4IGNhbGN1bGF0aW9uXG4gICAgICBpZiAoIXRoaXMub2JqUmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZlY3RvcikpIHtcbiAgICAgICAgdGhpcy5vYmpSZWYubG9va0F0KC4uLnZlY3Rvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9ialJlZi5sb29rQXQodmVjdG9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19