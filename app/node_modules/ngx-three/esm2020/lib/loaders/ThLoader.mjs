import { Directive, EventEmitter, Host, Input, Output } from '@angular/core';
import { createLazyObject3DProxy } from './LazyObject3dProxy';
import * as i0 from "@angular/core";
import * as i1 from "../generated/ThObject3D";
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class ThLoader {
    constructor(host, zone) {
        this.host = host;
        this.zone = zone;
        this.initialized = false;
        this.proxy = createLazyObject3DProxy();
        host.objRef = this.proxy;
    }
    set url(url) {
        this._url = url;
        this.loadAsync();
    }
    get url() {
        return this._url;
    }
    ngOnInit() {
        this.initialized = true;
        this.loadAsync();
        // this.zone.runOutsideAngular(() => );
    }
    get onLoaded() {
        if (!this.onLoaded$) {
            this.onLoaded$ = new EventEmitter();
        }
        return this.onLoaded$;
    }
    get onProgress() {
        if (!this.onProgress$) {
            this.onProgress$ = new EventEmitter();
        }
        return this.onProgress$;
    }
    async loadAsync() {
        if (!this.initialized) {
            return;
        }
        const loaderFn = this.loaderFn;
        if (!loaderFn) {
            throw new Error('Missing loader Function ( @Input() loaderFn )');
        }
        if (!this.proxy) {
            return;
        }
        const onProgress = this.onProgress$
            ? (progress) => {
                this.onProgress$?.next(progress);
            }
            : undefined;
        let loaderResult;
        const onLoaded = this.onLoaded$
            ? (result) => {
                loaderResult = result;
            }
            : undefined;
        const object = await this.zone.runOutsideAngular(() => loaderFn(this.url, onProgress, onLoaded));
        this.proxy.objRef = object;
        // add the new object to the parent and
        // emit a loaded event directly on the three.js object and on objRef$
        this.host.objRef = this.proxy;
        if (this.onLoaded$ && loaderResult !== undefined) {
            this.onLoaded$?.next(loaderResult);
        }
        return object;
    }
}
ThLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLoader, deps: [{ token: i1.ThObject3D, host: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
ThLoader.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: ThLoader, selector: "[load]", inputs: { loaderFn: "loaderFn", url: "url" }, outputs: { onLoaded: "onLoaded", onProgress: "onProgress" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLoader, decorators: [{
            type: Directive,
            args: [{
                    selector: '[load]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }]; }, propDecorators: { loaderFn: [{
                type: Input
            }], url: [{
                type: Input
            }], onLoaded: [{
                type: Output
            }], onProgress: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhMb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9sb2FkZXJzL1RoTG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWtCLE1BQU0sRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFJM0csT0FBTyxFQUFFLHVCQUF1QixFQUFxQixNQUFNLHFCQUFxQixDQUFDOzs7QUFLakYsa0VBQWtFO0FBQ2xFLE1BQU0sT0FBTyxRQUFRO0lBdUJuQixZQUE4QixJQUFxQixFQUFZLElBQVk7UUFBN0MsU0FBSSxHQUFKLElBQUksQ0FBaUI7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBdEJuRSxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQXVCMUIsSUFBSSxDQUFDLEtBQUssR0FBRyx1QkFBdUIsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBbEJELElBQ0ksR0FBRyxDQUFDLEdBQXVCO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFZRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLHVDQUF1QztJQUN6QyxDQUFDO0lBRUQsSUFBYyxRQUFRO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztTQUNyQztRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBYyxVQUFVO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztTQUN2QztRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRVMsS0FBSyxDQUFDLFNBQVM7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTztTQUNSO1FBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixPQUFPO1NBQ1I7UUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVztZQUNqQyxDQUFDLENBQUMsQ0FBQyxRQUFvQyxFQUFFLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLENBQUM7WUFDSCxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRWQsSUFBSSxZQUEyQixDQUFDO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTO1lBQzdCLENBQUMsQ0FBQyxDQUFDLE1BQVMsRUFBRSxFQUFFO2dCQUNaLFlBQVksR0FBRyxNQUFNLENBQUM7WUFDeEIsQ0FBQztZQUNILENBQUMsQ0FBQyxTQUFTLENBQUM7UUFFZCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFakcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzNCLHVDQUF1QztRQUN2QyxxRUFBcUU7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUU5QixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNoRCxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNwQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O3FHQXRGVSxRQUFRO3lGQUFSLFFBQVE7MkZBQVIsUUFBUTtrQkFKcEIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsUUFBUTtpQkFDbkI7OzBCQXlCYyxJQUFJO2lFQWpCVixRQUFRO3NCQURkLEtBQUs7Z0JBSUYsR0FBRztzQkFETixLQUFLO2dCQTBCUSxRQUFRO3NCQUFyQixNQUFNO2dCQU9PLFVBQVU7c0JBQXZCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE5nWm9uZSwgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYmplY3QzRCB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuLi9nZW5lcmF0ZWQvVGhPYmplY3QzRCc7XG5pbXBvcnQgeyBjcmVhdGVMYXp5T2JqZWN0M0RQcm94eSwgTGF6eU9iamVjdDNEUHJveHkgfSBmcm9tICcuL0xhenlPYmplY3QzZFByb3h5JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2xvYWRdJ1xufSlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFRoTG9hZGVyPFQgPSBhbnk+IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX3VybD86IHN0cmluZztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgbG9hZGVyRm4/OiAoaW5wdXQ/OiBzdHJpbmcsIG9uUHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IFByb2dyZXNzRXZlbnQpID0+IHZvaWQsIG9uTG9hZGVkPzogKHJlc3VsdDogVCkgPT4gdm9pZCkgPT4gUHJvbWlzZTxPYmplY3QzRD47XG5cbiAgQElucHV0KClcbiAgc2V0IHVybCh1cmw6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLmxvYWRBc3luYygpO1xuICB9XG5cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByb3h5OiBMYXp5T2JqZWN0M0RQcm94eTtcblxuICBwcm90ZWN0ZWQgb25Mb2FkZWQkPzogRXZlbnRFbWl0dGVyPFQ+O1xuICBwcm90ZWN0ZWQgb25Qcm9ncmVzcyQ/OiBFdmVudEVtaXR0ZXI8UHJvZ3Jlc3NFdmVudD47XG5cbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcm90ZWN0ZWQgaG9zdDogVGhPYmplY3QzRDxhbnk+LCBwcm90ZWN0ZWQgem9uZTogTmdab25lKSB7XG4gICAgdGhpcy5wcm94eSA9IGNyZWF0ZUxhenlPYmplY3QzRFByb3h5KCk7XG4gICAgaG9zdC5vYmpSZWYgPSB0aGlzLnByb3h5O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5sb2FkQXN5bmMoKTtcbiAgICAvLyB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBnZXQgb25Mb2FkZWQoKSB7XG4gICAgaWYgKCF0aGlzLm9uTG9hZGVkJCkge1xuICAgICAgdGhpcy5vbkxvYWRlZCQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9uTG9hZGVkJDtcbiAgfVxuXG4gIEBPdXRwdXQoKSBnZXQgb25Qcm9ncmVzcygpIHtcbiAgICBpZiAoIXRoaXMub25Qcm9ncmVzcyQpIHtcbiAgICAgIHRoaXMub25Qcm9ncmVzcyQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9uUHJvZ3Jlc3MkO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGxvYWRBc3luYygpIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbG9hZGVyRm4gPSB0aGlzLmxvYWRlckZuO1xuICAgIGlmICghbG9hZGVyRm4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBsb2FkZXIgRnVuY3Rpb24gKCBASW5wdXQoKSBsb2FkZXJGbiApJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3h5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb25Qcm9ncmVzcyA9IHRoaXMub25Qcm9ncmVzcyRcbiAgICAgID8gKHByb2dyZXNzOiBQcm9ncmVzc0V2ZW50PEV2ZW50VGFyZ2V0PikgPT4ge1xuICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyQ/Lm5leHQocHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBsb2FkZXJSZXN1bHQ6IFQgfCB1bmRlZmluZWQ7XG4gICAgY29uc3Qgb25Mb2FkZWQgPSB0aGlzLm9uTG9hZGVkJFxuICAgICAgPyAocmVzdWx0OiBUKSA9PiB7XG4gICAgICAgICAgbG9hZGVyUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IG9iamVjdCA9IGF3YWl0IHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBsb2FkZXJGbih0aGlzLnVybCwgb25Qcm9ncmVzcywgb25Mb2FkZWQpKTtcblxuICAgIHRoaXMucHJveHkub2JqUmVmID0gb2JqZWN0O1xuICAgIC8vIGFkZCB0aGUgbmV3IG9iamVjdCB0byB0aGUgcGFyZW50IGFuZFxuICAgIC8vIGVtaXQgYSBsb2FkZWQgZXZlbnQgZGlyZWN0bHkgb24gdGhlIHRocmVlLmpzIG9iamVjdCBhbmQgb24gb2JqUmVmJFxuICAgIHRoaXMuaG9zdC5vYmpSZWYgPSB0aGlzLnByb3h5O1xuXG4gICAgaWYgKHRoaXMub25Mb2FkZWQkICYmIGxvYWRlclJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm9uTG9hZGVkJD8ubmV4dChsb2FkZXJSZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbn1cbiJdfQ==