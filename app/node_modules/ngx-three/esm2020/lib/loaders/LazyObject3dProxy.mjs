import { Object3D } from 'three';
import { applyValue, isSettable } from '../util';
class Object3DProxyHandler {
    constructor() {
        this.memberMap = new Map();
        this.children = [];
        this.eventListener = {};
        this.add = (...object) => {
            if (this.objRef) {
                this.objRef.add(...object);
            }
            this.children.push(...object);
            return this;
        };
        this.remove = (...object) => {
            if (this.objRef) {
                this.objRef.remove(...object);
            }
            for (const obj of object) {
                const index = this.children.indexOf(obj);
                if (index >= 0) {
                    this.children = this.children.splice(index, 1);
                }
            }
            return this;
        };
        this.applyToObject3D = (objRef) => {
            this.memberMap.forEach((value, key) => {
                const member = objRef[key];
                if (isSettable(member)) {
                    applyValue(member, value);
                }
                else {
                    objRef[key] = value;
                }
            });
            this.children.forEach((child) => objRef.add(child));
            if (this.objRef?.parent) {
                const parent = this.objRef?.parent;
                parent.remove(this.objRef);
                parent.add(objRef);
            }
        };
        /**
         * Adds a listener to an event type.
         *
         * @param type The type of event to listen to.
         * @param listener The function that gets called when the event is fired.
         */
        this.addEventListener = (type, listener) => {
            let arr = this.eventListener[type];
            if (!arr) {
                arr = [];
                this.eventListener[type] = arr;
            }
            arr.push(listener);
            if (this.objRef) {
                this.objRef.addEventListener(type, listener);
            }
        };
        /**
         * Removes a listener from an event type.
         *
         * @param type The type of the listener that gets removed.
         * @param listener The listener function that gets removed.
         */
        this.removeEventListener = (type, listener) => {
            const arr = this.eventListener[type];
            if (!arr) {
                return;
            }
            const index = arr.indexOf(listener);
            if (index >= 0) {
                arr.splice(index, 1);
            }
        };
    }
    get(target, p, receiver) {
        switch (p) {
            case '__isProxy':
                return true;
            case 'applyToObject3D':
                return this.applyToObject3D;
            case 'objRef':
                return this.objRef;
            case 'add':
                return this.add;
            case 'remove':
                return this.remove;
            case 'children':
                return this.objRef ? this.objRef.children : this.children;
            default: {
                const objKey = p;
                let value = this.objRef ? this.objRef[objKey] : this.memberMap.get(objKey);
                if (value === undefined) {
                    value = target[objKey];
                    if (value !== undefined) {
                        // this is necessary for complex members
                        // (returned by reference, they might be altered, we have to reapply them to the real object )
                        this.memberMap.set(objKey, value);
                    }
                }
                return value ?? target[objKey];
            }
        }
    }
    set(target, p, value, receiver) {
        if (p === 'objRef') {
            if (value) {
                this.applyToObject3D(value);
            }
            this.objRef = value;
        }
        else {
            // store to the member map
            this.memberMap.set(p, value);
            if (this.objRef) {
                // and apply to the real object if present
                this.objRef[p] = value;
            }
        }
        return true;
    }
}
export function createLazyObject3DProxy() {
    return new Proxy(new Object3D(), new Object3DProxyHandler());
}
export function isLazyObject3dProxy(object) {
    // eslint-disable-next-line no-underscore-dangle
    return object.__isProxy === true && object.objRef === undefined;
}
//# sourceMappingURL=data:application/json;base64,