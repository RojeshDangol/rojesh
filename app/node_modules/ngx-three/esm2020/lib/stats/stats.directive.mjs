import { Directive, Input } from '@angular/core';
import Stats from 'three/examples/jsm/libs/stats.module';
import * as i0 from "@angular/core";
import * as i1 from "../ThEngine.service";
export class StatsDirective {
    constructor(engineService) {
        this.engineService = engineService;
        this.stats = Stats();
    }
    ngOnDestroy() {
        if (this.renderSubscription) {
            this.renderSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        if (!this.engineService.canvas) {
            throw new Error('No canvas present');
        }
        const parentElement = this.engineService.canvas.parentElement;
        if (parentElement) {
            parentElement.style.position = 'relative';
            this.stats.domElement.style.position = 'absolute';
            this.stats.showPanel(0);
            this.engineService.canvas.parentElement?.appendChild(this.stats.dom);
            this.renderSubscription = this.engineService.beforeRender$.subscribe(() => {
                this.stats.update();
            });
        }
    }
    set thStats(enabled) {
        if (!enabled) {
            this.stats.domElement.style.visibility = 'hidden';
        }
        else {
            this.stats.domElement.style.visibility = 'visible';
        }
    }
}
StatsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StatsDirective, deps: [{ token: i1.ThEngineService }], target: i0.ɵɵFactoryTarget.Directive });
StatsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: StatsDirective, selector: "[thStats]", inputs: { thStats: "thStats" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StatsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[thStats]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }]; }, propDecorators: { thStats: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvc3RhdHMvc3RhdHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUVwRSxPQUFPLEtBQUssTUFBTSxzQ0FBc0MsQ0FBQzs7O0FBTXpELE1BQU0sT0FBTyxjQUFjO0lBR3pCLFlBQW9CLGFBQThCO1FBQTlCLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQUNoRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBRyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztJQUNELFFBQVE7UUFDTixJQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzlELElBQUcsYUFBYSxFQUFFO1lBQ2hCLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztZQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztZQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3hFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7U0FDRjtJQUNILENBQUM7SUFFRCxJQUNXLE9BQU8sQ0FBQyxPQUFnQjtRQUNqQyxJQUFHLENBQUMsT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7U0FDbkQ7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQzs7MkdBbkNVLGNBQWM7K0ZBQWQsY0FBYzsyRkFBZCxjQUFjO2tCQUgxQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO2lCQUN0QjtzR0E4QlksT0FBTztzQkFEakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaEVuZ2luZVNlcnZpY2UgfSBmcm9tICcuLi9UaEVuZ2luZS5zZXJ2aWNlJztcbmltcG9ydCBTdGF0cyBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t0aFN0YXRzXSdcbn0pXG5leHBvcnQgY2xhc3MgU3RhdHNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3RhdHM6IFN0YXRzO1xuICBwcml2YXRlIHJlbmRlclN1YnNjcmlwdGlvbj86IFN1YnNjcmlwdGlvbjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbmdpbmVTZXJ2aWNlOiBUaEVuZ2luZVNlcnZpY2UpIHtcbiAgICB0aGlzLnN0YXRzID0gU3RhdHMoKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZih0aGlzLnJlbmRlclN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5yZW5kZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYoIXRoaXMuZW5naW5lU2VydmljZS5jYW52YXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FudmFzIHByZXNlbnQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gdGhpcy5lbmdpbmVTZXJ2aWNlLmNhbnZhcy5wYXJlbnRFbGVtZW50O1xuICAgIGlmKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgdGhpcy5zdGF0cy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHRoaXMuc3RhdHMuc2hvd1BhbmVsKDApO1xuICAgIHRoaXMuZW5naW5lU2VydmljZS5jYW52YXMucGFyZW50RWxlbWVudD8uYXBwZW5kQ2hpbGQodGhpcy5zdGF0cy5kb20pO1xuICAgIHRoaXMucmVuZGVyU3Vic2NyaXB0aW9uID0gdGhpcy5lbmdpbmVTZXJ2aWNlLmJlZm9yZVJlbmRlciQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuc3RhdHMudXBkYXRlKCk7XG4gICAgfSk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCB0aFN0YXRzKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICBpZighZW5hYmxlZCkge1xuICAgICAgdGhpcy5zdGF0cy5kb21FbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0cy5kb21FbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==