/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { SSRPass, } from 'three/examples/jsm/postprocessing/SSRPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThSSRPass extends ThPass {
    getType() {
        return SSRPass;
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set groundReflector(value) {
        if (this._objRef) {
            this._objRef.groundReflector = value;
        }
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set thickness(value) {
        if (this._objRef) {
            this._objRef.thickness = value;
        }
    }
    set tempColor(value) {
        if (this._objRef) {
            this._objRef.tempColor = applyValue(this._objRef.tempColor, value);
        }
    }
    set selective(value) {
        if (this._objRef) {
            this._objRef.selective = value;
        }
    }
    set blur(value) {
        if (this._objRef) {
            this._objRef.blur = value;
        }
    }
    set thickTolerance(value) {
        if (this._objRef) {
            this._objRef.thickTolerance = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set prevRenderTarget(value) {
        if (this._objRef) {
            this._objRef.prevRenderTarget = value;
        }
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    set metalnessRenderTarget(value) {
        if (this._objRef) {
            this._objRef.metalnessRenderTarget = value;
        }
    }
    set ssrRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssrRenderTarget = value;
        }
    }
    set blurRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget = value;
        }
    }
    set blurRenderTarget2(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget2 = value;
        }
    }
    set ssrMaterial(value) {
        if (this._objRef) {
            this._objRef.ssrMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set metalnessOnMaterial(value) {
        if (this._objRef) {
            this._objRef.metalnessOnMaterial = value;
        }
    }
    set metalnessOffMaterial(value) {
        if (this._objRef) {
            this._objRef.metalnessOffMaterial = value;
        }
    }
    set blurMaterial(value) {
        if (this._objRef) {
            this._objRef.blurMaterial = value;
        }
    }
    set blurMaterial2(value) {
        if (this._objRef) {
            this._objRef.blurMaterial2 = value;
        }
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    set dispose(value) {
        if (this._objRef) {
            this._objRef.dispose = value;
        }
    }
    set renderPass(value) {
        if (this._objRef) {
            this._objRef.renderPass = value;
        }
    }
    set renderOverride(value) {
        if (this._objRef) {
            this._objRef.renderOverride = value;
        }
    }
    set renderMetalness(value) {
        if (this._objRef) {
            this._objRef.renderMetalness = value;
        }
    }
}
ThSSRPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSRPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSRPass, selector: "th-sSRPass", inputs: { width: "width", height: "height", clear: "clear", renderer: "renderer", scene: "scene", camera: "camera", groundReflector: "groundReflector", opacity: "opacity", output: "output", maxDistance: "maxDistance", thickness: "thickness", tempColor: "tempColor", selective: "selective", blur: "blur", thickTolerance: "thickTolerance", beautyRenderTarget: "beautyRenderTarget", prevRenderTarget: "prevRenderTarget", normalRenderTarget: "normalRenderTarget", metalnessRenderTarget: "metalnessRenderTarget", ssrRenderTarget: "ssrRenderTarget", blurRenderTarget: "blurRenderTarget", blurRenderTarget2: "blurRenderTarget2", ssrMaterial: "ssrMaterial", normalMaterial: "normalMaterial", metalnessOnMaterial: "metalnessOnMaterial", metalnessOffMaterial: "metalnessOffMaterial", blurMaterial: "blurMaterial", blurMaterial2: "blurMaterial2", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor", dispose: "dispose", renderPass: "renderPass", renderOverride: "renderOverride", renderMetalness: "renderMetalness" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSRPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRPass) },
                    ],
                }]
        }], propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], renderer: [{
                type: Input
            }], scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], groundReflector: [{
                type: Input
            }], opacity: [{
                type: Input
            }], output: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], thickness: [{
                type: Input
            }], tempColor: [{
                type: Input
            }], selective: [{
                type: Input
            }], blur: [{
                type: Input
            }], thickTolerance: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], prevRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], metalnessRenderTarget: [{
                type: Input
            }], ssrRenderTarget: [{
                type: Input
            }], blurRenderTarget: [{
                type: Input
            }], blurRenderTarget2: [{
                type: Input
            }], ssrMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], metalnessOnMaterial: [{
                type: Input
            }], metalnessOffMaterial: [{
                type: Input
            }], blurMaterial: [{
                type: Input
            }], blurMaterial2: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], dispose: [{
                type: Input
            }], renderPass: [{
                type: Input
            }], renderOverride: [{
                type: Input
            }], renderMetalness: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,