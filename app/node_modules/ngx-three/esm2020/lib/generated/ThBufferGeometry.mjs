/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input, SkipSelf, } from '@angular/core';
import { BufferGeometry, } from 'three';
import { ThGeometryBase } from '../ThGeometryBase';
import { applyValue } from '../util';
import * as i0 from "@angular/core";
import * as i1 from "./ThObject3D";
export class ThBufferGeometry extends ThGeometryBase {
    constructor(hostObject) {
        super(hostObject);
    }
    getType() {
        return BufferGeometry;
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set index(value) {
        if (this._objRef) {
            this._objRef.index = applyValue(this._objRef.index, value);
        }
    }
    set attributes(value) {
        if (this._objRef) {
            this._objRef.attributes = value;
        }
    }
    set morphAttributes(value) {
        if (this._objRef) {
            this._objRef.morphAttributes = value;
        }
    }
    set morphTargetsRelative(value) {
        if (this._objRef) {
            this._objRef.morphTargetsRelative = value;
        }
    }
    set groups(value) {
        if (this._objRef) {
            this._objRef.groups = value;
        }
    }
    set boundingBox(value) {
        if (this._objRef) {
            this._objRef.boundingBox = applyValue(this._objRef.boundingBox, value);
        }
    }
    set boundingSphere(value) {
        if (this._objRef) {
            this._objRef.boundingSphere = applyValue(this._objRef.boundingSphere, value);
        }
    }
    set drawRange(value) {
        if (this._objRef) {
            this._objRef.drawRange = value;
        }
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    set drawcalls(value) {
        if (this._objRef) {
            this._objRef.drawcalls = value;
        }
    }
    set offsets(value) {
        if (this._objRef) {
            this._objRef.offsets = value;
        }
    }
}
ThBufferGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBufferGeometry, deps: [{ token: i1.ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThBufferGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBufferGeometry, selector: "th-bufferGeometry", inputs: { id: "id", uuid: "uuid", name: "name", type: "type", index: "index", attributes: "attributes", morphAttributes: "morphAttributes", morphTargetsRelative: "morphTargetsRelative", groups: "groups", boundingBox: "boundingBox", boundingSphere: "boundingSphere", drawRange: "drawRange", userData: "userData", drawcalls: "drawcalls", offsets: "offsets" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBufferGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-bufferGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { id: [{
                type: Input
            }], uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], type: [{
                type: Input
            }], index: [{
                type: Input
            }], attributes: [{
                type: Input
            }], morphAttributes: [{
                type: Input
            }], morphTargetsRelative: [{
                type: Input
            }], groups: [{
                type: Input
            }], boundingBox: [{
                type: Input
            }], boundingSphere: [{
                type: Input
            }], drawRange: [{
                type: Input
            }], userData: [{
                type: Input
            }], drawcalls: [{
                type: Input
            }], offsets: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,