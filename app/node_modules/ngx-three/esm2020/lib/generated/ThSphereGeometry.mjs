/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { SphereGeometry } from 'three';
import { ThBufferGeometry } from './ThBufferGeometry';
import * as i0 from "@angular/core";
export class ThSphereGeometry extends ThBufferGeometry {
    getType() {
        return SphereGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThSphereGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSphereGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSphereGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSphereGeometry, selector: "th-sphereGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThSphereGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSphereGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sphereGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThSphereGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhTcGhlcmVHZW9tZXRyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaFNwaGVyZUdlb21ldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFhdEQsTUFBTSxPQUFPLGdCQVdYLFNBQVEsZ0JBQTBCO0lBQzNCLE9BQU87UUFDWixPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFDVyxJQUFJLENBQUMsS0FBYTtRQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVELElBQ1csVUFBVSxDQUFDLEtBUXJCO1FBQ0MsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUNqQztJQUNILENBQUM7OzZHQXBDVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQixnR0FQaEI7UUFDVDtZQUNFLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztTQUNoRDtLQUNGLGlEQVBTLEVBQUU7MkZBU0QsZ0JBQWdCO2tCQVg1QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSxFQUFFO29CQUNaLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGdCQUFnQjs0QkFDekIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUM7eUJBQ2hEO3FCQUNGO2lCQUNGOzhCQWtCWSxJQUFJO3NCQURkLEtBQUs7Z0JBUUssVUFBVTtzQkFEcEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNwaGVyZUdlb21ldHJ5IH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4vVGhCdWZmZXJHZW9tZXRyeSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLXNwaGVyZUdlb21ldHJ5JyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogVGhCdWZmZXJHZW9tZXRyeSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoU3BoZXJlR2VvbWV0cnkpLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFRoU3BoZXJlR2VvbWV0cnk8XG4gIFQgZXh0ZW5kcyBTcGhlcmVHZW9tZXRyeSA9IFNwaGVyZUdlb21ldHJ5LFxuICBUQVJHUyA9IFtcbiAgICByYWRpdXM/OiBudW1iZXIsXG4gICAgd2lkdGhTZWdtZW50cz86IG51bWJlcixcbiAgICBoZWlnaHRTZWdtZW50cz86IG51bWJlcixcbiAgICBwaGlTdGFydD86IG51bWJlcixcbiAgICBwaGlMZW5ndGg/OiBudW1iZXIsXG4gICAgdGhldGFTdGFydD86IG51bWJlcixcbiAgICB0aGV0YUxlbmd0aD86IG51bWJlclxuICBdXG4+IGV4dGVuZHMgVGhCdWZmZXJHZW9tZXRyeTxULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPFNwaGVyZUdlb21ldHJ5PiB7XG4gICAgcmV0dXJuIFNwaGVyZUdlb21ldHJ5O1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYudHlwZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgcGFyYW1ldGVycyh2YWx1ZToge1xuICAgIHJhZGl1czogbnVtYmVyO1xuICAgIHdpZHRoU2VnbWVudHM6IG51bWJlcjtcbiAgICBoZWlnaHRTZWdtZW50czogbnVtYmVyO1xuICAgIHBoaVN0YXJ0OiBudW1iZXI7XG4gICAgcGhpTGVuZ3RoOiBudW1iZXI7XG4gICAgdGhldGFTdGFydDogbnVtYmVyO1xuICAgIHRoZXRhTGVuZ3RoOiBudW1iZXI7XG4gIH0pIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYucGFyYW1ldGVycyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuIl19