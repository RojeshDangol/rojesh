/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { LineLoop } from 'three';
import { ThLine } from './ThLine';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThLineLoop extends ThLine {
    getType() {
        return LineLoop;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThLineLoop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineLoop, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLineLoop.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLineLoop, selector: "th-lineLoop", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThLineLoop) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineLoop, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lineLoop',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThLineLoop) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhMaW5lTG9vcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaExpbmVMb29wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFrQixRQUFRLEVBQVksTUFBTSxPQUFPLENBQUM7QUFDM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQVUxQyxNQUFNLE9BQU8sVUFLWCxTQUFRLE1BQXNDO0lBQ3ZDLE9BQU87UUFDWixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsSUFDVyxJQUFJLENBQUMsS0FBaUI7UUFDL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztTQUMzQjtJQUNILENBQUM7O3VHQWZVLFVBQVU7MkZBQVYsVUFBVSxnRUFKVjtRQUNULEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0tBQ25FLGlEQUpTLEVBQUU7MkZBTUQsVUFBVTtrQkFSdEIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLEVBQUU7cUJBQ25FO2lCQUNGOzhCQVlZLElBQUk7c0JBRGQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5LCBMaW5lTG9vcCwgTWF0ZXJpYWwgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBUaExpbmUgfSBmcm9tICcuL1RoTGluZSc7XG5pbXBvcnQgeyBUaE9iamVjdDNEIH0gZnJvbSAnLi9UaE9iamVjdDNEJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtbGluZUxvb3AnLFxuICB0ZW1wbGF0ZTogJycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IFRoT2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoTGluZUxvb3ApIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFRoTGluZUxvb3A8XG4gIFRHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5ID0gQnVmZmVyR2VvbWV0cnksXG4gIFRNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHwgTWF0ZXJpYWxbXSA9IE1hdGVyaWFsIHwgTWF0ZXJpYWxbXSxcbiAgVCBleHRlbmRzIExpbmVMb29wPFRHZW9tZXRyeSwgVE1hdGVyaWFsPiA9IExpbmVMb29wPFRHZW9tZXRyeSwgVE1hdGVyaWFsPixcbiAgVEFSR1MgPSBbZ2VvbWV0cnk/OiBUR2VvbWV0cnksIG1hdGVyaWFsPzogVE1hdGVyaWFsXVxuPiBleHRlbmRzIFRoTGluZTxUR2VvbWV0cnksIFRNYXRlcmlhbCwgVCwgVEFSR1M+IHtcbiAgcHVibGljIGdldFR5cGUoKTogVHlwZTxMaW5lTG9vcDxUR2VvbWV0cnksIFRNYXRlcmlhbD4+IHtcbiAgICByZXR1cm4gTGluZUxvb3A7XG4gIH1cblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHR5cGUodmFsdWU6ICdMaW5lTG9vcCcpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYudHlwZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuIl19