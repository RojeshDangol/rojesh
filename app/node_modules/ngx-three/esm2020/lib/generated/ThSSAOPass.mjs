/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { SSAOPass, } from 'three/examples/jsm/postprocessing/SSAOPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThSSAOPass extends ThPass {
    getType() {
        return SSAOPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set kernelRadius(value) {
        if (this._objRef) {
            this._objRef.kernelRadius = value;
        }
    }
    set kernelSize(value) {
        if (this._objRef) {
            this._objRef.kernelSize = value;
        }
    }
    set kernel(value) {
        if (this._objRef) {
            this._objRef.kernel = value;
        }
    }
    set noiseTexture(value) {
        if (this._objRef) {
            this._objRef.noiseTexture = value;
        }
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    set minDistance(value) {
        if (this._objRef) {
            this._objRef.minDistance = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    set ssaoRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssaoRenderTarget = value;
        }
    }
    set blurRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget = value;
        }
    }
    set ssaoMaterial(value) {
        if (this._objRef) {
            this._objRef.ssaoMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set blurMaterial(value) {
        if (this._objRef) {
            this._objRef.blurMaterial = value;
        }
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
}
ThSSAOPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSAOPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSAOPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSAOPass, selector: "th-sSAOPass", inputs: { scene: "scene", camera: "camera", width: "width", height: "height", clear: "clear", kernelRadius: "kernelRadius", kernelSize: "kernelSize", kernel: "kernel", noiseTexture: "noiseTexture", output: "output", minDistance: "minDistance", maxDistance: "maxDistance", beautyRenderTarget: "beautyRenderTarget", normalRenderTarget: "normalRenderTarget", ssaoRenderTarget: "ssaoRenderTarget", blurRenderTarget: "blurRenderTarget", ssaoMaterial: "ssaoMaterial", normalMaterial: "normalMaterial", blurMaterial: "blurMaterial", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSAOPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSAOPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSAOPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSAOPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], kernelRadius: [{
                type: Input
            }], kernelSize: [{
                type: Input
            }], kernel: [{
                type: Input
            }], noiseTexture: [{
                type: Input
            }], output: [{
                type: Input
            }], minDistance: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], ssaoRenderTarget: [{
                type: Input
            }], blurRenderTarget: [{
                type: Input
            }], ssaoMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], blurMaterial: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,