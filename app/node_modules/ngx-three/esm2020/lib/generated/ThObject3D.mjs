/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input, SkipSelf, } from '@angular/core';
import { Object3D, } from 'three';
import { ThObjectBase } from '../ThObjectBase';
import { applyValue } from '../util';
import * as i0 from "@angular/core";
export class ThObject3D extends ThObjectBase {
    constructor(parent) {
        super(parent);
    }
    getType() {
        return Object3D;
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set children(value) {
        if (this._objRef) {
            this._objRef.children = value;
        }
    }
    set up(value) {
        if (this._objRef) {
            this._objRef.up = applyValue(this._objRef.up, value);
        }
    }
    set position(value) {
        if (this._objRef) {
            applyValue(this._objRef.position, value);
        }
    }
    set rotation(value) {
        if (this._objRef) {
            applyValue(this._objRef.rotation, value);
        }
    }
    set quaternion(value) {
        if (this._objRef) {
            applyValue(this._objRef.quaternion, value);
        }
    }
    set scale(value) {
        if (this._objRef) {
            applyValue(this._objRef.scale, value);
        }
    }
    set modelViewMatrix(value) {
        if (this._objRef) {
            applyValue(this._objRef.modelViewMatrix, value);
        }
    }
    set normalMatrix(value) {
        if (this._objRef) {
            applyValue(this._objRef.normalMatrix, value);
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixWorld(value) {
        if (this._objRef) {
            this._objRef.matrixWorld = applyValue(this._objRef.matrixWorld, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    set matrixWorldNeedsUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixWorldNeedsUpdate = value;
        }
    }
    set layers(value) {
        if (this._objRef) {
            this._objRef.layers = applyValue(this._objRef.layers, value);
        }
    }
    set visible(value) {
        if (this._objRef) {
            this._objRef.visible = value;
        }
    }
    set castShadow(value) {
        if (this._objRef) {
            this._objRef.castShadow = value;
        }
    }
    set receiveShadow(value) {
        if (this._objRef) {
            this._objRef.receiveShadow = value;
        }
    }
    set frustumCulled(value) {
        if (this._objRef) {
            this._objRef.frustumCulled = value;
        }
    }
    set renderOrder(value) {
        if (this._objRef) {
            this._objRef.renderOrder = value;
        }
    }
    set animations(value) {
        if (this._objRef) {
            this._objRef.animations = value;
        }
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    set customDepthMaterial(value) {
        if (this._objRef) {
            this._objRef.customDepthMaterial = value;
        }
    }
    set customDistanceMaterial(value) {
        if (this._objRef) {
            this._objRef.customDistanceMaterial = value;
        }
    }
    set onBeforeRender(value) {
        if (this._objRef) {
            this._objRef.onBeforeRender = value;
        }
    }
    set onAfterRender(value) {
        if (this._objRef) {
            this._objRef.onAfterRender = value;
        }
    }
}
ThObject3D.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObject3D, deps: [{ token: ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThObject3D.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThObject3D, selector: "th-object3D", inputs: { id: "id", uuid: "uuid", name: "name", type: "type", children: "children", up: "up", position: "position", rotation: "rotation", quaternion: "quaternion", scale: "scale", modelViewMatrix: "modelViewMatrix", normalMatrix: "normalMatrix", matrix: "matrix", matrixWorld: "matrixWorld", matrixAutoUpdate: "matrixAutoUpdate", matrixWorldNeedsUpdate: "matrixWorldNeedsUpdate", layers: "layers", visible: "visible", castShadow: "castShadow", receiveShadow: "receiveShadow", frustumCulled: "frustumCulled", renderOrder: "renderOrder", animations: "animations", userData: "userData", customDepthMaterial: "customDepthMaterial", customDistanceMaterial: "customDistanceMaterial", onBeforeRender: "onBeforeRender", onAfterRender: "onAfterRender" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObject3D, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-object3D',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], ctorParameters: function () { return [{ type: ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { id: [{
                type: Input
            }], uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], type: [{
                type: Input
            }], children: [{
                type: Input
            }], up: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], quaternion: [{
                type: Input
            }], scale: [{
                type: Input
            }], modelViewMatrix: [{
                type: Input
            }], normalMatrix: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixWorld: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], matrixWorldNeedsUpdate: [{
                type: Input
            }], layers: [{
                type: Input
            }], visible: [{
                type: Input
            }], castShadow: [{
                type: Input
            }], receiveShadow: [{
                type: Input
            }], frustumCulled: [{
                type: Input
            }], renderOrder: [{
                type: Input
            }], animations: [{
                type: Input
            }], userData: [{
                type: Input
            }], customDepthMaterial: [{
                type: Input
            }], customDistanceMaterial: [{
                type: Input
            }], onBeforeRender: [{
                type: Input
            }], onAfterRender: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,