/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThUnrealBloomPass extends ThPass {
    getType() {
        return UnrealBloomPass;
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    set strength(value) {
        if (this._objRef) {
            this._objRef.strength = value;
        }
    }
    set radius(value) {
        if (this._objRef) {
            this._objRef.radius = value;
        }
    }
    set threshold(value) {
        if (this._objRef) {
            this._objRef.threshold = value;
        }
    }
    set clearColor(value) {
        if (this._objRef) {
            this._objRef.clearColor = applyValue(this._objRef.clearColor, value);
        }
    }
    set renderTargetsHorizontal(value) {
        if (this._objRef) {
            this._objRef.renderTargetsHorizontal = value;
        }
    }
    set renderTargetsVertical(value) {
        if (this._objRef) {
            this._objRef.renderTargetsVertical = value;
        }
    }
    set nMips(value) {
        if (this._objRef) {
            this._objRef.nMips = value;
        }
    }
    set renderTargetBright(value) {
        if (this._objRef) {
            this._objRef.renderTargetBright = value;
        }
    }
    set highPassUniforms(value) {
        if (this._objRef) {
            this._objRef.highPassUniforms = value;
        }
    }
    set materialHighPassFilter(value) {
        if (this._objRef) {
            this._objRef.materialHighPassFilter = value;
        }
    }
    set separableBlurMaterials(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterials = value;
        }
    }
    set compositeMaterial(value) {
        if (this._objRef) {
            this._objRef.compositeMaterial = value;
        }
    }
    set bloomTintColors(value) {
        if (this._objRef) {
            this._objRef.bloomTintColors = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    set basic(value) {
        if (this._objRef) {
            this._objRef.basic = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThUnrealBloomPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThUnrealBloomPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThUnrealBloomPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThUnrealBloomPass, selector: "th-unrealBloomPass", inputs: { resolution: "resolution", strength: "strength", radius: "radius", threshold: "threshold", clearColor: "clearColor", renderTargetsHorizontal: "renderTargetsHorizontal", renderTargetsVertical: "renderTargetsVertical", nMips: "nMips", renderTargetBright: "renderTargetBright", highPassUniforms: "highPassUniforms", materialHighPassFilter: "materialHighPassFilter", separableBlurMaterials: "separableBlurMaterials", compositeMaterial: "compositeMaterial", bloomTintColors: "bloomTintColors", copyUniforms: "copyUniforms", materialCopy: "materialCopy", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", basic: "basic", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThUnrealBloomPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThUnrealBloomPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-unrealBloomPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThUnrealBloomPass) },
                    ],
                }]
        }], propDecorators: { resolution: [{
                type: Input
            }], strength: [{
                type: Input
            }], radius: [{
                type: Input
            }], threshold: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], renderTargetsHorizontal: [{
                type: Input
            }], renderTargetsVertical: [{
                type: Input
            }], nMips: [{
                type: Input
            }], renderTargetBright: [{
                type: Input
            }], highPassUniforms: [{
                type: Input
            }], materialHighPassFilter: [{
                type: Input
            }], separableBlurMaterials: [{
                type: Input
            }], compositeMaterial: [{
                type: Input
            }], bloomTintColors: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], basic: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,