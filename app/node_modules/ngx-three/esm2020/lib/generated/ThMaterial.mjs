/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input, SkipSelf, } from '@angular/core';
import { Material, } from 'three';
import { ThMaterialBase } from '../ThMaterialBase';
import * as i0 from "@angular/core";
import * as i1 from "./ThObject3D";
export class ThMaterial extends ThMaterialBase {
    constructor(hostObject) {
        super(hostObject);
    }
    getType() {
        return Material;
    }
    set alphaTest(value) {
        if (this._objRef) {
            this._objRef.alphaTest = value;
        }
    }
    set alphaToCoverage(value) {
        if (this._objRef) {
            this._objRef.alphaToCoverage = value;
        }
    }
    set blendDst(value) {
        if (this._objRef) {
            this._objRef.blendDst = value;
        }
    }
    set blendDstAlpha(value) {
        if (this._objRef) {
            this._objRef.blendDstAlpha = value;
        }
    }
    set blendEquation(value) {
        if (this._objRef) {
            this._objRef.blendEquation = value;
        }
    }
    set blendEquationAlpha(value) {
        if (this._objRef) {
            this._objRef.blendEquationAlpha = value;
        }
    }
    set blending(value) {
        if (this._objRef) {
            this._objRef.blending = value;
        }
    }
    set blendSrc(value) {
        if (this._objRef) {
            this._objRef.blendSrc = value;
        }
    }
    set blendSrcAlpha(value) {
        if (this._objRef) {
            this._objRef.blendSrcAlpha = value;
        }
    }
    set clipIntersection(value) {
        if (this._objRef) {
            this._objRef.clipIntersection = value;
        }
    }
    set clippingPlanes(value) {
        if (this._objRef) {
            this._objRef.clippingPlanes = value;
        }
    }
    set clipShadows(value) {
        if (this._objRef) {
            this._objRef.clipShadows = value;
        }
    }
    set colorWrite(value) {
        if (this._objRef) {
            this._objRef.colorWrite = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set depthFunc(value) {
        if (this._objRef) {
            this._objRef.depthFunc = value;
        }
    }
    set depthTest(value) {
        if (this._objRef) {
            this._objRef.depthTest = value;
        }
    }
    set depthWrite(value) {
        if (this._objRef) {
            this._objRef.depthWrite = value;
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    set format(value) {
        if (this._objRef) {
            this._objRef.format = value;
        }
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    set stencilWrite(value) {
        if (this._objRef) {
            this._objRef.stencilWrite = value;
        }
    }
    set stencilFunc(value) {
        if (this._objRef) {
            this._objRef.stencilFunc = value;
        }
    }
    set stencilRef(value) {
        if (this._objRef) {
            this._objRef.stencilRef = value;
        }
    }
    set stencilWriteMask(value) {
        if (this._objRef) {
            this._objRef.stencilWriteMask = value;
        }
    }
    set stencilFuncMask(value) {
        if (this._objRef) {
            this._objRef.stencilFuncMask = value;
        }
    }
    set stencilFail(value) {
        if (this._objRef) {
            this._objRef.stencilFail = value;
        }
    }
    set stencilZFail(value) {
        if (this._objRef) {
            this._objRef.stencilZFail = value;
        }
    }
    set stencilZPass(value) {
        if (this._objRef) {
            this._objRef.stencilZPass = value;
        }
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    set needsUpdate(value) {
        if (this._objRef) {
            this._objRef.needsUpdate = value;
        }
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    set polygonOffset(value) {
        if (this._objRef) {
            this._objRef.polygonOffset = value;
        }
    }
    set polygonOffsetFactor(value) {
        if (this._objRef) {
            this._objRef.polygonOffsetFactor = value;
        }
    }
    set polygonOffsetUnits(value) {
        if (this._objRef) {
            this._objRef.polygonOffsetUnits = value;
        }
    }
    set precision(value) {
        if (this._objRef) {
            this._objRef.precision = value;
        }
    }
    set premultipliedAlpha(value) {
        if (this._objRef) {
            this._objRef.premultipliedAlpha = value;
        }
    }
    set dithering(value) {
        if (this._objRef) {
            this._objRef.dithering = value;
        }
    }
    set side(value) {
        if (this._objRef) {
            this._objRef.side = value;
        }
    }
    set shadowSide(value) {
        if (this._objRef) {
            this._objRef.shadowSide = value;
        }
    }
    set toneMapped(value) {
        if (this._objRef) {
            this._objRef.toneMapped = value;
        }
    }
    set transparent(value) {
        if (this._objRef) {
            this._objRef.transparent = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    set vertexColors(value) {
        if (this._objRef) {
            this._objRef.vertexColors = value;
        }
    }
    set visible(value) {
        if (this._objRef) {
            this._objRef.visible = value;
        }
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    set version(value) {
        if (this._objRef) {
            this._objRef.version = value;
        }
    }
}
ThMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaterial, deps: [{ token: i1.ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMaterial, selector: "th-material", inputs: { alphaTest: "alphaTest", alphaToCoverage: "alphaToCoverage", blendDst: "blendDst", blendDstAlpha: "blendDstAlpha", blendEquation: "blendEquation", blendEquationAlpha: "blendEquationAlpha", blending: "blending", blendSrc: "blendSrc", blendSrcAlpha: "blendSrcAlpha", clipIntersection: "clipIntersection", clippingPlanes: "clippingPlanes", clipShadows: "clipShadows", colorWrite: "colorWrite", defines: "defines", depthFunc: "depthFunc", depthTest: "depthTest", depthWrite: "depthWrite", fog: "fog", format: "format", id: "id", stencilWrite: "stencilWrite", stencilFunc: "stencilFunc", stencilRef: "stencilRef", stencilWriteMask: "stencilWriteMask", stencilFuncMask: "stencilFuncMask", stencilFail: "stencilFail", stencilZFail: "stencilZFail", stencilZPass: "stencilZPass", name: "name", needsUpdate: "needsUpdate", opacity: "opacity", polygonOffset: "polygonOffset", polygonOffsetFactor: "polygonOffsetFactor", polygonOffsetUnits: "polygonOffsetUnits", precision: "precision", premultipliedAlpha: "premultipliedAlpha", dithering: "dithering", side: "side", shadowSide: "shadowSide", toneMapped: "toneMapped", transparent: "transparent", type: "type", uuid: "uuid", vertexColors: "vertexColors", visible: "visible", userData: "userData", version: "version" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-material',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { alphaTest: [{
                type: Input
            }], alphaToCoverage: [{
                type: Input
            }], blendDst: [{
                type: Input
            }], blendDstAlpha: [{
                type: Input
            }], blendEquation: [{
                type: Input
            }], blendEquationAlpha: [{
                type: Input
            }], blending: [{
                type: Input
            }], blendSrc: [{
                type: Input
            }], blendSrcAlpha: [{
                type: Input
            }], clipIntersection: [{
                type: Input
            }], clippingPlanes: [{
                type: Input
            }], clipShadows: [{
                type: Input
            }], colorWrite: [{
                type: Input
            }], defines: [{
                type: Input
            }], depthFunc: [{
                type: Input
            }], depthTest: [{
                type: Input
            }], depthWrite: [{
                type: Input
            }], fog: [{
                type: Input
            }], format: [{
                type: Input
            }], id: [{
                type: Input
            }], stencilWrite: [{
                type: Input
            }], stencilFunc: [{
                type: Input
            }], stencilRef: [{
                type: Input
            }], stencilWriteMask: [{
                type: Input
            }], stencilFuncMask: [{
                type: Input
            }], stencilFail: [{
                type: Input
            }], stencilZFail: [{
                type: Input
            }], stencilZPass: [{
                type: Input
            }], name: [{
                type: Input
            }], needsUpdate: [{
                type: Input
            }], opacity: [{
                type: Input
            }], polygonOffset: [{
                type: Input
            }], polygonOffsetFactor: [{
                type: Input
            }], polygonOffsetUnits: [{
                type: Input
            }], precision: [{
                type: Input
            }], premultipliedAlpha: [{
                type: Input
            }], dithering: [{
                type: Input
            }], side: [{
                type: Input
            }], shadowSide: [{
                type: Input
            }], toneMapped: [{
                type: Input
            }], transparent: [{
                type: Input
            }], type: [{
                type: Input
            }], uuid: [{
                type: Input
            }], vertexColors: [{
                type: Input
            }], visible: [{
                type: Input
            }], userData: [{
                type: Input
            }], version: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,