/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { ShaderMaterial, } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export class ThShaderMaterial extends ThMaterial {
    getType() {
        return ShaderMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set uniforms(value) {
        if (this._objRef) {
            this._objRef.uniforms = value;
        }
    }
    set vertexShader(value) {
        if (this._objRef) {
            this._objRef.vertexShader = value;
        }
    }
    set fragmentShader(value) {
        if (this._objRef) {
            this._objRef.fragmentShader = value;
        }
    }
    set linewidth(value) {
        if (this._objRef) {
            this._objRef.linewidth = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    set lights(value) {
        if (this._objRef) {
            this._objRef.lights = value;
        }
    }
    set clipping(value) {
        if (this._objRef) {
            this._objRef.clipping = value;
        }
    }
    set derivatives(value) {
        if (this._objRef) {
            this._objRef.derivatives = value;
        }
    }
    set extensions(value) {
        if (this._objRef) {
            this._objRef.extensions = value;
        }
    }
    set defaultAttributeValues(value) {
        if (this._objRef) {
            this._objRef.defaultAttributeValues = value;
        }
    }
    set index0AttributeName(value) {
        if (this._objRef) {
            this._objRef.index0AttributeName = value;
        }
    }
    set uniformsNeedUpdate(value) {
        if (this._objRef) {
            this._objRef.uniformsNeedUpdate = value;
        }
    }
    set glslVersion(value) {
        if (this._objRef) {
            this._objRef.glslVersion = value;
        }
    }
    set isShaderMaterial(value) {
        if (this._objRef) {
            this._objRef.isShaderMaterial = value;
        }
    }
}
ThShaderMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShaderMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThShaderMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThShaderMaterial, selector: "th-shaderMaterial", inputs: { type: "type", defines: "defines", uniforms: "uniforms", vertexShader: "vertexShader", fragmentShader: "fragmentShader", linewidth: "linewidth", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", fog: "fog", lights: "lights", clipping: "clipping", derivatives: "derivatives", extensions: "extensions", defaultAttributeValues: "defaultAttributeValues", index0AttributeName: "index0AttributeName", uniformsNeedUpdate: "uniformsNeedUpdate", glslVersion: "glslVersion", isShaderMaterial: "isShaderMaterial" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThShaderMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShaderMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-shaderMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThShaderMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], vertexShader: [{
                type: Input
            }], fragmentShader: [{
                type: Input
            }], linewidth: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], fog: [{
                type: Input
            }], lights: [{
                type: Input
            }], clipping: [{
                type: Input
            }], derivatives: [{
                type: Input
            }], extensions: [{
                type: Input
            }], defaultAttributeValues: [{
                type: Input
            }], index0AttributeName: [{
                type: Input
            }], uniformsNeedUpdate: [{
                type: Input
            }], glslVersion: [{
                type: Input
            }], isShaderMaterial: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,