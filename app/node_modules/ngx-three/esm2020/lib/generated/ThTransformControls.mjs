/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { TransformControls } from 'three/examples/jsm/controls/TransformControls';
import { ThControlBase } from '../ThControlBase';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThTransformControls extends ThObject3D {
    getType() {
        return TransformControls;
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set axis(value) {
        if (this._objRef) {
            this._objRef.axis = value;
        }
    }
    set mode(value) {
        if (this._objRef) {
            this._objRef.mode = value;
        }
    }
    set translationSnap(value) {
        if (this._objRef) {
            this._objRef.translationSnap = value;
        }
    }
    set rotationSnap(value) {
        if (this._objRef) {
            this._objRef.rotationSnap = value;
        }
    }
    set space(value) {
        if (this._objRef) {
            this._objRef.space = value;
        }
    }
    set size(value) {
        if (this._objRef) {
            this._objRef.size = value;
        }
    }
    set dragging(value) {
        if (this._objRef) {
            this._objRef.dragging = value;
        }
    }
    set showX(value) {
        if (this._objRef) {
            this._objRef.showX = value;
        }
    }
    set showY(value) {
        if (this._objRef) {
            this._objRef.showY = value;
        }
    }
    set showZ(value) {
        if (this._objRef) {
            this._objRef.showZ = value;
        }
    }
    set mouseButtons(value) {
        if (this._objRef) {
            this._objRef.mouseButtons = value;
        }
    }
}
ThTransformControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTransformControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTransformControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTransformControls, selector: "th-transformControls", inputs: { domElement: "domElement", camera: "camera", object: "object", enabled: "enabled", axis: "axis", mode: "mode", translationSnap: "translationSnap", rotationSnap: "rotationSnap", space: "space", size: "size", dragging: "dragging", showX: "showX", showY: "showY", showZ: "showZ", mouseButtons: "mouseButtons" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThTransformControls),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTransformControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-transformControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThTransformControls),
                        },
                    ],
                }]
        }], propDecorators: { domElement: [{
                type: Input
            }], camera: [{
                type: Input
            }], object: [{
                type: Input
            }], enabled: [{
                type: Input
            }], axis: [{
                type: Input
            }], mode: [{
                type: Input
            }], translationSnap: [{
                type: Input
            }], rotationSnap: [{
                type: Input
            }], space: [{
                type: Input
            }], size: [{
                type: Input
            }], dragging: [{
                type: Input
            }], showX: [{
                type: Input
            }], showY: [{
                type: Input
            }], showZ: [{
                type: Input
            }], mouseButtons: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,