/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export class ThFirstPersonControls extends ThControlBase {
    getType() {
        return FirstPersonControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set movementSpeed(value) {
        if (this._objRef) {
            this._objRef.movementSpeed = value;
        }
    }
    set lookSpeed(value) {
        if (this._objRef) {
            this._objRef.lookSpeed = value;
        }
    }
    set lookVertical(value) {
        if (this._objRef) {
            this._objRef.lookVertical = value;
        }
    }
    set autoForward(value) {
        if (this._objRef) {
            this._objRef.autoForward = value;
        }
    }
    set activeLook(value) {
        if (this._objRef) {
            this._objRef.activeLook = value;
        }
    }
    set heightSpeed(value) {
        if (this._objRef) {
            this._objRef.heightSpeed = value;
        }
    }
    set heightCoef(value) {
        if (this._objRef) {
            this._objRef.heightCoef = value;
        }
    }
    set heightMin(value) {
        if (this._objRef) {
            this._objRef.heightMin = value;
        }
    }
    set heightMax(value) {
        if (this._objRef) {
            this._objRef.heightMax = value;
        }
    }
    set constrainVertical(value) {
        if (this._objRef) {
            this._objRef.constrainVertical = value;
        }
    }
    set verticalMin(value) {
        if (this._objRef) {
            this._objRef.verticalMin = value;
        }
    }
    set verticalMax(value) {
        if (this._objRef) {
            this._objRef.verticalMax = value;
        }
    }
    set mouseDragOn(value) {
        if (this._objRef) {
            this._objRef.mouseDragOn = value;
        }
    }
}
ThFirstPersonControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFirstPersonControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThFirstPersonControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThFirstPersonControls, selector: "th-firstPersonControls", inputs: { object: "object", domElement: "domElement", enabled: "enabled", movementSpeed: "movementSpeed", lookSpeed: "lookSpeed", lookVertical: "lookVertical", autoForward: "autoForward", activeLook: "activeLook", heightSpeed: "heightSpeed", heightCoef: "heightCoef", heightMin: "heightMin", heightMax: "heightMax", constrainVertical: "constrainVertical", verticalMin: "verticalMin", verticalMax: "verticalMax", mouseDragOn: "mouseDragOn" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThFirstPersonControls),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFirstPersonControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-firstPersonControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThFirstPersonControls),
                        },
                    ],
                }]
        }], propDecorators: { object: [{
                type: Input
            }], domElement: [{
                type: Input
            }], enabled: [{
                type: Input
            }], movementSpeed: [{
                type: Input
            }], lookSpeed: [{
                type: Input
            }], lookVertical: [{
                type: Input
            }], autoForward: [{
                type: Input
            }], activeLook: [{
                type: Input
            }], heightSpeed: [{
                type: Input
            }], heightCoef: [{
                type: Input
            }], heightMin: [{
                type: Input
            }], heightMax: [{
                type: Input
            }], constrainVertical: [{
                type: Input
            }], verticalMin: [{
                type: Input
            }], verticalMax: [{
                type: Input
            }], mouseDragOn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,