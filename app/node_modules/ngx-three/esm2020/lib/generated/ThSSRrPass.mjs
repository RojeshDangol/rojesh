/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { SSRrPass, } from 'three/examples/jsm/postprocessing/SSRrPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThSSRrPass extends ThPass {
    getType() {
        return SSRrPass;
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    set ior(value) {
        if (this._objRef) {
            this._objRef.ior = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set surfDist(value) {
        if (this._objRef) {
            this._objRef.surfDist = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set seleects(value) {
        if (this._objRef) {
            this._objRef.seleects = value;
        }
    }
    set _specular(value) {
        if (this._objRef) {
            this._objRef._specular = value;
        }
    }
    set _fillHole(value) {
        if (this._objRef) {
            this._objRef._fillHole = value;
        }
    }
    set _infiniteThick(value) {
        if (this._objRef) {
            this._objRef._infiniteThick = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set specularRenderTarget(value) {
        if (this._objRef) {
            this._objRef.specularRenderTarget = value;
        }
    }
    set normalSelectsRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalSelectsRenderTarget = value;
        }
    }
    set refractiveRenderTarget(value) {
        if (this._objRef) {
            this._objRef.refractiveRenderTarget = value;
        }
    }
    set ssrrRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssrrRenderTarget = value;
        }
    }
    set ssrrMaterial(value) {
        if (this._objRef) {
            this._objRef.ssrrMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set refractiveOnMaterial(value) {
        if (this._objRef) {
            this._objRef.refractiveOnMaterial = value;
        }
    }
    set refractiveOffMaterial(value) {
        if (this._objRef) {
            this._objRef.refractiveOffMaterial = value;
        }
    }
    set specularMaterial(value) {
        if (this._objRef) {
            this._objRef.specularMaterial = value;
        }
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    set dispose(value) {
        if (this._objRef) {
            this._objRef.dispose = value;
        }
    }
    set render(value) {
        if (this._objRef) {
            this._objRef.render = value;
        }
    }
    set renderPass(value) {
        if (this._objRef) {
            this._objRef.renderPass = value;
        }
    }
    set renderOverride(value) {
        if (this._objRef) {
            this._objRef.renderOverride = value;
        }
    }
    set renderRefractive(value) {
        if (this._objRef) {
            this._objRef.renderRefractive = value;
        }
    }
    set setSize(value) {
        if (this._objRef) {
            this._objRef.setSize = value;
        }
    }
}
ThSSRrPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRrPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSRrPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSRrPass, selector: "th-sSRrPass", inputs: { width: "width", height: "height", clear: "clear", renderer: "renderer", scene: "scene", camera: "camera", output: "output", ior: "ior", maxDistance: "maxDistance", surfDist: "surfDist", color: "color", seleects: "seleects", _specular: "_specular", _fillHole: "_fillHole", _infiniteThick: "_infiniteThick", beautyRenderTarget: "beautyRenderTarget", specularRenderTarget: "specularRenderTarget", normalSelectsRenderTarget: "normalSelectsRenderTarget", refractiveRenderTarget: "refractiveRenderTarget", ssrrRenderTarget: "ssrrRenderTarget", ssrrMaterial: "ssrrMaterial", normalMaterial: "normalMaterial", refractiveOnMaterial: "refractiveOnMaterial", refractiveOffMaterial: "refractiveOffMaterial", specularMaterial: "specularMaterial", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor", dispose: "dispose", render: "render", renderPass: "renderPass", renderOverride: "renderOverride", renderRefractive: "renderRefractive", setSize: "setSize" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRrPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRrPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSRrPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRrPass) },
                    ],
                }]
        }], propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], renderer: [{
                type: Input
            }], scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], output: [{
                type: Input
            }], ior: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], surfDist: [{
                type: Input
            }], color: [{
                type: Input
            }], seleects: [{
                type: Input
            }], _specular: [{
                type: Input
            }], _fillHole: [{
                type: Input
            }], _infiniteThick: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], specularRenderTarget: [{
                type: Input
            }], normalSelectsRenderTarget: [{
                type: Input
            }], refractiveRenderTarget: [{
                type: Input
            }], ssrrRenderTarget: [{
                type: Input
            }], ssrrMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], refractiveOnMaterial: [{
                type: Input
            }], refractiveOffMaterial: [{
                type: Input
            }], specularMaterial: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], dispose: [{
                type: Input
            }], render: [{
                type: Input
            }], renderPass: [{
                type: Input
            }], renderOverride: [{
                type: Input
            }], renderRefractive: [{
                type: Input
            }], setSize: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,