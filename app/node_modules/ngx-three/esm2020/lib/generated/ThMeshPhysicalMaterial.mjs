/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { MeshPhysicalMaterial, } from 'three';
import { applyValue } from '../util';
import { ThMaterial } from './ThMaterial';
import { ThMeshStandardMaterial } from './ThMeshStandardMaterial';
import * as i0 from "@angular/core";
export class ThMeshPhysicalMaterial extends ThMeshStandardMaterial {
    getType() {
        return MeshPhysicalMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set clearcoat(value) {
        if (this._objRef) {
            this._objRef.clearcoat = value;
        }
    }
    set clearcoatMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatMap = value;
        }
    }
    set clearcoatRoughness(value) {
        if (this._objRef) {
            this._objRef.clearcoatRoughness = value;
        }
    }
    set clearcoatRoughnessMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatRoughnessMap = value;
        }
    }
    set clearcoatNormalScale(value) {
        if (this._objRef) {
            this._objRef.clearcoatNormalScale = applyValue(this._objRef.clearcoatNormalScale, value);
        }
    }
    set clearcoatNormalMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatNormalMap = value;
        }
    }
    set reflectivity(value) {
        if (this._objRef) {
            this._objRef.reflectivity = value;
        }
    }
    set ior(value) {
        if (this._objRef) {
            this._objRef.ior = value;
        }
    }
    set sheen(value) {
        if (this._objRef) {
            this._objRef.sheen = value;
        }
    }
    set sheenColor(value) {
        if (this._objRef) {
            this._objRef.sheenColor = applyValue(this._objRef.sheenColor, value);
        }
    }
    set sheenColorMap(value) {
        if (this._objRef) {
            this._objRef.sheenColorMap = value;
        }
    }
    set sheenRoughness(value) {
        if (this._objRef) {
            this._objRef.sheenRoughness = value;
        }
    }
    set sheenRoughnessMap(value) {
        if (this._objRef) {
            this._objRef.sheenRoughnessMap = value;
        }
    }
    set transmission(value) {
        if (this._objRef) {
            this._objRef.transmission = value;
        }
    }
    set transmissionMap(value) {
        if (this._objRef) {
            this._objRef.transmissionMap = value;
        }
    }
    set thickness(value) {
        if (this._objRef) {
            this._objRef.thickness = value;
        }
    }
    set thicknessMap(value) {
        if (this._objRef) {
            this._objRef.thicknessMap = value;
        }
    }
    set attenuationDistance(value) {
        if (this._objRef) {
            this._objRef.attenuationDistance = value;
        }
    }
    set attenuationColor(value) {
        if (this._objRef) {
            this._objRef.attenuationColor = applyValue(this._objRef.attenuationColor, value);
        }
    }
    set specularIntensity(value) {
        if (this._objRef) {
            this._objRef.specularIntensity = value;
        }
    }
    set specularColor(value) {
        if (this._objRef) {
            this._objRef.specularColor = applyValue(this._objRef.specularColor, value);
        }
    }
    set specularIntensityMap(value) {
        if (this._objRef) {
            this._objRef.specularIntensityMap = value;
        }
    }
    set specularColorMap(value) {
        if (this._objRef) {
            this._objRef.specularColorMap = value;
        }
    }
}
ThMeshPhysicalMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshPhysicalMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshPhysicalMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshPhysicalMaterial, selector: "th-meshPhysicalMaterial", inputs: { type: "type", defines: "defines", clearcoat: "clearcoat", clearcoatMap: "clearcoatMap", clearcoatRoughness: "clearcoatRoughness", clearcoatRoughnessMap: "clearcoatRoughnessMap", clearcoatNormalScale: "clearcoatNormalScale", clearcoatNormalMap: "clearcoatNormalMap", reflectivity: "reflectivity", ior: "ior", sheen: "sheen", sheenColor: "sheenColor", sheenColorMap: "sheenColorMap", sheenRoughness: "sheenRoughness", sheenRoughnessMap: "sheenRoughnessMap", transmission: "transmission", transmissionMap: "transmissionMap", thickness: "thickness", thicknessMap: "thicknessMap", attenuationDistance: "attenuationDistance", attenuationColor: "attenuationColor", specularIntensity: "specularIntensity", specularColor: "specularColor", specularIntensityMap: "specularIntensityMap", specularColorMap: "specularColorMap" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshPhysicalMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshPhysicalMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshPhysicalMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshPhysicalMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], clearcoat: [{
                type: Input
            }], clearcoatMap: [{
                type: Input
            }], clearcoatRoughness: [{
                type: Input
            }], clearcoatRoughnessMap: [{
                type: Input
            }], clearcoatNormalScale: [{
                type: Input
            }], clearcoatNormalMap: [{
                type: Input
            }], reflectivity: [{
                type: Input
            }], ior: [{
                type: Input
            }], sheen: [{
                type: Input
            }], sheenColor: [{
                type: Input
            }], sheenColorMap: [{
                type: Input
            }], sheenRoughness: [{
                type: Input
            }], sheenRoughnessMap: [{
                type: Input
            }], transmission: [{
                type: Input
            }], transmissionMap: [{
                type: Input
            }], thickness: [{
                type: Input
            }], thicknessMap: [{
                type: Input
            }], attenuationDistance: [{
                type: Input
            }], attenuationColor: [{
                type: Input
            }], specularIntensity: [{
                type: Input
            }], specularColor: [{
                type: Input
            }], specularIntensityMap: [{
                type: Input
            }], specularColorMap: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,