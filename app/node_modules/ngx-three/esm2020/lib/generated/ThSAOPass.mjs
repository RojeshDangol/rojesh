/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { SAOPass, } from 'three/examples/jsm/postprocessing/SAOPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThSAOPass extends ThPass {
    getType() {
        return SAOPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set supportsDepthTextureExtension(value) {
        if (this._objRef) {
            this._objRef.supportsDepthTextureExtension = value;
        }
    }
    set supportsNormalTexture(value) {
        if (this._objRef) {
            this._objRef.supportsNormalTexture = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    set saoRenderTarget(value) {
        if (this._objRef) {
            this._objRef.saoRenderTarget = value;
        }
    }
    set blurIntermediateRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurIntermediateRenderTarget = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    set depthRenderTarget(value) {
        if (this._objRef) {
            this._objRef.depthRenderTarget = value;
        }
    }
    set depthMaterial(value) {
        if (this._objRef) {
            this._objRef.depthMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set saoMaterial(value) {
        if (this._objRef) {
            this._objRef.saoMaterial = value;
        }
    }
    set vBlurMaterial(value) {
        if (this._objRef) {
            this._objRef.vBlurMaterial = value;
        }
    }
    set hBlurMaterial(value) {
        if (this._objRef) {
            this._objRef.hBlurMaterial = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set depthCopy(value) {
        if (this._objRef) {
            this._objRef.depthCopy = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set params(value) {
        if (this._objRef) {
            this._objRef.params = value;
        }
    }
}
ThSAOPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSAOPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSAOPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSAOPass, selector: "th-sAOPass", inputs: { scene: "scene", camera: "camera", supportsDepthTextureExtension: "supportsDepthTextureExtension", supportsNormalTexture: "supportsNormalTexture", originalClearColor: "originalClearColor", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", resolution: "resolution", saoRenderTarget: "saoRenderTarget", blurIntermediateRenderTarget: "blurIntermediateRenderTarget", beautyRenderTarget: "beautyRenderTarget", normalRenderTarget: "normalRenderTarget", depthRenderTarget: "depthRenderTarget", depthMaterial: "depthMaterial", normalMaterial: "normalMaterial", saoMaterial: "saoMaterial", vBlurMaterial: "vBlurMaterial", hBlurMaterial: "hBlurMaterial", materialCopy: "materialCopy", depthCopy: "depthCopy", fsQuad: "fsQuad", params: "params" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSAOPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSAOPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sAOPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSAOPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], supportsDepthTextureExtension: [{
                type: Input
            }], supportsNormalTexture: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], resolution: [{
                type: Input
            }], saoRenderTarget: [{
                type: Input
            }], blurIntermediateRenderTarget: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], depthRenderTarget: [{
                type: Input
            }], depthMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], saoMaterial: [{
                type: Input
            }], vBlurMaterial: [{
                type: Input
            }], hBlurMaterial: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], depthCopy: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], params: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,