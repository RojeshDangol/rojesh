/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { Camera } from 'three';
import { applyValue } from '../util';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThCamera extends ThObject3D {
    getType() {
        return Camera;
    }
    set matrixWorldInverse(value) {
        if (this._objRef) {
            this._objRef.matrixWorldInverse = applyValue(this._objRef.matrixWorldInverse, value);
        }
    }
    set projectionMatrix(value) {
        if (this._objRef) {
            this._objRef.projectionMatrix = applyValue(this._objRef.projectionMatrix, value);
        }
    }
    set projectionMatrixInverse(value) {
        if (this._objRef) {
            this._objRef.projectionMatrixInverse = applyValue(this._objRef.projectionMatrixInverse, value);
        }
    }
}
ThCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCamera, selector: "th-camera", inputs: { matrixWorldInverse: "matrixWorldInverse", projectionMatrix: "projectionMatrix", projectionMatrixInverse: "projectionMatrixInverse" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThCamera) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-camera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThCamera) }],
                }]
        }], propDecorators: { matrixWorldInverse: [{
                type: Input
            }], projectionMatrix: [{
                type: Input
            }], projectionMatrixInverse: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDYW1lcmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9nZW5lcmF0ZWQvVGhDYW1lcmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssR0FFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsTUFBTSxFQUFrQixNQUFNLE9BQU8sQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBUTFDLE1BQU0sT0FBTyxRQUFnRCxTQUFRLFVBSXBFO0lBQ1EsT0FBTztRQUNaLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUNXLGtCQUFrQixDQUMzQixLQW1CSztRQUVMLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLFVBQVUsQ0FDMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFDL0IsS0FBSyxDQUNOLENBQUM7U0FDSDtJQUNILENBQUM7SUFDRCxJQUNXLGdCQUFnQixDQUN6QixLQW1CSztRQUVMLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFDN0IsS0FBSyxDQUNOLENBQUM7U0FDSDtJQUNILENBQUM7SUFDRCxJQUNXLHVCQUF1QixDQUNoQyxLQW1CSztRQUVMLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixHQUFHLFVBQVUsQ0FDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFDcEMsS0FBSyxDQUNOLENBQUM7U0FDSDtJQUNILENBQUM7O3FHQWxHVSxRQUFRO3lGQUFSLFFBQVEsb0xBRlIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGlEQUZuRSxFQUFFOzJGQUlELFFBQVE7a0JBTnBCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSxFQUFFO29CQUNaLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQztpQkFDOUU7OEJBV1ksa0JBQWtCO3NCQUQ1QixLQUFLO2dCQStCSyxnQkFBZ0I7c0JBRDFCLEtBQUs7Z0JBK0JLLHVCQUF1QjtzQkFEakMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbWVyYSwgRXZlbnQsIE1hdHJpeDQgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBhcHBseVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBUaE9iamVjdDNEIH0gZnJvbSAnLi9UaE9iamVjdDNEJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtY2FtZXJhJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUaE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaENhbWVyYSkgfV0sXG59KVxuZXhwb3J0IGNsYXNzIFRoQ2FtZXJhPFQgZXh0ZW5kcyBDYW1lcmEgPSBDYW1lcmEsIFRBUkdTID0gW10+IGV4dGVuZHMgVGhPYmplY3QzRDxcbiAgRXZlbnQsXG4gIFQsXG4gIFRBUkdTXG4+IHtcbiAgcHVibGljIGdldFR5cGUoKTogVHlwZTxDYW1lcmE+IHtcbiAgICByZXR1cm4gQ2FtZXJhO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtYXRyaXhXb3JsZEludmVyc2UoXG4gICAgdmFsdWU6XG4gICAgICB8IE1hdHJpeDRcbiAgICAgIHwgW1xuICAgICAgICAgIG4xMTogbnVtYmVyLFxuICAgICAgICAgIG4xMjogbnVtYmVyLFxuICAgICAgICAgIG4xMzogbnVtYmVyLFxuICAgICAgICAgIG4xNDogbnVtYmVyLFxuICAgICAgICAgIG4yMTogbnVtYmVyLFxuICAgICAgICAgIG4yMjogbnVtYmVyLFxuICAgICAgICAgIG4yMzogbnVtYmVyLFxuICAgICAgICAgIG4yNDogbnVtYmVyLFxuICAgICAgICAgIG4zMTogbnVtYmVyLFxuICAgICAgICAgIG4zMjogbnVtYmVyLFxuICAgICAgICAgIG4zMzogbnVtYmVyLFxuICAgICAgICAgIG4zNDogbnVtYmVyLFxuICAgICAgICAgIG40MTogbnVtYmVyLFxuICAgICAgICAgIG40MjogbnVtYmVyLFxuICAgICAgICAgIG40MzogbnVtYmVyLFxuICAgICAgICAgIG40NDogbnVtYmVyXG4gICAgICAgIF1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1hdHJpeFdvcmxkSW52ZXJzZSA9IGFwcGx5VmFsdWU8TWF0cml4ND4oXG4gICAgICAgIHRoaXMuX29ialJlZi5tYXRyaXhXb3JsZEludmVyc2UsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHByb2plY3Rpb25NYXRyaXgoXG4gICAgdmFsdWU6XG4gICAgICB8IE1hdHJpeDRcbiAgICAgIHwgW1xuICAgICAgICAgIG4xMTogbnVtYmVyLFxuICAgICAgICAgIG4xMjogbnVtYmVyLFxuICAgICAgICAgIG4xMzogbnVtYmVyLFxuICAgICAgICAgIG4xNDogbnVtYmVyLFxuICAgICAgICAgIG4yMTogbnVtYmVyLFxuICAgICAgICAgIG4yMjogbnVtYmVyLFxuICAgICAgICAgIG4yMzogbnVtYmVyLFxuICAgICAgICAgIG4yNDogbnVtYmVyLFxuICAgICAgICAgIG4zMTogbnVtYmVyLFxuICAgICAgICAgIG4zMjogbnVtYmVyLFxuICAgICAgICAgIG4zMzogbnVtYmVyLFxuICAgICAgICAgIG4zNDogbnVtYmVyLFxuICAgICAgICAgIG40MTogbnVtYmVyLFxuICAgICAgICAgIG40MjogbnVtYmVyLFxuICAgICAgICAgIG40MzogbnVtYmVyLFxuICAgICAgICAgIG40NDogbnVtYmVyXG4gICAgICAgIF1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLnByb2plY3Rpb25NYXRyaXggPSBhcHBseVZhbHVlPE1hdHJpeDQ+KFxuICAgICAgICB0aGlzLl9vYmpSZWYucHJvamVjdGlvbk1hdHJpeCxcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgcHJvamVjdGlvbk1hdHJpeEludmVyc2UoXG4gICAgdmFsdWU6XG4gICAgICB8IE1hdHJpeDRcbiAgICAgIHwgW1xuICAgICAgICAgIG4xMTogbnVtYmVyLFxuICAgICAgICAgIG4xMjogbnVtYmVyLFxuICAgICAgICAgIG4xMzogbnVtYmVyLFxuICAgICAgICAgIG4xNDogbnVtYmVyLFxuICAgICAgICAgIG4yMTogbnVtYmVyLFxuICAgICAgICAgIG4yMjogbnVtYmVyLFxuICAgICAgICAgIG4yMzogbnVtYmVyLFxuICAgICAgICAgIG4yNDogbnVtYmVyLFxuICAgICAgICAgIG4zMTogbnVtYmVyLFxuICAgICAgICAgIG4zMjogbnVtYmVyLFxuICAgICAgICAgIG4zMzogbnVtYmVyLFxuICAgICAgICAgIG4zNDogbnVtYmVyLFxuICAgICAgICAgIG40MTogbnVtYmVyLFxuICAgICAgICAgIG40MjogbnVtYmVyLFxuICAgICAgICAgIG40MzogbnVtYmVyLFxuICAgICAgICAgIG40NDogbnVtYmVyXG4gICAgICAgIF1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlID0gYXBwbHlWYWx1ZTxNYXRyaXg0PihcbiAgICAgICAgdGhpcy5fb2JqUmVmLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==