/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, } from '@angular/core';
import { HemisphereLightProbe } from 'three';
import { ThLightProbe } from './ThLightProbe';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThHemisphereLightProbe extends ThLightProbe {
    getType() {
        return HemisphereLightProbe;
    }
}
ThHemisphereLightProbe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLightProbe, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThHemisphereLightProbe.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThHemisphereLightProbe, selector: "th-hemisphereLightProbe", providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThHemisphereLightProbe),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLightProbe, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-hemisphereLightProbe',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThHemisphereLightProbe),
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhIZW1pc3BoZXJlTGlnaHRQcm9iZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaEhlbWlzcGhlcmVMaWdodFByb2JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsR0FFWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXVCLG9CQUFvQixFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQWExQyxNQUFNLE9BQU8sc0JBT1gsU0FBUSxZQUFzQjtJQUN2QixPQUFPO1FBQ1osT0FBTyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDOzttSEFWVSxzQkFBc0I7dUdBQXRCLHNCQUFzQixrREFQdEI7UUFDVDtZQUNFLE9BQU8sRUFBRSxVQUFVO1lBQ25CLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUM7U0FDdEQ7S0FDRixpREFQUyxFQUFFOzJGQVNELHNCQUFzQjtrQkFYbEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUUsRUFBRTtvQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxVQUFVOzRCQUNuQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQzt5QkFDdEQ7cUJBQ0Y7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBmb3J3YXJkUmVmLFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbG9yUmVwcmVzZW50YXRpb24sIEhlbWlzcGhlcmVMaWdodFByb2JlIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhMaWdodFByb2JlIH0gZnJvbSAnLi9UaExpZ2h0UHJvYmUnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4vVGhPYmplY3QzRCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLWhlbWlzcGhlcmVMaWdodFByb2JlJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogVGhPYmplY3QzRCxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoSGVtaXNwaGVyZUxpZ2h0UHJvYmUpLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFRoSGVtaXNwaGVyZUxpZ2h0UHJvYmU8XG4gIFQgZXh0ZW5kcyBIZW1pc3BoZXJlTGlnaHRQcm9iZSA9IEhlbWlzcGhlcmVMaWdodFByb2JlLFxuICBUQVJHUyA9IFtcbiAgICBza3lDb2xvcj86IENvbG9yUmVwcmVzZW50YXRpb24sXG4gICAgZ3JvdW5kQ29sb3I/OiBDb2xvclJlcHJlc2VudGF0aW9uLFxuICAgIGludGVuc2l0eT86IG51bWJlclxuICBdXG4+IGV4dGVuZHMgVGhMaWdodFByb2JlPFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8SGVtaXNwaGVyZUxpZ2h0UHJvYmU+IHtcbiAgICByZXR1cm4gSGVtaXNwaGVyZUxpZ2h0UHJvYmU7XG4gIH1cbn1cbiJdfQ==