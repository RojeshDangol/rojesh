/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThOutlinePass extends ThPass {
    getType() {
        return OutlinePass;
    }
    set renderScene(value) {
        if (this._objRef) {
            this._objRef.renderScene = value;
        }
    }
    set renderCamera(value) {
        if (this._objRef) {
            this._objRef.renderCamera = value;
        }
    }
    set selectedObjects(value) {
        if (this._objRef) {
            this._objRef.selectedObjects = value;
        }
    }
    set visibleEdgeColor(value) {
        if (this._objRef) {
            this._objRef.visibleEdgeColor = applyValue(this._objRef.visibleEdgeColor, value);
        }
    }
    set hiddenEdgeColor(value) {
        if (this._objRef) {
            this._objRef.hiddenEdgeColor = applyValue(this._objRef.hiddenEdgeColor, value);
        }
    }
    set edgeGlow(value) {
        if (this._objRef) {
            this._objRef.edgeGlow = value;
        }
    }
    set usePatternTexture(value) {
        if (this._objRef) {
            this._objRef.usePatternTexture = value;
        }
    }
    set edgeThickness(value) {
        if (this._objRef) {
            this._objRef.edgeThickness = value;
        }
    }
    set edgeStrength(value) {
        if (this._objRef) {
            this._objRef.edgeStrength = value;
        }
    }
    set downSampleRatio(value) {
        if (this._objRef) {
            this._objRef.downSampleRatio = value;
        }
    }
    set pulsePeriod(value) {
        if (this._objRef) {
            this._objRef.pulsePeriod = value;
        }
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    set patternTexture(value) {
        if (this._objRef) {
            this._objRef.patternTexture = value;
        }
    }
    set maskBufferMaterial(value) {
        if (this._objRef) {
            this._objRef.maskBufferMaterial = value;
        }
    }
    set renderTargetMaskBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetMaskBuffer = value;
        }
    }
    set depthMaterial(value) {
        if (this._objRef) {
            this._objRef.depthMaterial = value;
        }
    }
    set prepareMaskMaterial(value) {
        if (this._objRef) {
            this._objRef.prepareMaskMaterial = value;
        }
    }
    set renderTargetDepthBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetDepthBuffer = value;
        }
    }
    set renderTargetMaskDownSampleBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetMaskDownSampleBuffer = value;
        }
    }
    set renderTargetBlurBuffer1(value) {
        if (this._objRef) {
            this._objRef.renderTargetBlurBuffer1 = value;
        }
    }
    set renderTargetBlurBuffer2(value) {
        if (this._objRef) {
            this._objRef.renderTargetBlurBuffer2 = value;
        }
    }
    set edgeDetectionMaterial(value) {
        if (this._objRef) {
            this._objRef.edgeDetectionMaterial = value;
        }
    }
    set renderTargetEdgeBuffer1(value) {
        if (this._objRef) {
            this._objRef.renderTargetEdgeBuffer1 = value;
        }
    }
    set renderTargetEdgeBuffer2(value) {
        if (this._objRef) {
            this._objRef.renderTargetEdgeBuffer2 = value;
        }
    }
    set separableBlurMaterial1(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterial1 = value;
        }
    }
    set separableBlurMaterial2(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterial2 = value;
        }
    }
    set overlayMaterial(value) {
        if (this._objRef) {
            this._objRef.overlayMaterial = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set tempPulseColor1(value) {
        if (this._objRef) {
            this._objRef.tempPulseColor1 = applyValue(this._objRef.tempPulseColor1, value);
        }
    }
    set tempPulseColor2(value) {
        if (this._objRef) {
            this._objRef.tempPulseColor2 = applyValue(this._objRef.tempPulseColor2, value);
        }
    }
    set textureMatrix(value) {
        if (this._objRef) {
            this._objRef.textureMatrix = applyValue(this._objRef.textureMatrix, value);
        }
    }
}
ThOutlinePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOutlinePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOutlinePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThOutlinePass, selector: "th-outlinePass", inputs: { renderScene: "renderScene", renderCamera: "renderCamera", selectedObjects: "selectedObjects", visibleEdgeColor: "visibleEdgeColor", hiddenEdgeColor: "hiddenEdgeColor", edgeGlow: "edgeGlow", usePatternTexture: "usePatternTexture", edgeThickness: "edgeThickness", edgeStrength: "edgeStrength", downSampleRatio: "downSampleRatio", pulsePeriod: "pulsePeriod", resolution: "resolution", patternTexture: "patternTexture", maskBufferMaterial: "maskBufferMaterial", renderTargetMaskBuffer: "renderTargetMaskBuffer", depthMaterial: "depthMaterial", prepareMaskMaterial: "prepareMaskMaterial", renderTargetDepthBuffer: "renderTargetDepthBuffer", renderTargetMaskDownSampleBuffer: "renderTargetMaskDownSampleBuffer", renderTargetBlurBuffer1: "renderTargetBlurBuffer1", renderTargetBlurBuffer2: "renderTargetBlurBuffer2", edgeDetectionMaterial: "edgeDetectionMaterial", renderTargetEdgeBuffer1: "renderTargetEdgeBuffer1", renderTargetEdgeBuffer2: "renderTargetEdgeBuffer2", separableBlurMaterial1: "separableBlurMaterial1", separableBlurMaterial2: "separableBlurMaterial2", overlayMaterial: "overlayMaterial", copyUniforms: "copyUniforms", materialCopy: "materialCopy", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", fsQuad: "fsQuad", tempPulseColor1: "tempPulseColor1", tempPulseColor2: "tempPulseColor2", textureMatrix: "textureMatrix" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThOutlinePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOutlinePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-outlinePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThOutlinePass) },
                    ],
                }]
        }], propDecorators: { renderScene: [{
                type: Input
            }], renderCamera: [{
                type: Input
            }], selectedObjects: [{
                type: Input
            }], visibleEdgeColor: [{
                type: Input
            }], hiddenEdgeColor: [{
                type: Input
            }], edgeGlow: [{
                type: Input
            }], usePatternTexture: [{
                type: Input
            }], edgeThickness: [{
                type: Input
            }], edgeStrength: [{
                type: Input
            }], downSampleRatio: [{
                type: Input
            }], pulsePeriod: [{
                type: Input
            }], resolution: [{
                type: Input
            }], patternTexture: [{
                type: Input
            }], maskBufferMaterial: [{
                type: Input
            }], renderTargetMaskBuffer: [{
                type: Input
            }], depthMaterial: [{
                type: Input
            }], prepareMaskMaterial: [{
                type: Input
            }], renderTargetDepthBuffer: [{
                type: Input
            }], renderTargetMaskDownSampleBuffer: [{
                type: Input
            }], renderTargetBlurBuffer1: [{
                type: Input
            }], renderTargetBlurBuffer2: [{
                type: Input
            }], edgeDetectionMaterial: [{
                type: Input
            }], renderTargetEdgeBuffer1: [{
                type: Input
            }], renderTargetEdgeBuffer2: [{
                type: Input
            }], separableBlurMaterial1: [{
                type: Input
            }], separableBlurMaterial2: [{
                type: Input
            }], overlayMaterial: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], tempPulseColor1: [{
                type: Input
            }], tempPulseColor2: [{
                type: Input
            }], textureMatrix: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,