/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { InstancedMesh, } from 'three';
import { applyValue } from '../util';
import { ThMesh } from './ThMesh';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThInstancedMesh extends ThMesh {
    getType() {
        return InstancedMesh;
    }
    set count(value) {
        if (this._objRef) {
            this._objRef.count = value;
        }
    }
    set instanceColor(value) {
        if (this._objRef) {
            this._objRef.instanceColor = applyValue(this._objRef.instanceColor, value);
        }
    }
    set instanceMatrix(value) {
        if (this._objRef) {
            this._objRef.instanceMatrix = applyValue(this._objRef.instanceMatrix, value);
        }
    }
}
ThInstancedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThInstancedMesh, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThInstancedMesh.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThInstancedMesh, selector: "th-instancedMesh", inputs: { count: "count", instanceColor: "instanceColor", instanceMatrix: "instanceMatrix" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThInstancedMesh) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThInstancedMesh, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-instancedMesh',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThInstancedMesh) },
                    ],
                }]
        }], propDecorators: { count: [{
                type: Input
            }], instanceColor: [{
                type: Input
            }], instanceMatrix: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhJbnN0YW5jZWRNZXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoSW5zdGFuY2VkTWVzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFHTCxhQUFhLEdBRWQsTUFBTSxPQUFPLENBQUM7QUFDZixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFVMUMsTUFBTSxPQUFPLGVBWVgsU0FBUSxNQUFzQztJQUN2QyxPQUFPO1FBQ1osT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQ1csS0FBSyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxJQUNXLGFBQWEsQ0FDdEIsS0FHaUU7UUFFakUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQzFCLEtBQUssQ0FDTixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBQ0QsSUFDVyxjQUFjLENBQ3ZCLEtBRWlFO1FBRWpFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUMzQixLQUFLLENBQ04sQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7NEdBbERVLGVBQWU7Z0dBQWYsZUFBZSx5SUFKZjtRQUNULEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFO0tBQ3hFLGlEQUpTLEVBQUU7MkZBTUQsZUFBZTtrQkFSM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsRUFBRTtvQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO3FCQUN4RTtpQkFDRjs4QkFtQlksS0FBSztzQkFEZixLQUFLO2dCQVFLLGFBQWE7c0JBRHZCLEtBQUs7Z0JBZUssY0FBYztzQkFEeEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEJ1ZmZlckdlb21ldHJ5LFxuICBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsXG4gIEluc3RhbmNlZE1lc2gsXG4gIE1hdGVyaWFsLFxufSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBhcHBseVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBUaE1lc2ggfSBmcm9tICcuL1RoTWVzaCc7XG5pbXBvcnQgeyBUaE9iamVjdDNEIH0gZnJvbSAnLi9UaE9iamVjdDNEJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtaW5zdGFuY2VkTWVzaCcsXG4gIHRlbXBsYXRlOiAnJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogVGhPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhJbnN0YW5jZWRNZXNoKSB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUaEluc3RhbmNlZE1lc2g8XG4gIFRHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5ID0gQnVmZmVyR2VvbWV0cnksXG4gIFRNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHwgTWF0ZXJpYWxbXSA9IE1hdGVyaWFsIHwgTWF0ZXJpYWxbXSxcbiAgVCBleHRlbmRzIEluc3RhbmNlZE1lc2g8VEdlb21ldHJ5LCBUTWF0ZXJpYWw+ID0gSW5zdGFuY2VkTWVzaDxcbiAgICBUR2VvbWV0cnksXG4gICAgVE1hdGVyaWFsXG4gID4sXG4gIFRBUkdTID0gW1xuICAgIGdlb21ldHJ5OiBUR2VvbWV0cnkgfCB1bmRlZmluZWQsXG4gICAgbWF0ZXJpYWw6IFRNYXRlcmlhbCB8IHVuZGVmaW5lZCxcbiAgICBjb3VudDogbnVtYmVyXG4gIF1cbj4gZXh0ZW5kcyBUaE1lc2g8VEdlb21ldHJ5LCBUTWF0ZXJpYWwsIFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8SW5zdGFuY2VkTWVzaDxUR2VvbWV0cnksIFRNYXRlcmlhbD4+IHtcbiAgICByZXR1cm4gSW5zdGFuY2VkTWVzaDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgY291bnQodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5jb3VudCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgaW5zdGFuY2VDb2xvcihcbiAgICB2YWx1ZTpcbiAgICAgIHwgbnVsbFxuICAgICAgfCBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGVcbiAgICAgIHwgW3ZhbHVlOiBBcnJheUxpa2U8bnVtYmVyPiB8IEFycmF5QnVmZmVyVmlldywgb2Zmc2V0PzogbnVtYmVyXVxuICApIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuaW5zdGFuY2VDb2xvciA9IGFwcGx5VmFsdWU8bnVsbCB8IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZT4oXG4gICAgICAgIHRoaXMuX29ialJlZi5pbnN0YW5jZUNvbG9yLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBpbnN0YW5jZU1hdHJpeChcbiAgICB2YWx1ZTpcbiAgICAgIHwgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlXG4gICAgICB8IFt2YWx1ZTogQXJyYXlMaWtlPG51bWJlcj4gfCBBcnJheUJ1ZmZlclZpZXcsIG9mZnNldD86IG51bWJlcl1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmluc3RhbmNlTWF0cml4ID0gYXBwbHlWYWx1ZTxJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU+KFxuICAgICAgICB0aGlzLl9vYmpSZWYuaW5zdGFuY2VNYXRyaXgsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19