/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { ThPassBase } from '../../ThPassBase';
import { ThRenderPassGen } from '../ThRenderPassGen';
import * as i0 from "@angular/core";
import * as i1 from "./ThEffectComposer";
import * as i2 from "../../ThView";
export class ThRenderPass extends ThRenderPassGen {
    constructor(effectComposer, view) {
        super(effectComposer);
        this.effectComposer = effectComposer;
        this.view = view;
    }
    createThreeInstance(args) {
        if (!args) {
            args = new Array(5);
        }
        args[0] = args[0] ?? this.view.scene;
        args[1] = args[1] ?? this.view.camera;
        args[2] = args[2] ?? this.overrideMaterial;
        args[3] = args[3] ?? this.clearColor;
        args[4] = args[4] ?? this.clearAlpha;
        return super.createThreeInstance(args);
    }
    ngAfterContentChecked() {
        if (!this._objRef) {
            return;
        }
        if (this.view.scene && this.view.scene.objRef) {
            this._objRef.scene = this.view.scene.objRef;
        }
        if (this.view.camera && this.view.camera.objRef) {
            this._objRef.camera = this.view.camera.objRef;
        }
    }
}
ThRenderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderPass, deps: [{ token: i1.ThEffectComposer }, { token: i2.ThView }], target: i0.ɵɵFactoryTarget.Component });
ThRenderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRenderPass, selector: "th-renderPass", providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThRenderPass) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-renderPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThRenderPass) }]
                }]
        }], ctorParameters: function () { return [{ type: i1.ThEffectComposer }, { type: i2.ThView }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhSZW5kZXJQYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL292ZXJyaWRlcy9UaFJlbmRlclBhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUF3RCx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXJJLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc5QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFTckQsTUFBTSxPQUFPLFlBSVgsU0FBUSxlQUF5QjtJQUVqQyxZQUFzQixjQUFnQyxFQUFVLElBQVk7UUFDMUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBREYsbUJBQWMsR0FBZCxjQUFjLENBQWtCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUU1RSxDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBVSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQzNDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFckMsT0FBTyxLQUFLLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixPQUFPO1NBQ1I7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7U0FDN0M7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDL0M7SUFDSCxDQUFDOzt5R0FwQ1UsWUFBWTs2RkFBWixZQUFZLHdDQUZaLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxpREFGdkUsRUFBRTsyRkFJRCxZQUFZO2tCQU54QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsRUFBRTtvQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUM7aUJBQ2xGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciwgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXgsIGpzZG9jL25vLXR5cGVzLCBpbXBvcnQvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FtZXJhLCBDb2xvciwgTWF0ZXJpYWwsIFNjZW5lIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgUmVuZGVyUGFzcyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9SZW5kZXJQYXNzJztcbmltcG9ydCB7IEVmZmVjdENvbXBvc2VyIH0gZnJvbSAnLi4vLi4vZ2VuZXJhdG9yL3Bhc3NfdHlwZXMnO1xuaW1wb3J0IHsgVGhQYXNzQmFzZSB9IGZyb20gJy4uLy4uL1RoUGFzc0Jhc2UnO1xuaW1wb3J0IHsgVGhWaWV3IH0gZnJvbSAnLi4vLi4vVGhWaWV3JztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuLi9UaE9iamVjdDNEJztcbmltcG9ydCB7IFRoUmVuZGVyUGFzc0dlbiB9IGZyb20gJy4uL1RoUmVuZGVyUGFzc0dlbic7XG5pbXBvcnQgeyBUaEVmZmVjdENvbXBvc2VyIH0gZnJvbSAnLi9UaEVmZmVjdENvbXBvc2VyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtcmVuZGVyUGFzcycsXG4gIHRlbXBsYXRlOiAnJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVGhQYXNzQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhSZW5kZXJQYXNzKSB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaFJlbmRlclBhc3M8XG4gICAgVCBleHRlbmRzIFJlbmRlclBhc3MgPSBSZW5kZXJQYXNzLFxuICAgIFRBUkdTIGV4dGVuZHMgYW55W10gPSBbc2NlbmU6IFNjZW5lLCBjYW1lcmE6IENhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbD86IE1hdGVyaWFsLCBjbGVhckNvbG9yPzogQ29sb3IsIGNsZWFyQWxwaGE/OiBudW1iZXJdXG4gID5cbiAgZXh0ZW5kcyBUaFJlbmRlclBhc3NHZW48VCwgVEFSR1M+XG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlZmZlY3RDb21wb3NlcjogVGhFZmZlY3RDb21wb3NlciwgcHJpdmF0ZSB2aWV3OiBUaFZpZXcpIHtcbiAgICBzdXBlcihlZmZlY3RDb21wb3Nlcik7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlVGhyZWVJbnN0YW5jZShhcmdzPzogVEFSR1MpOiBSZW5kZXJQYXNzIHtcbiAgICBpZiAoIWFyZ3MpIHtcbiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkoNSkgYXMgVEFSR1M7XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGFyZ3NbMF0gPz8gdGhpcy52aWV3LnNjZW5lO1xuICAgIGFyZ3NbMV0gPSBhcmdzWzFdID8/IHRoaXMudmlldy5jYW1lcmE7XG4gICAgYXJnc1syXSA9IGFyZ3NbMl0gPz8gdGhpcy5vdmVycmlkZU1hdGVyaWFsO1xuICAgIGFyZ3NbM10gPSBhcmdzWzNdID8/IHRoaXMuY2xlYXJDb2xvcjtcbiAgICBhcmdzWzRdID0gYXJnc1s0XSA/PyB0aGlzLmNsZWFyQWxwaGE7XG5cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlVGhyZWVJbnN0YW5jZShhcmdzKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWV3LnNjZW5lICYmIHRoaXMudmlldy5zY2VuZS5vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5zY2VuZSA9IHRoaXMudmlldy5zY2VuZS5vYmpSZWY7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmlldy5jYW1lcmEgJiYgdGhpcy52aWV3LmNhbWVyYS5vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5jYW1lcmEgPSB0aGlzLnZpZXcuY2FtZXJhLm9ialJlZjtcbiAgICB9XG4gIH1cbn1cbiJdfQ==