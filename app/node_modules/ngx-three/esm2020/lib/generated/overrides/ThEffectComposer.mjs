/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Vector4, WebGLRenderTarget } from 'three';
import { ThEffectComposerGen } from '../ThEffectComposerGen';
import * as i0 from "@angular/core";
import * as i1 from "../../ThView";
import * as i2 from "../../ThEngine.service";
export class ThEffectComposer extends ThEffectComposerGen {
    constructor(view, engineService) {
        super();
        this.view = view;
        this.engineService = engineService;
    }
    createThreeInstance(args) {
        if (!args) {
            args = new Array(5);
        }
        args[0] = args[0] ?? this.engineService.renderer;
        args[1] = args[1] ?? this.initRenderTarget();
        return super.createThreeInstance(args);
    }
    initRenderTarget() {
        if (!this.view.viewPort) {
            return;
        }
        else {
            let width;
            let height;
            if (this.view.viewPort instanceof Vector4) {
                width = this.view.viewPort.z;
                height = this.view.viewPort?.width;
            }
            else {
                width = this.view.viewPort.width;
                height = this.view.viewPort.height;
            }
            return new WebGLRenderTarget(width, height);
        }
    }
    addToParent() {
        if (this._objRef) {
            this.view.effectComposer = this._objRef;
        }
    }
    removeFromParent() {
        this.view.effectComposer = undefined;
    }
}
ThEffectComposer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEffectComposer, deps: [{ token: i1.ThView }, { token: i2.ThEngineService }], target: i0.ɵɵFactoryTarget.Component });
ThEffectComposer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThEffectComposer, selector: "th-effectComposer", providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEffectComposer, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-effectComposer',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: i1.ThView }, { type: i2.ThEngineService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhFZmZlY3RDb21wb3Nlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9vdmVycmlkZXMvVGhFZmZlY3RDb21wb3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBaUIsT0FBTyxFQUFpQixpQkFBaUIsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUlqRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQVE3RCxNQUFNLE9BQU8sZ0JBR1gsU0FBUSxtQkFBNkI7SUFDckMsWUFBc0IsSUFBWSxFQUFZLGFBQThCO1FBQzFFLEtBQUssRUFBRSxDQUFDO1FBRFksU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFZLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtJQUU1RSxDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBVSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNqRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRTdDLE9BQU8sS0FBSyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLE9BQU87U0FDUjthQUFNO1lBQ0wsSUFBSSxLQUFhLENBQUM7WUFDbEIsSUFBSSxNQUFjLENBQUM7WUFDbkIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsWUFBWSxPQUFPLEVBQUU7Z0JBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7YUFDcEM7aUJBQU07Z0JBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFDakMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUNwQztZQUNELE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN6QztJQUNILENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO0lBQ3ZDLENBQUM7OzZHQTVDVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQiw0Q0FGaEIsRUFBRSxpREFGSCxFQUFFOzJGQUlELGdCQUFnQjtrQkFONUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsRUFBRTtvQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLEVBQUU7aUJBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVbmlmb3Jtc1V0aWxzLCBWZWN0b3I0LCBXZWJHTFJlbmRlcmVyLCBXZWJHTFJlbmRlclRhcmdldCB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IEVmZmVjdENvbXBvc2VyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3Bvc3Rwcm9jZXNzaW5nL0VmZmVjdENvbXBvc2VyJztcbmltcG9ydCB7IFRoRW5naW5lU2VydmljZSB9IGZyb20gJy4uLy4uL1RoRW5naW5lLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGhWaWV3IH0gZnJvbSAnLi4vLi4vVGhWaWV3JztcbmltcG9ydCB7IFRoRWZmZWN0Q29tcG9zZXJHZW4gfSBmcm9tICcuLi9UaEVmZmVjdENvbXBvc2VyR2VuJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtZWZmZWN0Q29tcG9zZXInLFxuICB0ZW1wbGF0ZTogJycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFRoRWZmZWN0Q29tcG9zZXI8XG4gIFQgZXh0ZW5kcyBFZmZlY3RDb21wb3NlciA9IEVmZmVjdENvbXBvc2VyLFxuICBUQVJHUyBleHRlbmRzIGFueVtdID0gW3JlbmRlcmVyOiBXZWJHTFJlbmRlcmVyLCByZW5kZXJUYXJnZXQ/OiBXZWJHTFJlbmRlclRhcmdldF1cbj4gZXh0ZW5kcyBUaEVmZmVjdENvbXBvc2VyR2VuPFQsIFRBUkdTPiB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBUaFZpZXcsIHByb3RlY3RlZCBlbmdpbmVTZXJ2aWNlOiBUaEVuZ2luZVNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVRocmVlSW5zdGFuY2UoYXJncz86IFRBUkdTKTogRWZmZWN0Q29tcG9zZXIge1xuICAgIGlmICghYXJncykge1xuICAgICAgYXJncyA9IG5ldyBBcnJheSg1KSBhcyBUQVJHUztcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gYXJnc1swXSA/PyB0aGlzLmVuZ2luZVNlcnZpY2UucmVuZGVyZXI7XG4gICAgYXJnc1sxXSA9IGFyZ3NbMV0gPz8gdGhpcy5pbml0UmVuZGVyVGFyZ2V0KCk7XG5cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlVGhyZWVJbnN0YW5jZShhcmdzKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFJlbmRlclRhcmdldCgpIHtcbiAgICBpZiAoIXRoaXMudmlldy52aWV3UG9ydCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcbiAgICAgIGlmICh0aGlzLnZpZXcudmlld1BvcnQgaW5zdGFuY2VvZiBWZWN0b3I0KSB7XG4gICAgICAgIHdpZHRoID0gdGhpcy52aWV3LnZpZXdQb3J0Lno7XG4gICAgICAgIGhlaWdodCA9IHRoaXMudmlldy52aWV3UG9ydD8ud2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aCA9IHRoaXMudmlldy52aWV3UG9ydC53aWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gdGhpcy52aWV3LnZpZXdQb3J0LmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgV2ViR0xSZW5kZXJUYXJnZXQod2lkdGgsIGhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFkZFRvUGFyZW50KCkge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMudmlldy5lZmZlY3RDb21wb3NlciA9IHRoaXMuX29ialJlZjtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlRnJvbVBhcmVudCgpIHtcbiAgICB0aGlzLnZpZXcuZWZmZWN0Q29tcG9zZXIgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==