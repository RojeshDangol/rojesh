/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { Audio } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThAudio extends ThObject3D {
    getType() {
        return Audio;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set listener(value) {
        if (this._objRef) {
            this._objRef.listener = value;
        }
    }
    set context(value) {
        if (this._objRef) {
            this._objRef.context = value;
        }
    }
    set gain(value) {
        if (this._objRef) {
            this._objRef.gain = value;
        }
    }
    set autoplay(value) {
        if (this._objRef) {
            this._objRef.autoplay = value;
        }
    }
    set buffer(value) {
        if (this._objRef) {
            this._objRef.buffer = value;
        }
    }
    set detune(value) {
        if (this._objRef) {
            this._objRef.detune = value;
        }
    }
    set loop(value) {
        if (this._objRef) {
            this._objRef.loop = value;
        }
    }
    set loopStart(value) {
        if (this._objRef) {
            this._objRef.loopStart = value;
        }
    }
    set loopEnd(value) {
        if (this._objRef) {
            this._objRef.loopEnd = value;
        }
    }
    set offset(value) {
        if (this._objRef) {
            this._objRef.offset = value;
        }
    }
    set duration(value) {
        if (this._objRef) {
            this._objRef.duration = value;
        }
    }
    set playbackRate(value) {
        if (this._objRef) {
            this._objRef.playbackRate = value;
        }
    }
    set isPlaying(value) {
        if (this._objRef) {
            this._objRef.isPlaying = value;
        }
    }
    set hasPlaybackControl(value) {
        if (this._objRef) {
            this._objRef.hasPlaybackControl = value;
        }
    }
    set sourceType(value) {
        if (this._objRef) {
            this._objRef.sourceType = value;
        }
    }
    set source(value) {
        if (this._objRef) {
            this._objRef.source = value;
        }
    }
    set filters(value) {
        if (this._objRef) {
            this._objRef.filters = value;
        }
    }
}
ThAudio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAudio, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAudio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAudio, selector: "th-audio", inputs: { type: "type", listener: "listener", context: "context", gain: "gain", autoplay: "autoplay", buffer: "buffer", detune: "detune", loop: "loop", loopStart: "loopStart", loopEnd: "loopEnd", offset: "offset", duration: "duration", playbackRate: "playbackRate", isPlaying: "isPlaying", hasPlaybackControl: "hasPlaybackControl", sourceType: "sourceType", source: "source", filters: "filters" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThAudio) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAudio, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-audio',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThAudio) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], listener: [{
                type: Input
            }], context: [{
                type: Input
            }], gain: [{
                type: Input
            }], autoplay: [{
                type: Input
            }], buffer: [{
                type: Input
            }], detune: [{
                type: Input
            }], loop: [{
                type: Input
            }], loopStart: [{
                type: Input
            }], loopEnd: [{
                type: Input
            }], offset: [{
                type: Input
            }], duration: [{
                type: Input
            }], playbackRate: [{
                type: Input
            }], isPlaying: [{
                type: Input
            }], hasPlaybackControl: [{
                type: Input
            }], sourceType: [{
                type: Input
            }], source: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,