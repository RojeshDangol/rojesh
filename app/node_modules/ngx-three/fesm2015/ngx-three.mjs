import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, ChangeDetectionStrategy, SkipSelf, Injectable, Directive, Host, forwardRef, ContentChild, Optional, Inject, ContentChildren, ViewChild, NgModule, Pipe } from '@angular/core';
import * as THREE from 'three';
import { Object3D, Camera, Scene, Vector4, WebGLRenderTarget, Light, AmbientLight, LightProbe, AmbientLightProbe, PerspectiveCamera, ArrayCamera, ArrowHelper, Audio, AudioListener, Line, LineSegments, AxesHelper, Bone, Box3Helper, BufferGeometry, BoxGeometry, BoxHelper, CameraHelper, CircleGeometry, CylinderGeometry, ConeGeometry, CubeCamera, DirectionalLight, DirectionalLightHelper, PolyhedronGeometry, DodecahedronGeometry, EdgesGeometry, ExtrudeGeometry, GridHelper, Group, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronGeometry, InstancedBufferGeometry, Mesh, InstancedMesh, LatheGeometry, Material, LineBasicMaterial, LineDashedMaterial, LineLoop, LOD, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, MeshPhysicalMaterial, MeshToonMaterial, OctahedronGeometry, OrthographicCamera, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PositionalAudio, ShaderMaterial, RawShaderMaterial, RectAreaLight, RingGeometry, ShadowMaterial, ShapeGeometry, SkeletonHelper, SkinnedMesh, SphereGeometry, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, StereoCamera, TetrahedronGeometry, TorusGeometry, TorusKnotGeometry, TubeGeometry, WireframeGeometry, Color, Vector2, Vector3 } from 'three';
import { ReplaySubject } from 'rxjs';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { Pass } from 'three/examples/jsm/postprocessing/Pass';
import { AdaptiveToneMappingPass } from 'three/examples/jsm/postprocessing/AdaptiveToneMappingPass';
import { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass';
import { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';
import { BokehPass } from 'three/examples/jsm/postprocessing/BokehPass';
import { BoxLineGeometry } from 'three/examples/jsm/geometries/BoxLineGeometry';
import { ClearMaskPass, MaskPass } from 'three/examples/jsm/postprocessing/MaskPass';
import { ClearPass } from 'three/examples/jsm/postprocessing/ClearPass';
import { ConvexGeometry } from 'three/examples/jsm/geometries/ConvexGeometry';
import { CubeTexturePass } from 'three/examples/jsm/postprocessing/CubeTexturePass';
import { DecalGeometry } from 'three/examples/jsm/geometries/DecalGeometry';
import { DotScreenPass } from 'three/examples/jsm/postprocessing/DotScreenPass';
import { DragControls } from 'three/examples/jsm/controls/DragControls';
import { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';
import { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls';
import { FlyControls } from 'three/examples/jsm/controls/FlyControls';
import { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass';
import { HalftonePass } from 'three/examples/jsm/postprocessing/HalftonePass';
import { LUTPass } from 'three/examples/jsm/postprocessing/LUTPass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { OrbitControls, MapControls } from 'three/examples/jsm/controls/OrbitControls';
import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';
import { ParametricGeometry } from 'three/examples/jsm/geometries/ParametricGeometry';
import { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls';
import { RoundedBoxGeometry } from 'three/examples/jsm/geometries/RoundedBoxGeometry';
import { SAOPass } from 'three/examples/jsm/postprocessing/SAOPass';
import { SavePass } from 'three/examples/jsm/postprocessing/SavePass';
import { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass';
import { SSAARenderPass } from 'three/examples/jsm/postprocessing/SSAARenderPass';
import { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass';
import { SSRPass } from 'three/examples/jsm/postprocessing/SSRPass';
import { SSRrPass } from 'three/examples/jsm/postprocessing/SSRrPass';
import { TAARenderPass } from 'three/examples/jsm/postprocessing/TAARenderPass';
import { TeapotGeometry } from 'three/examples/jsm/geometries/TeapotGeometry';
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';
import { TexturePass } from 'three/examples/jsm/postprocessing/TexturePass';
import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';
import { TransformControls } from 'three/examples/jsm/controls/TransformControls';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { __awaiter } from 'tslib';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import Stats from 'three/examples/jsm/libs/stats.module';

function isSettable(obj) {
    return !!(obj && obj.set); // && obj.copy;
}
/**
 * tries to apply the new value to the target.
 * if the new value is 'setter arguments' then it uses set on the target.
 * else it tries to use the 'copy' method of the target if available
 * else it return the newValue as new target
 * if newValue is undefined the old target is returned
 *
 * @param target the target for the new value
 * @param newValue the value to be set
 * @returns the new target(value)
 */
function applyValue(target, newValue) {
    if (isSettable(target)) {
        if (newValue === undefined) {
            return target;
        }
        if (Array.isArray(newValue)) {
            target.set(...newValue);
            return target;
        }
        if (target.copy && newValue) {
            target.copy(newValue);
            return target;
        }
        // just set the value
        if (newValue !== undefined) {
            target.set(newValue);
            return target;
        }
    }
    else {
        // apply the value
        return newValue;
    }
    // nothing to do
    return target;
}
function isDisposable(obj) {
    if (obj && typeof obj.dispose === 'function') {
        return true;
    }
    return false;
}

class Object3DProxyHandler {
    constructor() {
        this.memberMap = new Map();
        this.children = [];
        this.eventListener = {};
        this.add = (...object) => {
            if (this.objRef) {
                this.objRef.add(...object);
            }
            this.children.push(...object);
            return this;
        };
        this.remove = (...object) => {
            if (this.objRef) {
                this.objRef.remove(...object);
            }
            for (const obj of object) {
                const index = this.children.indexOf(obj);
                if (index >= 0) {
                    this.children = this.children.splice(index, 1);
                }
            }
            return this;
        };
        this.applyToObject3D = (objRef) => {
            var _a, _b;
            this.memberMap.forEach((value, key) => {
                const member = objRef[key];
                if (isSettable(member)) {
                    applyValue(member, value);
                }
                else {
                    objRef[key] = value;
                }
            });
            this.children.forEach((child) => objRef.add(child));
            if ((_a = this.objRef) === null || _a === void 0 ? void 0 : _a.parent) {
                const parent = (_b = this.objRef) === null || _b === void 0 ? void 0 : _b.parent;
                parent.remove(this.objRef);
                parent.add(objRef);
            }
        };
        /**
         * Adds a listener to an event type.
         *
         * @param type The type of event to listen to.
         * @param listener The function that gets called when the event is fired.
         */
        this.addEventListener = (type, listener) => {
            let arr = this.eventListener[type];
            if (!arr) {
                arr = [];
                this.eventListener[type] = arr;
            }
            arr.push(listener);
            if (this.objRef) {
                this.objRef.addEventListener(type, listener);
            }
        };
        /**
         * Removes a listener from an event type.
         *
         * @param type The type of the listener that gets removed.
         * @param listener The listener function that gets removed.
         */
        this.removeEventListener = (type, listener) => {
            const arr = this.eventListener[type];
            if (!arr) {
                return;
            }
            const index = arr.indexOf(listener);
            if (index >= 0) {
                arr.splice(index, 1);
            }
        };
    }
    get(target, p, receiver) {
        switch (p) {
            case '__isProxy':
                return true;
            case 'applyToObject3D':
                return this.applyToObject3D;
            case 'objRef':
                return this.objRef;
            case 'add':
                return this.add;
            case 'remove':
                return this.remove;
            case 'children':
                return this.objRef ? this.objRef.children : this.children;
            default: {
                const objKey = p;
                let value = this.objRef ? this.objRef[objKey] : this.memberMap.get(objKey);
                if (value === undefined) {
                    value = target[objKey];
                    if (value !== undefined) {
                        // this is necessary for complex members
                        // (returned by reference, they might be altered, we have to reapply them to the real object )
                        this.memberMap.set(objKey, value);
                    }
                }
                return value !== null && value !== void 0 ? value : target[objKey];
            }
        }
    }
    set(target, p, value, receiver) {
        if (p === 'objRef') {
            if (value) {
                this.applyToObject3D(value);
            }
            this.objRef = value;
        }
        else {
            // store to the member map
            this.memberMap.set(p, value);
            if (this.objRef) {
                // and apply to the real object if present
                this.objRef[p] = value;
            }
        }
        return true;
    }
}
function createLazyObject3DProxy() {
    return new Proxy(new Object3D(), new Object3DProxyHandler());
}
function isLazyObject3dProxy(object) {
    // eslint-disable-next-line no-underscore-dangle
    return object.__isProxy === true && object.objRef === undefined;
}

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThWrapperBase {
    constructor() {
        this.autoAddToParent = true;
        this.autoDispose = true;
        // nothing to do
    }
    set objRef(ref) {
        this.applyObjRef(ref);
    }
    get objRef() {
        return this._objRef;
    }
    addToParent() {
        // nothing to do, implement it in a derived class
    }
    removeFromParent() {
        // nothing to do, implement it in a derived class
    }
    get onUpdate() {
        if (!this.updateEmitter) {
            this.updateEmitter = new EventEmitter();
        }
        return this.updateEmitter;
    }
    /**
     * emits the last assigned object ref
     */
    get objRef$() {
        if (!this._objRef$) {
            this._objRef$ = new ReplaySubject(1);
        }
        return this._objRef$;
    }
    ngOnInit() {
        if (!this.objRef) {
            this.objRef = this.createThreeInstance(this.args);
        }
    }
    // Override this
    getType() {
        throw new Error('derive me');
    }
    createThreeInstance(args) {
        if (Array.isArray(args)) {
            return new (this.getType())(...args);
        }
        else {
            return new (this.getType())(args);
        }
    }
    ngOnChanges(changes) {
        var _a, _b, _c;
        // console.log('on changes');
        if (this.objRef && !isLazyObject3dProxy(this.objRef)) {
            // the object is already set and it is no proxy
            // emit the changes
            this.emitPropertyChanges(changes);
            // TODO: request animation frame
            return;
        }
        if ((_a = changes.objRef) === null || _a === void 0 ? void 0 : _a.currentValue) {
            this.objRef = (_b = changes.objRef) === null || _b === void 0 ? void 0 : _b.currentValue;
        }
        else if (!this.objRef) {
            this.objRef = this.createThreeInstance((_c = changes.args) === null || _c === void 0 ? void 0 : _c.currentValue);
        }
        // eslint-disable-next-line guard-for-in
        for (const key in changes) {
            this[key] = changes[key].currentValue;
        }
        this.emitPropertyChanges(changes);
    }
    disposeObjRef() {
        if (isDisposable(this.objRef)) {
            this.objRef.dispose();
        }
    }
    ngOnDestroy() {
        this.removeFromParent();
        if (this.autoDispose) {
            this.disposeObjRef();
        }
    }
    applyObjRef(objRef) {
        if (this._objRef === objRef) {
            return;
        }
        this.removeFromParent();
        this._objRef = objRef;
        if (this.autoAddToParent) {
            this.addToParent();
        }
        this.emitObjRefChange();
    }
    emitObjRefChange() {
        var _a, _b;
        // TODO only emit change if _objRef is no proxy,
        // and/or trigger emit over objRef event emitter
        if (this._objRef && !isLazyObject3dProxy(this._objRef)) {
            (_b = (_a = this._objRef).dispatchEvent) === null || _b === void 0 ? void 0 : _b.call(_a, { type: 'loaded', object: this._objRef });
            if (this._objRef$) {
                this._objRef$.next(this._objRef);
            }
        }
    }
    emitPropertyChanges(changes) {
        var _a, _b;
        (_b = (_a = this.objRef).dispatchEvent) === null || _b === void 0 ? void 0 : _b.call(_a, { type: 'changes', changes });
        if (this.updateEmitter) {
            this.updateEmitter.next(changes);
        }
    }
}
ThWrapperBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThWrapperBase, deps: [], target: i0.ɵɵFactoryTarget.Component });
ThWrapperBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThWrapperBase, selector: "th-abs-wrapper", inputs: { autoAddToParent: "autoAddToParent", autoDispose: "autoDispose", objRef: "objRef", args: "args" }, outputs: { onUpdate: "onUpdate", objRef$: "objRef$" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThWrapperBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-wrapper',
                    template: ''
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { autoAddToParent: [{
                type: Input
            }], autoDispose: [{
                type: Input
            }], objRef: [{
                type: Input
            }], args: [{
                type: Input
            }], onUpdate: [{
                type: Output
            }], objRef$: [{
                type: Output
            }] } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThObjectBase extends ThWrapperBase {
    constructor(parent) {
        super();
        this.parent = parent;
    }
    addToParent() {
        if (this._objRef && this._objRef.parent && this._objRef.parent.uuid !== this.parent.objRef.uuid) {
            this.parent.objRef.add(this._objRef);
        }
    }
    removeFromParent() {
        var _a, _b;
        (_b = (_a = this._objRef) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.remove(this._objRef);
    }
    applyObjRef(objRef) {
        this.attachToParent(objRef, this._objRef);
        this._objRef = objRef;
        this.emitObjRefChange();
    }
    attachToParent(newRef, oldRef) {
        var _a;
        if (!this.parent.objRef || (newRef === oldRef && ((_a = oldRef === null || oldRef === void 0 ? void 0 : oldRef.parent) === null || _a === void 0 ? void 0 : _a.uuid) === this.parent.objRef.uuid)) {
            return;
        }
        // remove old obj from parent
        if (oldRef && oldRef.parent) {
            oldRef.parent.remove(oldRef);
        }
        // add new obj to parent
        if (newRef && (!newRef.parent || (newRef.parent && newRef.parent.uuid !== this.parent.objRef.uuid))) {
            this.parent.objRef.add(newRef);
        }
    }
    // object 3d methods
    set lookAt(vector) {
        Promise.resolve().then(() => {
            // execute next microtick, to assume all
            // position changes already happend,
            // because lookAt triggers a world matrix calculation
            if (!this.objRef) {
                return;
            }
            if (Array.isArray(vector)) {
                this.objRef.lookAt(...vector);
            }
            else {
                this.objRef.lookAt(vector);
            }
        });
    }
}
ThObjectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObjectBase, deps: [{ token: ThObjectBase }], target: i0.ɵɵFactoryTarget.Component });
ThObjectBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThObjectBase, selector: "th-abs-object", inputs: { lookAt: "lookAt" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObjectBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-object',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: ThObjectBase }]; }, propDecorators: { lookAt: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThObject3D extends ThObjectBase {
    constructor(parent) {
        super(parent);
    }
    getType() {
        return Object3D;
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set children(value) {
        if (this._objRef) {
            this._objRef.children = value;
        }
    }
    set up(value) {
        if (this._objRef) {
            this._objRef.up = applyValue(this._objRef.up, value);
        }
    }
    set position(value) {
        if (this._objRef) {
            applyValue(this._objRef.position, value);
        }
    }
    set rotation(value) {
        if (this._objRef) {
            applyValue(this._objRef.rotation, value);
        }
    }
    set quaternion(value) {
        if (this._objRef) {
            applyValue(this._objRef.quaternion, value);
        }
    }
    set scale(value) {
        if (this._objRef) {
            applyValue(this._objRef.scale, value);
        }
    }
    set modelViewMatrix(value) {
        if (this._objRef) {
            applyValue(this._objRef.modelViewMatrix, value);
        }
    }
    set normalMatrix(value) {
        if (this._objRef) {
            applyValue(this._objRef.normalMatrix, value);
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixWorld(value) {
        if (this._objRef) {
            this._objRef.matrixWorld = applyValue(this._objRef.matrixWorld, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    set matrixWorldNeedsUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixWorldNeedsUpdate = value;
        }
    }
    set layers(value) {
        if (this._objRef) {
            this._objRef.layers = applyValue(this._objRef.layers, value);
        }
    }
    set visible(value) {
        if (this._objRef) {
            this._objRef.visible = value;
        }
    }
    set castShadow(value) {
        if (this._objRef) {
            this._objRef.castShadow = value;
        }
    }
    set receiveShadow(value) {
        if (this._objRef) {
            this._objRef.receiveShadow = value;
        }
    }
    set frustumCulled(value) {
        if (this._objRef) {
            this._objRef.frustumCulled = value;
        }
    }
    set renderOrder(value) {
        if (this._objRef) {
            this._objRef.renderOrder = value;
        }
    }
    set animations(value) {
        if (this._objRef) {
            this._objRef.animations = value;
        }
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    set customDepthMaterial(value) {
        if (this._objRef) {
            this._objRef.customDepthMaterial = value;
        }
    }
    set customDistanceMaterial(value) {
        if (this._objRef) {
            this._objRef.customDistanceMaterial = value;
        }
    }
    set onBeforeRender(value) {
        if (this._objRef) {
            this._objRef.onBeforeRender = value;
        }
    }
    set onAfterRender(value) {
        if (this._objRef) {
            this._objRef.onAfterRender = value;
        }
    }
}
ThObject3D.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObject3D, deps: [{ token: ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThObject3D.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThObject3D, selector: "th-object3D", inputs: { id: "id", uuid: "uuid", name: "name", type: "type", children: "children", up: "up", position: "position", rotation: "rotation", quaternion: "quaternion", scale: "scale", modelViewMatrix: "modelViewMatrix", normalMatrix: "normalMatrix", matrix: "matrix", matrixWorld: "matrixWorld", matrixAutoUpdate: "matrixAutoUpdate", matrixWorldNeedsUpdate: "matrixWorldNeedsUpdate", layers: "layers", visible: "visible", castShadow: "castShadow", receiveShadow: "receiveShadow", frustumCulled: "frustumCulled", renderOrder: "renderOrder", animations: "animations", userData: "userData", customDepthMaterial: "customDepthMaterial", customDistanceMaterial: "customDistanceMaterial", onBeforeRender: "onBeforeRender", onAfterRender: "onAfterRender" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThObject3D, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-object3D',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], ctorParameters: function () {
        return [{ type: ThObject3D, decorators: [{
                        type: SkipSelf
                    }] }];
    }, propDecorators: { id: [{
                type: Input
            }], uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], type: [{
                type: Input
            }], children: [{
                type: Input
            }], up: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], quaternion: [{
                type: Input
            }], scale: [{
                type: Input
            }], modelViewMatrix: [{
                type: Input
            }], normalMatrix: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixWorld: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], matrixWorldNeedsUpdate: [{
                type: Input
            }], layers: [{
                type: Input
            }], visible: [{
                type: Input
            }], castShadow: [{
                type: Input
            }], receiveShadow: [{
                type: Input
            }], frustumCulled: [{
                type: Input
            }], renderOrder: [{
                type: Input
            }], animations: [{
                type: Input
            }], userData: [{
                type: Input
            }], customDepthMaterial: [{
                type: Input
            }], customDistanceMaterial: [{
                type: Input
            }], onBeforeRender: [{
                type: Input
            }], onAfterRender: [{
                type: Input
            }] } });

// eslint-disable-next-line no-shadow
var RaycasterEvent;
(function (RaycasterEvent) {
    RaycasterEvent["mouseEnter"] = "mouseEnter";
    RaycasterEvent["mouseExit"] = "mouseExit";
    RaycasterEvent["click"] = "click";
})(RaycasterEvent || (RaycasterEvent = {}));
class RaycasterService {
    constructor() {
        this.raycaster = new THREE.Raycaster();
        this.selected = null;
        this.enabled = true;
        this.groups = [];
        this.paused = false;
        this.maxClickDistance = 23;
        this.nid = RaycasterService.instanceCnt++;
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerUp = this.onPointerUp.bind(this);
    }
    ngOnDestroy() {
        this.disable();
        this.unsubscribe();
    }
    subscribe() {
        if (!this.canvas) {
            throw new Error('missing canvas');
        }
        this.canvas.addEventListener('pointermove', this.onPointerMove);
        this.canvas.addEventListener('pointerdown', this.onPointerDown);
        this.canvas.addEventListener('pointerup', this.onPointerUp);
    }
    unsubscribe() {
        if (!this.canvas) {
            throw new Error('missing canvas');
        }
        this.canvas.removeEventListener('pointermove', this.onPointerMove);
        this.canvas.removeEventListener('pointerdown', this.onPointerDown);
        this.canvas.removeEventListener('pointerup', this.onPointerUp);
    }
    enable() {
        this.enabled = true;
    }
    disable() {
        this.enabled = false;
    }
    pause() {
        this.paused = true;
    }
    resume() {
        this.paused = false;
    }
    get isEnabled() {
        return this.enabled;
    }
    init(camera, canvas) {
        // console.log('Add camera to raycaster', camera);
        this.camera = camera;
        this.canvas = canvas;
        this.subscribe();
    }
    addEventTarget(target) {
        // console.log('RaycasterService.addGroup', group.name, group);
        this.groups.push(target);
    }
    removeEventTarget(target) {
        const index = this.groups.indexOf(target);
        if (index >= 0) {
            this.groups.splice(index, 1);
        }
    }
    onPointerMove(event /*MouseEvent  & { layerX: number, layerY: number}*/) {
        var _a, _b;
        if (!this.isReady()) {
            return;
        }
        const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (!this.selected || this.selected !== i.target) {
            if (this.selected) {
                (_a = this.selected.host.objRef) === null || _a === void 0 ? void 0 : _a.dispatchEvent({
                    type: RaycasterEvent.mouseExit
                });
                this.selected.onMouseExit();
                this.selected = null;
            }
            if (i && i.target) {
                this.selected = i.target;
                const evt = {
                    type: RaycasterEvent.mouseEnter,
                    face: i.face
                };
                (_b = this.selected.host.objRef) === null || _b === void 0 ? void 0 : _b.dispatchEvent(evt);
                this.selected.onMouseEnter(evt);
            }
        }
    }
    onPointerDown(event) {
        this.maxClickDistance = event.width;
        this.pointerDownEvent = event;
    }
    onPointerUp(event) {
        const downEvent = this.pointerDownEvent;
        this.pointerDownEvent = undefined;
        if (!this.isReady() || this.calcPointerDownUpDinstance(event, downEvent) > this.maxClickDistance) {
            return;
        }
        const i = this.getFirstIntersectedGroup(event.layerX, event.layerY);
        if (i && i.target && i.target.host.objRef) {
            const evt = { type: RaycasterEvent.click, face: i.face };
            i.target.host.objRef.dispatchEvent(evt);
            i.target.onClick(evt);
        }
    }
    isReady(ignorePaused) {
        return !!(this.enabled && (ignorePaused || !this.paused) && this.camera && this.camera.objRef && this.groups && this.groups.length > 0);
    }
    calcPointerDownUpDinstance(upEvent, downEvent) {
        if (!downEvent) {
            return Number.MAX_VALUE;
        }
        const xDist = upEvent.layerX - downEvent.layerX;
        const yDist = upEvent.layerY - downEvent.layerY;
        return Math.sqrt(xDist * xDist + yDist * yDist);
    }
    getFirstIntersectedGroup(x, y) {
        if (!this.camera || !this.canvas || !this.camera.objRef) {
            return { face: null, target: null };
        }
        x = (x / this.canvas.clientWidth) * 2 - 1;
        y = -(y / this.canvas.clientHeight) * 2 + 1;
        const mouseVector = new THREE.Vector2(x, y);
        this.raycaster.setFromCamera(mouseVector, this.camera.objRef);
        let face = null;
        // loop across all groups. Try to find the group with nearest distance.
        let nearestIntersection;
        let nearestGroup;
        for (const group of this.groups) {
            const i = group.host.objRef;
            if (!i) {
                continue;
            }
            const intersection = this.raycaster.intersectObject(i, true);
            if (intersection.length > 0 && (!nearestIntersection || nearestIntersection.distance > intersection[0].distance)) {
                nearestIntersection = intersection[0];
                face = nearestIntersection.face;
                nearestGroup = group;
            }
        }
        // return the group with nearest distance
        if (nearestGroup) {
            return {
                target: nearestGroup,
                face
            };
        }
        else {
            return {
                target: null,
                face: null
            };
        }
    }
}
RaycasterService.instanceCnt = 0;
RaycasterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RaycasterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

class RaycasterEventDirective {
    constructor(host, raycasterService) {
        this.host = host;
        this.raycasterService = raycasterService;
        this.mouseEnter = new EventEmitter();
        this.mouseExit = new EventEmitter();
        /* eslint-disable @angular-eslint/no-output-native */
        this.click = new EventEmitter();
        this.onMouseEnter = this.onMouseEnter.bind(this);
        this.onMouseExit = this.onMouseExit.bind(this);
        this.onClick = this.onClick.bind(this);
    }
    ngAfterViewInit() {
        this.subscribeEvents();
    }
    subscribeEvents() {
        this.raycasterService.addEventTarget(this);
        /*
        const obj = this.host.obj;
        // TODO: addEventListener, removeEventListener for proxy
        if (this.mouseEnter.observers.length > 0) {
          obj.addEventListener(RaycasterEvent.mouseEnter, this.onMouseEnter);
        }
        if (this.mouseExit.observers.length > 0) {
          obj.addEventListener(RaycasterEvent.mouseExit, this.onMouseExit);
        }
        if (this.click.observers.length > 0) {
          obj.addEventListener(RaycasterEvent.click, this.onClick);
        }
        */
    }
    unSubscribeEvents() {
        /*
        const obj = this.host.obj;
        if (obj) {
          obj.removeEventListener(RaycasterEvent.mouseEnter, this.onMouseEnter);
          obj.removeEventListener(RaycasterEvent.mouseExit, this.onMouseExit);
          obj.removeEventListener(RaycasterEvent.click, this.onClick);
        }
        */
        this.raycasterService.removeEventTarget(this);
    }
    onMouseExit() {
        this.mouseExit.emit({
            component: this.host
        });
    }
    onMouseEnter(event) {
        // console.log('RaycasterGroupDirective.onMouseEnter', event);
        this.mouseEnter.emit({
            component: this.host,
            face: event.face
        });
    }
    onClick(event) {
        // console.log('onClick', event);
        this.click.emit({
            component: this.host,
            face: event.face
        });
    }
    ngOnDestroy() {
        this.unSubscribeEvents();
    }
}
RaycasterEventDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterEventDirective, deps: [{ token: ThObject3D, host: true }, { token: RaycasterService }], target: i0.ɵɵFactoryTarget.Directive });
RaycasterEventDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: RaycasterEventDirective, selector: "[onClick], [onMouseEnter], [onMouseExit]", outputs: { mouseEnter: "onMouseEnter", mouseExit: "onMouseExit", click: "onClick" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: RaycasterEventDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[onClick], [onMouseEnter], [onMouseExit]' }]
        }], ctorParameters: function () {
        return [{ type: ThObject3D, decorators: [{
                        type: Host
                    }] }, { type: RaycasterService }];
    }, propDecorators: { mouseEnter: [{
                type: Output,
                args: ['onMouseEnter']
            }], mouseExit: [{
                type: Output,
                args: ['onMouseExit']
            }], click: [{
                type: Output,
                args: ['onClick']
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThEffectComposerGen extends ThWrapperBase {
    getType() {
        return EffectComposer;
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    set renderTarget1(value) {
        if (this._objRef) {
            this._objRef.renderTarget1 = value;
        }
    }
    set renderTarget2(value) {
        if (this._objRef) {
            this._objRef.renderTarget2 = value;
        }
    }
    set writeBuffer(value) {
        if (this._objRef) {
            this._objRef.writeBuffer = value;
        }
    }
    set readBuffer(value) {
        if (this._objRef) {
            this._objRef.readBuffer = value;
        }
    }
    set passes(value) {
        if (this._objRef) {
            this._objRef.passes = value;
        }
    }
    set copyPass(value) {
        if (this._objRef) {
            this._objRef.copyPass = value;
        }
    }
    set clock(value) {
        if (this._objRef) {
            this._objRef.clock = value;
        }
    }
    set renderToScreen(value) {
        if (this._objRef) {
            this._objRef.renderToScreen = value;
        }
    }
}
ThEffectComposerGen.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEffectComposerGen, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThEffectComposerGen.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThEffectComposerGen, selector: "th-effectComposerGen", inputs: { renderer: "renderer", renderTarget1: "renderTarget1", renderTarget2: "renderTarget2", writeBuffer: "writeBuffer", readBuffer: "readBuffer", passes: "passes", copyPass: "copyPass", clock: "clock", renderToScreen: "renderToScreen" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEffectComposerGen, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-effectComposerGen',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], propDecorators: { renderer: [{
                type: Input
            }], renderTarget1: [{
                type: Input
            }], renderTarget2: [{
                type: Input
            }], writeBuffer: [{
                type: Input
            }], readBuffer: [{
                type: Input
            }], passes: [{
                type: Input
            }], copyPass: [{
                type: Input
            }], clock: [{
                type: Input
            }], renderToScreen: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThCamera extends ThObject3D {
    getType() {
        return Camera;
    }
    set matrixWorldInverse(value) {
        if (this._objRef) {
            this._objRef.matrixWorldInverse = applyValue(this._objRef.matrixWorldInverse, value);
        }
    }
    set projectionMatrix(value) {
        if (this._objRef) {
            this._objRef.projectionMatrix = applyValue(this._objRef.projectionMatrix, value);
        }
    }
    set projectionMatrixInverse(value) {
        if (this._objRef) {
            this._objRef.projectionMatrixInverse = applyValue(this._objRef.projectionMatrixInverse, value);
        }
    }
}
ThCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCamera, selector: "th-camera", inputs: { matrixWorldInverse: "matrixWorldInverse", projectionMatrix: "projectionMatrix", projectionMatrixInverse: "projectionMatrixInverse" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThCamera) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-camera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThCamera) }],
                }]
        }], propDecorators: { matrixWorldInverse: [{
                type: Input
            }], projectionMatrix: [{
                type: Input
            }], projectionMatrixInverse: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThScene extends ThObject3D {
    getType() {
        return Scene;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    set overrideMaterial(value) {
        if (this._objRef) {
            this._objRef.overrideMaterial = value;
        }
    }
    set autoUpdate(value) {
        if (this._objRef) {
            this._objRef.autoUpdate = value;
        }
    }
    set background(value) {
        if (this._objRef) {
            this._objRef.background = applyValue(this._objRef.background, value);
        }
    }
    set environment(value) {
        if (this._objRef) {
            this._objRef.environment = value;
        }
    }
    set onBeforeRender(value) {
        if (this._objRef) {
            this._objRef.onBeforeRender = value;
        }
    }
    set onAfterRender(value) {
        if (this._objRef) {
            this._objRef.onAfterRender = value;
        }
    }
}
ThScene.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThScene, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThScene.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThScene, selector: "th-scene", inputs: { type: "type", fog: "fog", overrideMaterial: "overrideMaterial", autoUpdate: "autoUpdate", background: "background", environment: "environment", onBeforeRender: "onBeforeRender", onAfterRender: "onAfterRender" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThScene) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThScene, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-scene',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThScene) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], fog: [{
                type: Input
            }], overrideMaterial: [{
                type: Input
            }], autoUpdate: [{
                type: Input
            }], background: [{
                type: Input
            }], environment: [{
                type: Input
            }], onBeforeRender: [{
                type: Input
            }], onAfterRender: [{
                type: Input
            }] } });

class ThEngineService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.views = [];
        this.beforeRenderEmitter = new EventEmitter();
        this.beforeRender$ = this.beforeRenderEmitter.asObservable();
    }
    get renderer() {
        return this._renderer;
    }
    ngOnDestroy() {
        if (this.frameId !== undefined) {
            cancelAnimationFrame(this.frameId);
        }
        if (this.resizeObserver && this.canvas) {
            this.resizeObserver.unobserve(this.canvas);
        }
    }
    initResizeObserver() {
        // We have to run this outside angular zones,
        // because it could trigger heavy changeDetection cycles.
        this.ngZone.runOutsideAngular(() => {
            if (!this.canvas) {
                throw new Error('missing canvas element');
            }
            if (!this.resizeObserver) {
                // @ts-ignore
                this.resizeObserver = new ResizeObserver(() => {
                    this.resize();
                });
            }
            this.resizeObserver.observe(this.canvas);
        });
    }
    initRenderer() {
        if (this._renderer) {
            return;
        }
        this._renderer = new THREE.WebGLRenderer({
            canvas: this.canvas,
            alpha: true,
            antialias: true,
            preserveDrawingBuffer: true
        });
        this.resize();
        // this.renderer.setSize(this.canvas?.width ?? 0, this.canvas?.width ?? 0);
    }
    setCanvas(canvas) {
        this.canvas = canvas;
        this.initRenderer();
        this.initResizeObserver();
    }
    addView(view) {
        this.views.push(view);
    }
    requestAnimationFrame() {
        if (this.frameId === undefined) {
            this.ngZone.runOutsideAngular(() => (this.frameId = requestAnimationFrame(() => {
                this.render();
            })));
        }
    }
    /*
    public animate(): void {
      // We have to run this outside angular zones,
      // because it could trigger heavy changeDetection cycles.
      this.ngZone.runOutsideAngular(() => {
        if (document.readyState !== 'loading') {
          this.render();
        } else {
          window.addEventListener('DOMContentLoaded', () => {
            this.render();
          });
        }
      });
    }
    */
    render() {
        this.frameId = undefined;
        // TODO: conditional rendere loop
        this.requestAnimationFrame();
        // emit before render
        this.beforeRenderEmitter.next({ engine: this });
        for (const view of this.views) {
            this.renderView(view);
        }
    }
    renderView(view) {
        if (!this._renderer) {
            return;
        }
        const camera = view.camera;
        const scene = view.scene;
        if (!camera || !scene || !camera.objRef || !scene.objRef) {
            return;
        }
        const renderer = this._renderer;
        if (view.onRender.observers.length) {
            this.ngZone.run(() => view.onRender.emit({
                renderer,
                scene,
                camera
            }));
        }
        this.applyRendererParametersFromView(view);
        if (view.effectComposer) {
            view.effectComposer.render();
        }
        else {
            this._renderer.render(scene.objRef, camera.objRef);
        }
    }
    applyRendererParametersFromView(view) {
        if (!this._renderer) {
            return;
        }
        if (view.viewPort) {
            if (view.viewPort instanceof Vector4) {
                this._renderer.setViewport(view.viewPort);
            }
            else {
                this._renderer.setViewport(view.viewPort.x, view.viewPort.y, view.viewPort.width, view.viewPort.height);
            }
        }
        if (view.scissor) {
            if (view.scissor instanceof Vector4) {
                this._renderer.setScissor(view.scissor);
            }
            else {
                this._renderer.setScissor(view.scissor.x, view.scissor.y, view.scissor.width, view.scissor.height);
            }
        }
        if (view.scissorTest !== undefined) {
            this._renderer.setScissorTest(view.scissorTest);
        }
        if (view.clearColor) {
            this._renderer.setClearColor(view.clearColor);
        }
        if (view.clearAlpha !== undefined) {
            this._renderer.setClearAlpha(view.clearAlpha);
        }
        if (view.shadow !== undefined) {
            this._renderer.shadowMap.enabled = true;
        }
    }
    resize() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!this._renderer) {
            return;
        }
        const width = (_c = (_b = (_a = this.canvas) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.clientWidth) !== null && _c !== void 0 ? _c : 0;
        const height = (_f = (_e = (_d = this.canvas) === null || _d === void 0 ? void 0 : _d.parentElement) === null || _e === void 0 ? void 0 : _e.clientHeight) !== null && _f !== void 0 ? _f : 0;
        this._renderer.setSize(width, height, false);
        for (const view of this.views) {
            if (!view.viewPort) {
                if (view.camera && view.camera.objRef.aspect) {
                    view.camera.objRef.aspect = width / height;
                    view.camera.objRef.updateProjectionMatrix();
                }
                (_g = view.effectComposer) === null || _g === void 0 ? void 0 : _g.setSize(width, height);
            }
        }
    }
}
ThEngineService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEngineService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
ThEngineService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEngineService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEngineService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThView {
    constructor(engServ, raycaster) {
        this.engServ = engServ;
        this.raycaster = raycaster;
        // -----------------------------------------------------------------------------------------------
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onRender = new EventEmitter();
    }
    set contentScene(scene) {
        if (scene) {
            this.scene = scene;
        }
    }
    set effectComposer(effectComposer) {
        this._effectComposer = effectComposer;
        this.configureEffectComposerRenderTarget();
    }
    get effectComposer() {
        return this._effectComposer;
    }
    set camera(camera) {
        this._camera = camera;
        this.initRaycaster();
    }
    get camera() {
        return this._camera;
    }
    set contentCamera(camera) {
        if (camera) {
            this.camera = camera;
        }
    }
    set viewPort(viewPort) {
        this._viewPort = viewPort;
        this.configureEffectComposerRenderTarget();
    }
    get viewPort() {
        return this._viewPort;
    }
    ngOnInit() {
        this.initRaycaster();
    }
    initRaycaster() {
        if (this.camera && this.engServ.canvas) {
            this.raycaster.init(this.camera, this.engServ.canvas);
        }
    }
    add(scene) {
        // nothing to do here
    }
    remove(scene) {
        // norhing to do
    }
    configureEffectComposerRenderTarget() {
        var _a;
        if (!this.viewPort || !this.effectComposer) {
            return;
        }
        else {
            let width;
            let height;
            if (this.viewPort instanceof Vector4) {
                width = this.viewPort.z;
                height = (_a = this.viewPort) === null || _a === void 0 ? void 0 : _a.width;
            }
            else {
                width = this.viewPort.width;
                height = this.viewPort.height;
            }
            //TODO: check if pixel ration ha
            this.effectComposer.setSize(width, height);
        }
    }
}
ThView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThView, deps: [{ token: ThEngineService }, { token: RaycasterService }], target: i0.ɵɵFactoryTarget.Component });
ThView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThView, selector: "th-view", inputs: { scene: "scene", effectComposer: "effectComposer", camera: "camera", shadow: "shadow", viewPort: "viewPort", scissor: "scissor", scissorTest: "scissorTest", clearColor: "clearColor", clearAlpha: "clearAlpha" }, outputs: { onRender: "onRender" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThView) }, RaycasterService], queries: [{ propertyName: "contentScene", first: true, predicate: ThScene, descendants: true }, { propertyName: "contentCamera", first: true, predicate: ThCamera, descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThView, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-view',
                    template: '',
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThView) }, RaycasterService]
                }]
        }], ctorParameters: function () { return [{ type: ThEngineService }, { type: RaycasterService }]; }, propDecorators: { scene: [{
                type: Input
            }], contentScene: [{
                type: ContentChild,
                args: [ThScene]
            }], effectComposer: [{
                type: Input
            }], camera: [{
                type: Input
            }], contentCamera: [{
                type: ContentChild,
                args: [ThCamera]
            }], shadow: [{
                type: Input
            }], viewPort: [{
                type: Input
            }], scissor: [{
                type: Input
            }], scissorTest: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], clearAlpha: [{
                type: Input
            }], onRender: [{
                type: Output
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThEffectComposer extends ThEffectComposerGen {
    constructor(view, engineService) {
        super();
        this.view = view;
        this.engineService = engineService;
    }
    createThreeInstance(args) {
        var _a, _b;
        if (!args) {
            args = new Array(5);
        }
        args[0] = (_a = args[0]) !== null && _a !== void 0 ? _a : this.engineService.renderer;
        args[1] = (_b = args[1]) !== null && _b !== void 0 ? _b : this.initRenderTarget();
        return super.createThreeInstance(args);
    }
    initRenderTarget() {
        var _a;
        if (!this.view.viewPort) {
            return;
        }
        else {
            let width;
            let height;
            if (this.view.viewPort instanceof Vector4) {
                width = this.view.viewPort.z;
                height = (_a = this.view.viewPort) === null || _a === void 0 ? void 0 : _a.width;
            }
            else {
                width = this.view.viewPort.width;
                height = this.view.viewPort.height;
            }
            return new WebGLRenderTarget(width, height);
        }
    }
    addToParent() {
        if (this._objRef) {
            this.view.effectComposer = this._objRef;
        }
    }
    removeFromParent() {
        this.view.effectComposer = undefined;
    }
}
ThEffectComposer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEffectComposer, deps: [{ token: ThView }, { token: ThEngineService }], target: i0.ɵɵFactoryTarget.Component });
ThEffectComposer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThEffectComposer, selector: "th-effectComposer", providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEffectComposer, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-effectComposer',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ThView }, { type: ThEngineService }]; } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThPassBase extends ThWrapperBase {
    constructor(effectComposer) {
        super();
        this.effectComposer = effectComposer;
    }
    addToParent() {
        if (this._objRef && this.effectComposer && this.effectComposer.objRef) {
            this.effectComposer.objRef.addPass(this._objRef);
        }
    }
    removeFromParent() {
        if (this._objRef && this.effectComposer && this.effectComposer.objRef) {
            this.effectComposer.objRef.removePass(this._objRef);
        }
    }
}
ThPassBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPassBase, deps: [{ token: ThEffectComposer, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ThPassBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPassBase, selector: "th-abs-control", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPassBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-control',
                    template: ''
                }]
        }], ctorParameters: function () {
        return [{ type: ThEffectComposer, decorators: [{
                        type: Optional
                    }] }];
    } });

/* eslint-disable @typescript-eslint/ban-types */
class ThPass extends ThPassBase {
    getType() {
        return Pass;
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set needsSwap(value) {
        if (this._objRef) {
            this._objRef.needsSwap = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set renderToScreen(value) {
        if (this._objRef) {
            this._objRef.renderToScreen = value;
        }
    }
}
ThPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPass, selector: "th-pass", inputs: { enabled: "enabled", needsSwap: "needsSwap", clear: "clear", renderToScreen: "renderToScreen" }, providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThPass) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-pass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThPass) }],
                }]
        }], propDecorators: { enabled: [{
                type: Input
            }], needsSwap: [{
                type: Input
            }], clear: [{
                type: Input
            }], renderToScreen: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThRenderPassGen extends ThPass {
    getType() {
        return RenderPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set overrideMaterial(value) {
        if (this._objRef) {
            this._objRef.overrideMaterial = value;
        }
    }
    set clearColor(value) {
        if (this._objRef) {
            this._objRef.clearColor = applyValue(this._objRef.clearColor, value);
        }
    }
    set clearAlpha(value) {
        if (this._objRef) {
            this._objRef.clearAlpha = value;
        }
    }
    set clearDepth(value) {
        if (this._objRef) {
            this._objRef.clearDepth = value;
        }
    }
}
ThRenderPassGen.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderPassGen, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThRenderPassGen.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRenderPassGen, selector: "th-renderPassGen", inputs: { scene: "scene", camera: "camera", overrideMaterial: "overrideMaterial", clearColor: "clearColor", clearAlpha: "clearAlpha", clearDepth: "clearDepth" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThRenderPassGen) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderPassGen, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-renderPassGen',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThRenderPassGen) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], overrideMaterial: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], clearAlpha: [{
                type: Input
            }], clearDepth: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThRenderPass extends ThRenderPassGen {
    constructor(effectComposer, view) {
        super(effectComposer);
        this.effectComposer = effectComposer;
        this.view = view;
    }
    createThreeInstance(args) {
        var _a, _b, _c, _d, _e;
        if (!args) {
            args = new Array(5);
        }
        args[0] = (_a = args[0]) !== null && _a !== void 0 ? _a : this.view.scene;
        args[1] = (_b = args[1]) !== null && _b !== void 0 ? _b : this.view.camera;
        args[2] = (_c = args[2]) !== null && _c !== void 0 ? _c : this.overrideMaterial;
        args[3] = (_d = args[3]) !== null && _d !== void 0 ? _d : this.clearColor;
        args[4] = (_e = args[4]) !== null && _e !== void 0 ? _e : this.clearAlpha;
        return super.createThreeInstance(args);
    }
    ngAfterContentChecked() {
        if (!this._objRef) {
            return;
        }
        if (this.view.scene && this.view.scene.objRef) {
            this._objRef.scene = this.view.scene.objRef;
        }
        if (this.view.camera && this.view.camera.objRef) {
            this._objRef.camera = this.view.camera.objRef;
        }
    }
}
ThRenderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderPass, deps: [{ token: ThEffectComposer }, { token: ThView }], target: i0.ɵɵFactoryTarget.Component });
ThRenderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRenderPass, selector: "th-renderPass", providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThRenderPass) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-renderPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThRenderPass) }]
                }]
        }], ctorParameters: function () { return [{ type: ThEffectComposer }, { type: ThView }]; } });

/* eslint-disable @typescript-eslint/ban-types */
class ThAdaptiveToneMappingPass extends ThPass {
    getType() {
        return AdaptiveToneMappingPass;
    }
    set adaptive(value) {
        if (this._objRef) {
            this._objRef.adaptive = value;
        }
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = value;
        }
    }
    set needsInit(value) {
        if (this._objRef) {
            this._objRef.needsInit = value;
        }
    }
    set luminanceRT(value) {
        if (this._objRef) {
            this._objRef.luminanceRT = value;
        }
    }
    set previousLuminanceRT(value) {
        if (this._objRef) {
            this._objRef.previousLuminanceRT = value;
        }
    }
    set currentLuminanceRT(value) {
        if (this._objRef) {
            this._objRef.currentLuminanceRT = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set materialLuminance(value) {
        if (this._objRef) {
            this._objRef.materialLuminance = value;
        }
    }
    set adaptLuminanceShader(value) {
        if (this._objRef) {
            this._objRef.adaptLuminanceShader = value;
        }
    }
    set materialAdaptiveLum(value) {
        if (this._objRef) {
            this._objRef.materialAdaptiveLum = value;
        }
    }
    set materialToneMap(value) {
        if (this._objRef) {
            this._objRef.materialToneMap = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThAdaptiveToneMappingPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAdaptiveToneMappingPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAdaptiveToneMappingPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAdaptiveToneMappingPass, selector: "th-adaptiveToneMappingPass", inputs: { adaptive: "adaptive", resolution: "resolution", needsInit: "needsInit", luminanceRT: "luminanceRT", previousLuminanceRT: "previousLuminanceRT", currentLuminanceRT: "currentLuminanceRT", copyUniforms: "copyUniforms", materialCopy: "materialCopy", materialLuminance: "materialLuminance", adaptLuminanceShader: "adaptLuminanceShader", materialAdaptiveLum: "materialAdaptiveLum", materialToneMap: "materialToneMap", fsQuad: "fsQuad" }, providers: [
        {
            provide: ThPassBase,
            useExisting: forwardRef(() => ThAdaptiveToneMappingPass),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAdaptiveToneMappingPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-adaptiveToneMappingPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThPassBase,
                            useExisting: forwardRef(() => ThAdaptiveToneMappingPass),
                        },
                    ],
                }]
        }], propDecorators: { adaptive: [{
                type: Input
            }], resolution: [{
                type: Input
            }], needsInit: [{
                type: Input
            }], luminanceRT: [{
                type: Input
            }], previousLuminanceRT: [{
                type: Input
            }], currentLuminanceRT: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], materialLuminance: [{
                type: Input
            }], adaptLuminanceShader: [{
                type: Input
            }], materialAdaptiveLum: [{
                type: Input
            }], materialToneMap: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThAfterimagePass extends ThPass {
    getType() {
        return AfterimagePass;
    }
    set shader(value) {
        if (this._objRef) {
            this._objRef.shader = value;
        }
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set textureComp(value) {
        if (this._objRef) {
            this._objRef.textureComp = value;
        }
    }
    set textureOld(value) {
        if (this._objRef) {
            this._objRef.textureOld = value;
        }
    }
    set shaderMaterial(value) {
        if (this._objRef) {
            this._objRef.shaderMaterial = value;
        }
    }
    set compFsQuad(value) {
        if (this._objRef) {
            this._objRef.compFsQuad = value;
        }
    }
    set copyFsQuad(value) {
        if (this._objRef) {
            this._objRef.copyFsQuad = value;
        }
    }
}
ThAfterimagePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAfterimagePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAfterimagePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAfterimagePass, selector: "th-afterimagePass", inputs: { shader: "shader", uniforms: "uniforms", textureComp: "textureComp", textureOld: "textureOld", shaderMaterial: "shaderMaterial", compFsQuad: "compFsQuad", copyFsQuad: "copyFsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThAfterimagePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAfterimagePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-afterimagePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThAfterimagePass) },
                    ],
                }]
        }], propDecorators: { shader: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], textureComp: [{
                type: Input
            }], textureOld: [{
                type: Input
            }], shaderMaterial: [{
                type: Input
            }], compFsQuad: [{
                type: Input
            }], copyFsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLight extends ThObject3D {
    getType() {
        return Light;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
    set shadow(value) {
        if (this._objRef) {
            this._objRef.shadow = value;
        }
    }
    set shadowCameraFov(value) {
        if (this._objRef) {
            this._objRef.shadowCameraFov = value;
        }
    }
    set shadowCameraLeft(value) {
        if (this._objRef) {
            this._objRef.shadowCameraLeft = value;
        }
    }
    set shadowCameraRight(value) {
        if (this._objRef) {
            this._objRef.shadowCameraRight = value;
        }
    }
    set shadowCameraTop(value) {
        if (this._objRef) {
            this._objRef.shadowCameraTop = value;
        }
    }
    set shadowCameraBottom(value) {
        if (this._objRef) {
            this._objRef.shadowCameraBottom = value;
        }
    }
    set shadowCameraNear(value) {
        if (this._objRef) {
            this._objRef.shadowCameraNear = value;
        }
    }
    set shadowCameraFar(value) {
        if (this._objRef) {
            this._objRef.shadowCameraFar = value;
        }
    }
    set shadowBias(value) {
        if (this._objRef) {
            this._objRef.shadowBias = value;
        }
    }
    set shadowMapWidth(value) {
        if (this._objRef) {
            this._objRef.shadowMapWidth = value;
        }
    }
    set shadowMapHeight(value) {
        if (this._objRef) {
            this._objRef.shadowMapHeight = value;
        }
    }
}
ThLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLight, selector: "th-light", inputs: { type: "type", color: "color", intensity: "intensity", shadow: "shadow", shadowCameraFov: "shadowCameraFov", shadowCameraLeft: "shadowCameraLeft", shadowCameraRight: "shadowCameraRight", shadowCameraTop: "shadowCameraTop", shadowCameraBottom: "shadowCameraBottom", shadowCameraNear: "shadowCameraNear", shadowCameraFar: "shadowCameraFar", shadowBias: "shadowBias", shadowMapWidth: "shadowMapWidth", shadowMapHeight: "shadowMapHeight" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLight) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-light',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLight) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], intensity: [{
                type: Input
            }], shadow: [{
                type: Input
            }], shadowCameraFov: [{
                type: Input
            }], shadowCameraLeft: [{
                type: Input
            }], shadowCameraRight: [{
                type: Input
            }], shadowCameraTop: [{
                type: Input
            }], shadowCameraBottom: [{
                type: Input
            }], shadowCameraNear: [{
                type: Input
            }], shadowCameraFar: [{
                type: Input
            }], shadowBias: [{
                type: Input
            }], shadowMapWidth: [{
                type: Input
            }], shadowMapHeight: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThAmbientLight extends ThLight {
    getType() {
        return AmbientLight;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThAmbientLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAmbientLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAmbientLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAmbientLight, selector: "th-ambientLight", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThAmbientLight) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAmbientLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-ambientLight',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThAmbientLight) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLightProbe extends ThLight {
    getType() {
        return LightProbe;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set sh(value) {
        if (this._objRef) {
            this._objRef.sh = applyValue(this._objRef.sh, value);
        }
    }
}
ThLightProbe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLightProbe, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLightProbe.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLightProbe, selector: "th-lightProbe", inputs: { type: "type", sh: "sh" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThLightProbe) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLightProbe, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lightProbe',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThLightProbe) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], sh: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThAmbientLightProbe extends ThLightProbe {
    getType() {
        return AmbientLightProbe;
    }
}
ThAmbientLightProbe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAmbientLightProbe, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAmbientLightProbe.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAmbientLightProbe, selector: "th-ambientLightProbe", providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThAmbientLightProbe) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAmbientLightProbe, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-ambientLightProbe',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThAmbientLightProbe) },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPerspectiveCamera extends ThCamera {
    getType() {
        return PerspectiveCamera;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set zoom(value) {
        if (this._objRef) {
            this._objRef.zoom = value;
        }
    }
    set fov(value) {
        if (this._objRef) {
            this._objRef.fov = value;
        }
    }
    set aspect(value) {
        if (this._objRef) {
            this._objRef.aspect = value;
        }
    }
    set near(value) {
        if (this._objRef) {
            this._objRef.near = value;
        }
    }
    set far(value) {
        if (this._objRef) {
            this._objRef.far = value;
        }
    }
    set focus(value) {
        if (this._objRef) {
            this._objRef.focus = value;
        }
    }
    set view(value) {
        if (this._objRef) {
            this._objRef.view = value;
        }
    }
    set filmGauge(value) {
        if (this._objRef) {
            this._objRef.filmGauge = value;
        }
    }
    set filmOffset(value) {
        if (this._objRef) {
            this._objRef.filmOffset = value;
        }
    }
}
ThPerspectiveCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPerspectiveCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPerspectiveCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPerspectiveCamera, selector: "th-perspectiveCamera", inputs: { type: "type", zoom: "zoom", fov: "fov", aspect: "aspect", near: "near", far: "far", focus: "focus", view: "view", filmGauge: "filmGauge", filmOffset: "filmOffset" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPerspectiveCamera) },
        { provide: ThCamera, useExisting: forwardRef(() => ThPerspectiveCamera) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPerspectiveCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-perspectiveCamera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPerspectiveCamera) },
                        { provide: ThCamera, useExisting: forwardRef(() => ThPerspectiveCamera) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], zoom: [{
                type: Input
            }], fov: [{
                type: Input
            }], aspect: [{
                type: Input
            }], near: [{
                type: Input
            }], far: [{
                type: Input
            }], focus: [{
                type: Input
            }], view: [{
                type: Input
            }], filmGauge: [{
                type: Input
            }], filmOffset: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThArrayCamera extends ThPerspectiveCamera {
    getType() {
        return ArrayCamera;
    }
    set cameras(value) {
        if (this._objRef) {
            this._objRef.cameras = value;
        }
    }
}
ThArrayCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThArrayCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThArrayCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThArrayCamera, selector: "th-arrayCamera", inputs: { cameras: "cameras" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThArrayCamera) },
        { provide: ThCamera, useExisting: forwardRef(() => ThArrayCamera) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThArrayCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-arrayCamera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThArrayCamera) },
                        { provide: ThCamera, useExisting: forwardRef(() => ThArrayCamera) },
                    ],
                }]
        }], propDecorators: { cameras: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThArrowHelper extends ThObject3D {
    getType() {
        return ArrowHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set line(value) {
        if (this._objRef) {
            this._objRef.line = value;
        }
    }
    set cone(value) {
        if (this._objRef) {
            this._objRef.cone = value;
        }
    }
}
ThArrowHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThArrowHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThArrowHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThArrowHelper, selector: "th-arrowHelper", inputs: { type: "type", line: "line", cone: "cone" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThArrowHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThArrowHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-arrowHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThArrowHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], line: [{
                type: Input
            }], cone: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThAudio extends ThObject3D {
    getType() {
        return Audio;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set listener(value) {
        if (this._objRef) {
            this._objRef.listener = value;
        }
    }
    set context(value) {
        if (this._objRef) {
            this._objRef.context = value;
        }
    }
    set gain(value) {
        if (this._objRef) {
            this._objRef.gain = value;
        }
    }
    set autoplay(value) {
        if (this._objRef) {
            this._objRef.autoplay = value;
        }
    }
    set buffer(value) {
        if (this._objRef) {
            this._objRef.buffer = value;
        }
    }
    set detune(value) {
        if (this._objRef) {
            this._objRef.detune = value;
        }
    }
    set loop(value) {
        if (this._objRef) {
            this._objRef.loop = value;
        }
    }
    set loopStart(value) {
        if (this._objRef) {
            this._objRef.loopStart = value;
        }
    }
    set loopEnd(value) {
        if (this._objRef) {
            this._objRef.loopEnd = value;
        }
    }
    set offset(value) {
        if (this._objRef) {
            this._objRef.offset = value;
        }
    }
    set duration(value) {
        if (this._objRef) {
            this._objRef.duration = value;
        }
    }
    set playbackRate(value) {
        if (this._objRef) {
            this._objRef.playbackRate = value;
        }
    }
    set isPlaying(value) {
        if (this._objRef) {
            this._objRef.isPlaying = value;
        }
    }
    set hasPlaybackControl(value) {
        if (this._objRef) {
            this._objRef.hasPlaybackControl = value;
        }
    }
    set sourceType(value) {
        if (this._objRef) {
            this._objRef.sourceType = value;
        }
    }
    set source(value) {
        if (this._objRef) {
            this._objRef.source = value;
        }
    }
    set filters(value) {
        if (this._objRef) {
            this._objRef.filters = value;
        }
    }
}
ThAudio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAudio, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAudio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAudio, selector: "th-audio", inputs: { type: "type", listener: "listener", context: "context", gain: "gain", autoplay: "autoplay", buffer: "buffer", detune: "detune", loop: "loop", loopStart: "loopStart", loopEnd: "loopEnd", offset: "offset", duration: "duration", playbackRate: "playbackRate", isPlaying: "isPlaying", hasPlaybackControl: "hasPlaybackControl", sourceType: "sourceType", source: "source", filters: "filters" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThAudio) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAudio, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-audio',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThAudio) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], listener: [{
                type: Input
            }], context: [{
                type: Input
            }], gain: [{
                type: Input
            }], autoplay: [{
                type: Input
            }], buffer: [{
                type: Input
            }], detune: [{
                type: Input
            }], loop: [{
                type: Input
            }], loopStart: [{
                type: Input
            }], loopEnd: [{
                type: Input
            }], offset: [{
                type: Input
            }], duration: [{
                type: Input
            }], playbackRate: [{
                type: Input
            }], isPlaying: [{
                type: Input
            }], hasPlaybackControl: [{
                type: Input
            }], sourceType: [{
                type: Input
            }], source: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThAudioListener extends ThObject3D {
    getType() {
        return AudioListener;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set context(value) {
        if (this._objRef) {
            this._objRef.context = value;
        }
    }
    set gain(value) {
        if (this._objRef) {
            this._objRef.gain = value;
        }
    }
    set filter(value) {
        if (this._objRef) {
            this._objRef.filter = value;
        }
    }
    set timeDelta(value) {
        if (this._objRef) {
            this._objRef.timeDelta = value;
        }
    }
}
ThAudioListener.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAudioListener, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAudioListener.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAudioListener, selector: "th-audioListener", inputs: { type: "type", context: "context", gain: "gain", filter: "filter", timeDelta: "timeDelta" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThAudioListener) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAudioListener, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-audioListener',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThAudioListener) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], context: [{
                type: Input
            }], gain: [{
                type: Input
            }], filter: [{
                type: Input
            }], timeDelta: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLine extends ThObject3D {
    getType() {
        return Line;
    }
    set geometry(value) {
        if (this._objRef) {
            this._objRef.geometry = value;
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set morphTargetInfluences(value) {
        if (this._objRef) {
            this._objRef.morphTargetInfluences = value;
        }
    }
    set morphTargetDictionary(value) {
        if (this._objRef) {
            this._objRef.morphTargetDictionary = value;
        }
    }
}
ThLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLine, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLine.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLine, selector: "th-line", inputs: { geometry: "geometry", material: "material", type: "type", morphTargetInfluences: "morphTargetInfluences", morphTargetDictionary: "morphTargetDictionary" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLine) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLine, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-line',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLine) }],
                }]
        }], propDecorators: { geometry: [{
                type: Input
            }], material: [{
                type: Input
            }], type: [{
                type: Input
            }], morphTargetInfluences: [{
                type: Input
            }], morphTargetDictionary: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLineSegments extends ThLine {
    getType() {
        return LineSegments;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThLineSegments.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineSegments, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLineSegments.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLineSegments, selector: "th-lineSegments", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThLineSegments) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineSegments, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lineSegments',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThLineSegments) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThAxesHelper extends ThLineSegments {
    getType() {
        return AxesHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThAxesHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAxesHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAxesHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThAxesHelper, selector: "th-axesHelper", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThAxesHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThAxesHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-axesHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThAxesHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThBloomPass extends ThPass {
    getType() {
        return BloomPass;
    }
    set renderTargetX(value) {
        if (this._objRef) {
            this._objRef.renderTargetX = value;
        }
    }
    set renderTargetY(value) {
        if (this._objRef) {
            this._objRef.renderTargetY = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set convolutionUniforms(value) {
        if (this._objRef) {
            this._objRef.convolutionUniforms = value;
        }
    }
    set materialConvolution(value) {
        if (this._objRef) {
            this._objRef.materialConvolution = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThBloomPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBloomPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBloomPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBloomPass, selector: "th-bloomPass", inputs: { renderTargetX: "renderTargetX", renderTargetY: "renderTargetY", copyUniforms: "copyUniforms", materialCopy: "materialCopy", convolutionUniforms: "convolutionUniforms", materialConvolution: "materialConvolution", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThBloomPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBloomPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-bloomPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThBloomPass) },
                    ],
                }]
        }], propDecorators: { renderTargetX: [{
                type: Input
            }], renderTargetY: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], convolutionUniforms: [{
                type: Input
            }], materialConvolution: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThBokehPass extends ThPass {
    getType() {
        return BokehPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set renderTargetColor(value) {
        if (this._objRef) {
            this._objRef.renderTargetColor = value;
        }
    }
    set renderTargetDepth(value) {
        if (this._objRef) {
            this._objRef.renderTargetDepth = value;
        }
    }
    set materialDepth(value) {
        if (this._objRef) {
            this._objRef.materialDepth = value;
        }
    }
    set materialBokeh(value) {
        if (this._objRef) {
            this._objRef.materialBokeh = value;
        }
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
}
ThBokehPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBokehPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBokehPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBokehPass, selector: "th-bokehPass", inputs: { scene: "scene", camera: "camera", renderTargetColor: "renderTargetColor", renderTargetDepth: "renderTargetDepth", materialDepth: "materialDepth", materialBokeh: "materialBokeh", uniforms: "uniforms", fsQuad: "fsQuad", oldClearColor: "oldClearColor" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThBokehPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBokehPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-bokehPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThBokehPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], renderTargetColor: [{
                type: Input
            }], renderTargetDepth: [{
                type: Input
            }], materialDepth: [{
                type: Input
            }], materialBokeh: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThBone extends ThObject3D {
    getType() {
        return Bone;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThBone.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBone, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBone.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBone, selector: "th-bone", inputs: { type: "type" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThBone) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBone, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-bone',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThBone) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThBox3Helper extends ThLineSegments {
    getType() {
        return Box3Helper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set box(value) {
        if (this._objRef) {
            this._objRef.box = applyValue(this._objRef.box, value);
        }
    }
}
ThBox3Helper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBox3Helper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBox3Helper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBox3Helper, selector: "th-box3Helper", inputs: { type: "type", box: "box" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThBox3Helper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBox3Helper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-box3Helper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThBox3Helper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], box: [{
                type: Input
            }] } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThGeometryBase extends ThWrapperBase {
    constructor(parent) {
        super();
        this.parent = parent;
    }
    addToParent() {
        if (!this.parent.objRef) {
            throw new Error("parent object doesn't hold a three js object instance");
        }
        this.parent.objRef.geometry = this.objRef;
        if (this.parent.objRef.updateMorphTargets) {
            this.parent.objRef.updateMorphTargets();
        }
    }
    removeFromParent() {
        if (this._objRef && this.parent && this.parent.objRef) {
            this.parent.objRef.geometry = undefined;
        }
    }
}
ThGeometryBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGeometryBase, deps: [{ token: ThObject3D }], target: i0.ɵɵFactoryTarget.Component });
ThGeometryBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThGeometryBase, selector: "th-abs-geometry", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGeometryBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-geometry',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: ThObject3D }]; } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThBufferGeometry extends ThGeometryBase {
    constructor(hostObject) {
        super(hostObject);
    }
    getType() {
        return BufferGeometry;
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set index(value) {
        if (this._objRef) {
            this._objRef.index = applyValue(this._objRef.index, value);
        }
    }
    set attributes(value) {
        if (this._objRef) {
            this._objRef.attributes = value;
        }
    }
    set morphAttributes(value) {
        if (this._objRef) {
            this._objRef.morphAttributes = value;
        }
    }
    set morphTargetsRelative(value) {
        if (this._objRef) {
            this._objRef.morphTargetsRelative = value;
        }
    }
    set groups(value) {
        if (this._objRef) {
            this._objRef.groups = value;
        }
    }
    set boundingBox(value) {
        if (this._objRef) {
            this._objRef.boundingBox = applyValue(this._objRef.boundingBox, value);
        }
    }
    set boundingSphere(value) {
        if (this._objRef) {
            this._objRef.boundingSphere = applyValue(this._objRef.boundingSphere, value);
        }
    }
    set drawRange(value) {
        if (this._objRef) {
            this._objRef.drawRange = value;
        }
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    set drawcalls(value) {
        if (this._objRef) {
            this._objRef.drawcalls = value;
        }
    }
    set offsets(value) {
        if (this._objRef) {
            this._objRef.offsets = value;
        }
    }
}
ThBufferGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBufferGeometry, deps: [{ token: ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThBufferGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBufferGeometry, selector: "th-bufferGeometry", inputs: { id: "id", uuid: "uuid", name: "name", type: "type", index: "index", attributes: "attributes", morphAttributes: "morphAttributes", morphTargetsRelative: "morphTargetsRelative", groups: "groups", boundingBox: "boundingBox", boundingSphere: "boundingSphere", drawRange: "drawRange", userData: "userData", drawcalls: "drawcalls", offsets: "offsets" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBufferGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-bufferGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], ctorParameters: function () {
        return [{ type: ThObject3D, decorators: [{
                        type: SkipSelf
                    }] }];
    }, propDecorators: { id: [{
                type: Input
            }], uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], type: [{
                type: Input
            }], index: [{
                type: Input
            }], attributes: [{
                type: Input
            }], morphAttributes: [{
                type: Input
            }], morphTargetsRelative: [{
                type: Input
            }], groups: [{
                type: Input
            }], boundingBox: [{
                type: Input
            }], boundingSphere: [{
                type: Input
            }], drawRange: [{
                type: Input
            }], userData: [{
                type: Input
            }], drawcalls: [{
                type: Input
            }], offsets: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThBoxGeometry extends ThBufferGeometry {
    getType() {
        return BoxGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThBoxGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBoxGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBoxGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBoxGeometry, selector: "th-boxGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        { provide: ThBufferGeometry, useExisting: forwardRef(() => ThBoxGeometry) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBoxGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-boxGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThBufferGeometry, useExisting: forwardRef(() => ThBoxGeometry) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThBoxHelper extends ThLineSegments {
    getType() {
        return BoxHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThBoxHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBoxHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBoxHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBoxHelper, selector: "th-boxHelper", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThBoxHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBoxHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-boxHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThBoxHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThBoxLineGeometry extends ThBufferGeometry {
    getType() {
        return BoxLineGeometry;
    }
}
ThBoxLineGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBoxLineGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThBoxLineGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThBoxLineGeometry, selector: "th-boxLineGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThBoxLineGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThBoxLineGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-boxLineGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThBoxLineGeometry),
                        },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThCameraHelper extends ThLineSegments {
    getType() {
        return CameraHelper;
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set pointMap(value) {
        if (this._objRef) {
            this._objRef.pointMap = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThCameraHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCameraHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCameraHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCameraHelper, selector: "th-cameraHelper", inputs: { camera: "camera", pointMap: "pointMap", type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThCameraHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCameraHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-cameraHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThCameraHelper) },
                    ],
                }]
        }], propDecorators: { camera: [{
                type: Input
            }], pointMap: [{
                type: Input
            }], type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThCircleGeometry extends ThBufferGeometry {
    getType() {
        return CircleGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThCircleGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCircleGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCircleGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCircleGeometry, selector: "th-circleGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThCircleGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCircleGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-circleGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThCircleGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThClearMaskPass extends ThPass {
    getType() {
        return ClearMaskPass;
    }
}
ThClearMaskPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThClearMaskPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThClearMaskPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThClearMaskPass, selector: "th-clearMaskPass", providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThClearMaskPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThClearMaskPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-clearMaskPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThClearMaskPass) },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/ban-types */
class ThClearPass extends ThPass {
    getType() {
        return ClearPass;
    }
    set clearColor(value) {
        if (this._objRef) {
            this._objRef.clearColor = value;
        }
    }
    set clearAlpha(value) {
        if (this._objRef) {
            this._objRef.clearAlpha = value;
        }
    }
}
ThClearPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThClearPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThClearPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThClearPass, selector: "th-clearPass", inputs: { clearColor: "clearColor", clearAlpha: "clearAlpha" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThClearPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThClearPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-clearPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThClearPass) },
                    ],
                }]
        }], propDecorators: { clearColor: [{
                type: Input
            }], clearAlpha: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThCylinderGeometry extends ThBufferGeometry {
    getType() {
        return CylinderGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThCylinderGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCylinderGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCylinderGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCylinderGeometry, selector: "th-cylinderGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThCylinderGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCylinderGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-cylinderGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThCylinderGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThConeGeometry extends ThCylinderGeometry {
    getType() {
        return ConeGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThConeGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThConeGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThConeGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThConeGeometry, selector: "th-coneGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThConeGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThConeGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-coneGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThConeGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThConvexGeometry extends ThBufferGeometry {
    getType() {
        return ConvexGeometry;
    }
}
ThConvexGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThConvexGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThConvexGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThConvexGeometry, selector: "th-convexGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThConvexGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThConvexGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-convexGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThConvexGeometry),
                        },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThCubeCamera extends ThObject3D {
    getType() {
        return CubeCamera;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set renderTarget(value) {
        if (this._objRef) {
            this._objRef.renderTarget = value;
        }
    }
}
ThCubeCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCubeCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCubeCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCubeCamera, selector: "th-cubeCamera", inputs: { type: "type", renderTarget: "renderTarget" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThCubeCamera) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCubeCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-cubeCamera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThCubeCamera) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], renderTarget: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThCubeTexturePass extends ThPass {
    getType() {
        return CubeTexturePass;
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set cubeShader(value) {
        if (this._objRef) {
            this._objRef.cubeShader = value;
        }
    }
    set cubeMesh(value) {
        if (this._objRef) {
            this._objRef.cubeMesh = value;
        }
    }
    set envMap(value) {
        if (this._objRef) {
            this._objRef.envMap = value;
        }
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    set cubeScene(value) {
        if (this._objRef) {
            this._objRef.cubeScene = value;
        }
    }
    set cubeCamera(value) {
        if (this._objRef) {
            this._objRef.cubeCamera = value;
        }
    }
}
ThCubeTexturePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCubeTexturePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCubeTexturePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCubeTexturePass, selector: "th-cubeTexturePass", inputs: { camera: "camera", cubeShader: "cubeShader", cubeMesh: "cubeMesh", envMap: "envMap", opacity: "opacity", cubeScene: "cubeScene", cubeCamera: "cubeCamera" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThCubeTexturePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCubeTexturePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-cubeTexturePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThCubeTexturePass) },
                    ],
                }]
        }], propDecorators: { camera: [{
                type: Input
            }], cubeShader: [{
                type: Input
            }], cubeMesh: [{
                type: Input
            }], envMap: [{
                type: Input
            }], opacity: [{
                type: Input
            }], cubeScene: [{
                type: Input
            }], cubeCamera: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThDecalGeometry extends ThBufferGeometry {
    getType() {
        return DecalGeometry;
    }
}
ThDecalGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDecalGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThDecalGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThDecalGeometry, selector: "th-decalGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThDecalGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDecalGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-decalGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThDecalGeometry),
                        },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThDirectionalLight extends ThLight {
    getType() {
        return DirectionalLight;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set position(value) {
        if (this._objRef) {
            applyValue(this._objRef.position, value);
        }
    }
    set target(value) {
        if (this._objRef) {
            this._objRef.target = value;
        }
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
    set shadow(value) {
        if (this._objRef) {
            this._objRef.shadow = value;
        }
    }
}
ThDirectionalLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDirectionalLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThDirectionalLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThDirectionalLight, selector: "th-directionalLight", inputs: { type: "type", position: "position", target: "target", intensity: "intensity", shadow: "shadow" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThDirectionalLight) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDirectionalLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-directionalLight',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThDirectionalLight) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], position: [{
                type: Input
            }], target: [{
                type: Input
            }], intensity: [{
                type: Input
            }], shadow: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThDirectionalLightHelper extends ThObject3D {
    getType() {
        return DirectionalLightHelper;
    }
    set light(value) {
        if (this._objRef) {
            this._objRef.light = value;
        }
    }
    set lightPlane(value) {
        if (this._objRef) {
            this._objRef.lightPlane = value;
        }
    }
    set targetLine(value) {
        if (this._objRef) {
            this._objRef.targetLine = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = value;
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
}
ThDirectionalLightHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDirectionalLightHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThDirectionalLightHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThDirectionalLightHelper, selector: "th-directionalLightHelper", inputs: { light: "light", lightPlane: "lightPlane", targetLine: "targetLine", color: "color", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate" }, providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThDirectionalLightHelper),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDirectionalLightHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-directionalLightHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThDirectionalLightHelper),
                        },
                    ],
                }]
        }], propDecorators: { light: [{
                type: Input
            }], lightPlane: [{
                type: Input
            }], targetLine: [{
                type: Input
            }], color: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPolyhedronGeometry extends ThBufferGeometry {
    getType() {
        return PolyhedronGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThPolyhedronGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPolyhedronGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPolyhedronGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPolyhedronGeometry, selector: "th-polyhedronGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThPolyhedronGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPolyhedronGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-polyhedronGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThPolyhedronGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThDodecahedronGeometry extends ThPolyhedronGeometry {
    getType() {
        return DodecahedronGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThDodecahedronGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDodecahedronGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThDodecahedronGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThDodecahedronGeometry, selector: "th-dodecahedronGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThDodecahedronGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDodecahedronGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-dodecahedronGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThDodecahedronGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThDotScreenPass extends ThPass {
    getType() {
        return DotScreenPass;
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThDotScreenPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDotScreenPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThDotScreenPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThDotScreenPass, selector: "th-dotScreenPass", inputs: { uniforms: "uniforms", material: "material", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThDotScreenPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDotScreenPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-dotScreenPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThDotScreenPass) },
                    ],
                }]
        }], propDecorators: { uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThCanvas extends ThView {
    constructor(engServ, raycaster) {
        super(engServ, raycaster);
        this.engServ = engServ;
        this.raycaster = raycaster;
        this.nid = ThCanvas.instanceCnt++;
        /**
         * if true does not use the ThCanvas as view
         * this is esepcially usefull if you have multiple views
         * and want to iterate over all of them with *ngFor
         * use statically (before ngOnInit is triggered)
         */
        this.disableDefaultView = false;
        console.log('canvas ' + this.nid);
    }
    get obj() {
        return this;
    }
    set views(viewList) {
        viewList.forEach((v) => this.engServ.addView(v));
    }
    set rendererCanvas(canvas) {
        if (!canvas) {
            return;
        }
        this._rendererCanvas = canvas;
        canvas.nativeElement.id += this.nid;
        this.engServ.setCanvas(canvas.nativeElement);
    }
    get rendererCanvas() {
        return this._rendererCanvas;
    }
    ngAfterViewInit() {
        this.engServ.requestAnimationFrame();
    }
    ngOnInit() {
        if (!this.rendererCanvas) {
            throw new Error('Missing Canvas');
        }
        this.engServ.setCanvas(this.rendererCanvas.nativeElement);
        super.ngOnInit();
        if (!this.disableDefaultView) {
            this.engServ.addView(this);
        }
    }
}
ThCanvas.instanceCnt = 0;
ThCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCanvas, deps: [{ token: ThEngineService }, { token: forwardRef(() => RaycasterService) }], target: i0.ɵɵFactoryTarget.Component });
ThCanvas.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThCanvas, selector: "th-canvas", inputs: { disableDefaultView: "disableDefaultView" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThCanvas) },
        ThEngineService,
        forwardRef(() => RaycasterService),
        { provide: ThView, useExisting: forwardRef(() => ThCanvas) }
    ], queries: [{ propertyName: "views", predicate: ThView }], viewQueries: [{ propertyName: "rendererCanvas", first: true, predicate: ["rendererCanvas"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: '<canvas #rendererCanvas id="rendererCanvas" style="width: 100%; height: 100%"></canvas>', isInline: true, styles: [":host{display:flex;flex:1;height:100%;line-height:0}canvas{flex:1;outline:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThCanvas, decorators: [{
            type: Component,
            args: [{ selector: 'th-canvas', template: '<canvas #rendererCanvas id="rendererCanvas" style="width: 100%; height: 100%"></canvas>', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThCanvas) },
                        ThEngineService,
                        forwardRef(() => RaycasterService),
                        { provide: ThView, useExisting: forwardRef(() => ThCanvas) }
                    ], styles: [":host{display:flex;flex:1;height:100%;line-height:0}canvas{flex:1;outline:none}\n"] }]
        }], ctorParameters: function () {
        return [{ type: ThEngineService }, { type: RaycasterService, decorators: [{
                        type: Inject,
                        args: [forwardRef(() => RaycasterService)]
                    }] }];
    }, propDecorators: { disableDefaultView: [{
                type: Input
            }], views: [{
                type: ContentChildren,
                args: [ThView]
            }], rendererCanvas: [{
                type: ViewChild,
                args: ['rendererCanvas', { static: true }]
            }] } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThControlBase extends ThWrapperBase {
    constructor(camera, canvas) {
        super();
        this.camera = camera;
        this.canvas = canvas;
    }
    createThreeInstance(args) {
        var _a, _b;
        if (!args) {
            args = [this.camera.objRef, (_b = (_a = this.canvas) === null || _a === void 0 ? void 0 : _a.rendererCanvas) === null || _b === void 0 ? void 0 : _b.nativeElement];
        }
        return super.createThreeInstance(args);
    }
}
ThControlBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThControlBase, deps: [{ token: ThObject3D }, { token: ThCanvas }], target: i0.ɵɵFactoryTarget.Component });
ThControlBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThControlBase, selector: "th-abs-control", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThControlBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-control',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: ThObject3D }, { type: ThCanvas }]; } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThDragControls extends ThControlBase {
    getType() {
        return DragControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set transformGroup(value) {
        if (this._objRef) {
            this._objRef.transformGroup = value;
        }
    }
}
ThDragControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDragControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThDragControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThDragControls, selector: "th-dragControls", inputs: { object: "object", enabled: "enabled", transformGroup: "transformGroup" }, providers: [
        { provide: ThControlBase, useExisting: forwardRef(() => ThDragControls) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThDragControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-dragControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThControlBase, useExisting: forwardRef(() => ThDragControls) },
                    ],
                }]
        }], propDecorators: { object: [{
                type: Input
            }], enabled: [{
                type: Input
            }], transformGroup: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThEdgesGeometry extends ThBufferGeometry {
    getType() {
        return EdgesGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThEdgesGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEdgesGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThEdgesGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThEdgesGeometry, selector: "th-edgesGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThEdgesGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThEdgesGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-edgesGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThEdgesGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThExtrudeGeometry extends ThBufferGeometry {
    getType() {
        return ExtrudeGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThExtrudeGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThExtrudeGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThExtrudeGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThExtrudeGeometry, selector: "th-extrudeGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThExtrudeGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThExtrudeGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-extrudeGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThExtrudeGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThFilmPass extends ThPass {
    getType() {
        return FilmPass;
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThFilmPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFilmPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThFilmPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThFilmPass, selector: "th-filmPass", inputs: { uniforms: "uniforms", material: "material", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThFilmPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFilmPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-filmPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThFilmPass) },
                    ],
                }]
        }], propDecorators: { uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThFirstPersonControls extends ThControlBase {
    getType() {
        return FirstPersonControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set movementSpeed(value) {
        if (this._objRef) {
            this._objRef.movementSpeed = value;
        }
    }
    set lookSpeed(value) {
        if (this._objRef) {
            this._objRef.lookSpeed = value;
        }
    }
    set lookVertical(value) {
        if (this._objRef) {
            this._objRef.lookVertical = value;
        }
    }
    set autoForward(value) {
        if (this._objRef) {
            this._objRef.autoForward = value;
        }
    }
    set activeLook(value) {
        if (this._objRef) {
            this._objRef.activeLook = value;
        }
    }
    set heightSpeed(value) {
        if (this._objRef) {
            this._objRef.heightSpeed = value;
        }
    }
    set heightCoef(value) {
        if (this._objRef) {
            this._objRef.heightCoef = value;
        }
    }
    set heightMin(value) {
        if (this._objRef) {
            this._objRef.heightMin = value;
        }
    }
    set heightMax(value) {
        if (this._objRef) {
            this._objRef.heightMax = value;
        }
    }
    set constrainVertical(value) {
        if (this._objRef) {
            this._objRef.constrainVertical = value;
        }
    }
    set verticalMin(value) {
        if (this._objRef) {
            this._objRef.verticalMin = value;
        }
    }
    set verticalMax(value) {
        if (this._objRef) {
            this._objRef.verticalMax = value;
        }
    }
    set mouseDragOn(value) {
        if (this._objRef) {
            this._objRef.mouseDragOn = value;
        }
    }
}
ThFirstPersonControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFirstPersonControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThFirstPersonControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThFirstPersonControls, selector: "th-firstPersonControls", inputs: { object: "object", domElement: "domElement", enabled: "enabled", movementSpeed: "movementSpeed", lookSpeed: "lookSpeed", lookVertical: "lookVertical", autoForward: "autoForward", activeLook: "activeLook", heightSpeed: "heightSpeed", heightCoef: "heightCoef", heightMin: "heightMin", heightMax: "heightMax", constrainVertical: "constrainVertical", verticalMin: "verticalMin", verticalMax: "verticalMax", mouseDragOn: "mouseDragOn" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThFirstPersonControls),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFirstPersonControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-firstPersonControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThFirstPersonControls),
                        },
                    ],
                }]
        }], propDecorators: { object: [{
                type: Input
            }], domElement: [{
                type: Input
            }], enabled: [{
                type: Input
            }], movementSpeed: [{
                type: Input
            }], lookSpeed: [{
                type: Input
            }], lookVertical: [{
                type: Input
            }], autoForward: [{
                type: Input
            }], activeLook: [{
                type: Input
            }], heightSpeed: [{
                type: Input
            }], heightCoef: [{
                type: Input
            }], heightMin: [{
                type: Input
            }], heightMax: [{
                type: Input
            }], constrainVertical: [{
                type: Input
            }], verticalMin: [{
                type: Input
            }], verticalMax: [{
                type: Input
            }], mouseDragOn: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThFlyControls extends ThControlBase {
    getType() {
        return FlyControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set movementSpeed(value) {
        if (this._objRef) {
            this._objRef.movementSpeed = value;
        }
    }
    set rollSpeed(value) {
        if (this._objRef) {
            this._objRef.rollSpeed = value;
        }
    }
    set dragToLook(value) {
        if (this._objRef) {
            this._objRef.dragToLook = value;
        }
    }
    set autoForward(value) {
        if (this._objRef) {
            this._objRef.autoForward = value;
        }
    }
}
ThFlyControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFlyControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThFlyControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThFlyControls, selector: "th-flyControls", inputs: { object: "object", domElement: "domElement", movementSpeed: "movementSpeed", rollSpeed: "rollSpeed", dragToLook: "dragToLook", autoForward: "autoForward" }, providers: [
        { provide: ThControlBase, useExisting: forwardRef(() => ThFlyControls) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThFlyControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-flyControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThControlBase, useExisting: forwardRef(() => ThFlyControls) },
                    ],
                }]
        }], propDecorators: { object: [{
                type: Input
            }], domElement: [{
                type: Input
            }], movementSpeed: [{
                type: Input
            }], rollSpeed: [{
                type: Input
            }], dragToLook: [{
                type: Input
            }], autoForward: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThGlitchPass extends ThPass {
    getType() {
        return GlitchPass;
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set goWild(value) {
        if (this._objRef) {
            this._objRef.goWild = value;
        }
    }
    set curF(value) {
        if (this._objRef) {
            this._objRef.curF = value;
        }
    }
    set randX(value) {
        if (this._objRef) {
            this._objRef.randX = value;
        }
    }
}
ThGlitchPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGlitchPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThGlitchPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThGlitchPass, selector: "th-glitchPass", inputs: { uniforms: "uniforms", material: "material", fsQuad: "fsQuad", goWild: "goWild", curF: "curF", randX: "randX" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThGlitchPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGlitchPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-glitchPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThGlitchPass) },
                    ],
                }]
        }], propDecorators: { uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], goWild: [{
                type: Input
            }], curF: [{
                type: Input
            }], randX: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThGridHelper extends ThLineSegments {
    getType() {
        return GridHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThGridHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGridHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThGridHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThGridHelper, selector: "th-gridHelper", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThGridHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGridHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-gridHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThGridHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThGroup extends ThObject3D {
    getType() {
        return Group;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThGroup, selector: "th-group", inputs: { type: "type" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThGroup) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGroup, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-group',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThGroup) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThHalftonePass extends ThPass {
    getType() {
        return HalftonePass;
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThHalftonePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHalftonePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThHalftonePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThHalftonePass, selector: "th-halftonePass", inputs: { uniforms: "uniforms", material: "material", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThHalftonePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHalftonePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-halftonePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThHalftonePass) },
                    ],
                }]
        }], propDecorators: { uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThHemisphereLight extends ThLight {
    getType() {
        return HemisphereLight;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set position(value) {
        if (this._objRef) {
            this._objRef.position = applyValue(this._objRef.position, value);
        }
    }
    set groundColor(value) {
        if (this._objRef) {
            this._objRef.groundColor = applyValue(this._objRef.groundColor, value);
        }
    }
}
ThHemisphereLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThHemisphereLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThHemisphereLight, selector: "th-hemisphereLight", inputs: { type: "type", position: "position", groundColor: "groundColor" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThHemisphereLight) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-hemisphereLight',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThHemisphereLight) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], position: [{
                type: Input
            }], groundColor: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThHemisphereLightHelper extends ThObject3D {
    getType() {
        return HemisphereLightHelper;
    }
    set light(value) {
        if (this._objRef) {
            this._objRef.light = value;
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = value;
        }
    }
}
ThHemisphereLightHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLightHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThHemisphereLightHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThHemisphereLightHelper, selector: "th-hemisphereLightHelper", inputs: { light: "light", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate", material: "material", color: "color" }, providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThHemisphereLightHelper),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLightHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-hemisphereLightHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThHemisphereLightHelper),
                        },
                    ],
                }]
        }], propDecorators: { light: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], material: [{
                type: Input
            }], color: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThHemisphereLightProbe extends ThLightProbe {
    getType() {
        return HemisphereLightProbe;
    }
}
ThHemisphereLightProbe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLightProbe, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThHemisphereLightProbe.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThHemisphereLightProbe, selector: "th-hemisphereLightProbe", providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThHemisphereLightProbe),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThHemisphereLightProbe, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-hemisphereLightProbe',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThHemisphereLightProbe),
                        },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThIcosahedronGeometry extends ThPolyhedronGeometry {
    getType() {
        return IcosahedronGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThIcosahedronGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThIcosahedronGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThIcosahedronGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThIcosahedronGeometry, selector: "th-icosahedronGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThIcosahedronGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThIcosahedronGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-icosahedronGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThIcosahedronGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThInstancedBufferGeometry extends ThBufferGeometry {
    getType() {
        return InstancedBufferGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set isInstancedBufferGeometry(value) {
        if (this._objRef) {
            this._objRef.isInstancedBufferGeometry = value;
        }
    }
    set groups(value) {
        if (this._objRef) {
            this._objRef.groups = value;
        }
    }
    set instanceCount(value) {
        if (this._objRef) {
            this._objRef.instanceCount = value;
        }
    }
}
ThInstancedBufferGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThInstancedBufferGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThInstancedBufferGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThInstancedBufferGeometry, selector: "th-instancedBufferGeometry", inputs: { type: "type", isInstancedBufferGeometry: "isInstancedBufferGeometry", groups: "groups", instanceCount: "instanceCount" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThInstancedBufferGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThInstancedBufferGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-instancedBufferGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThInstancedBufferGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], isInstancedBufferGeometry: [{
                type: Input
            }], groups: [{
                type: Input
            }], instanceCount: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMesh extends ThObject3D {
    getType() {
        return Mesh;
    }
    set geometry(value) {
        if (this._objRef) {
            this._objRef.geometry = value;
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set morphTargetInfluences(value) {
        if (this._objRef) {
            this._objRef.morphTargetInfluences = value;
        }
    }
    set morphTargetDictionary(value) {
        if (this._objRef) {
            this._objRef.morphTargetDictionary = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMesh, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMesh.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMesh, selector: "th-mesh", inputs: { geometry: "geometry", material: "material", morphTargetInfluences: "morphTargetInfluences", morphTargetDictionary: "morphTargetDictionary", type: "type" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThMesh) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMesh, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-mesh',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThMesh) }],
                }]
        }], propDecorators: { geometry: [{
                type: Input
            }], material: [{
                type: Input
            }], morphTargetInfluences: [{
                type: Input
            }], morphTargetDictionary: [{
                type: Input
            }], type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThInstancedMesh extends ThMesh {
    getType() {
        return InstancedMesh;
    }
    set count(value) {
        if (this._objRef) {
            this._objRef.count = value;
        }
    }
    set instanceColor(value) {
        if (this._objRef) {
            this._objRef.instanceColor = applyValue(this._objRef.instanceColor, value);
        }
    }
    set instanceMatrix(value) {
        if (this._objRef) {
            this._objRef.instanceMatrix = applyValue(this._objRef.instanceMatrix, value);
        }
    }
}
ThInstancedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThInstancedMesh, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThInstancedMesh.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThInstancedMesh, selector: "th-instancedMesh", inputs: { count: "count", instanceColor: "instanceColor", instanceMatrix: "instanceMatrix" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThInstancedMesh) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThInstancedMesh, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-instancedMesh',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThInstancedMesh) },
                    ],
                }]
        }], propDecorators: { count: [{
                type: Input
            }], instanceColor: [{
                type: Input
            }], instanceMatrix: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLatheGeometry extends ThBufferGeometry {
    getType() {
        return LatheGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThLatheGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLatheGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLatheGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLatheGeometry, selector: "th-latheGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThLatheGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLatheGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-latheGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThLatheGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

// eslint-disable-next-line @angular-eslint/component-class-suffix
class ThMaterialBase extends ThWrapperBase {
    constructor(parent) {
        super();
        this.parent = parent;
    }
    addToParent() {
        if (!this.parent.objRef) {
            throw new Error("parent object doesn't hold a three js object instance");
        }
        this.parent.objRef.material = this.objRef;
    }
    removeFromParent() {
        if (this._objRef && this.parent && this.parent.objRef) {
            this.parent.objRef.material = undefined;
        }
    }
}
ThMaterialBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaterialBase, deps: [{ token: ThObject3D }], target: i0.ɵɵFactoryTarget.Component });
ThMaterialBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMaterialBase, selector: "th-abs-material", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaterialBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-material',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: ThObject3D }]; } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMaterial extends ThMaterialBase {
    constructor(hostObject) {
        super(hostObject);
    }
    getType() {
        return Material;
    }
    set alphaTest(value) {
        if (this._objRef) {
            this._objRef.alphaTest = value;
        }
    }
    set alphaToCoverage(value) {
        if (this._objRef) {
            this._objRef.alphaToCoverage = value;
        }
    }
    set blendDst(value) {
        if (this._objRef) {
            this._objRef.blendDst = value;
        }
    }
    set blendDstAlpha(value) {
        if (this._objRef) {
            this._objRef.blendDstAlpha = value;
        }
    }
    set blendEquation(value) {
        if (this._objRef) {
            this._objRef.blendEquation = value;
        }
    }
    set blendEquationAlpha(value) {
        if (this._objRef) {
            this._objRef.blendEquationAlpha = value;
        }
    }
    set blending(value) {
        if (this._objRef) {
            this._objRef.blending = value;
        }
    }
    set blendSrc(value) {
        if (this._objRef) {
            this._objRef.blendSrc = value;
        }
    }
    set blendSrcAlpha(value) {
        if (this._objRef) {
            this._objRef.blendSrcAlpha = value;
        }
    }
    set clipIntersection(value) {
        if (this._objRef) {
            this._objRef.clipIntersection = value;
        }
    }
    set clippingPlanes(value) {
        if (this._objRef) {
            this._objRef.clippingPlanes = value;
        }
    }
    set clipShadows(value) {
        if (this._objRef) {
            this._objRef.clipShadows = value;
        }
    }
    set colorWrite(value) {
        if (this._objRef) {
            this._objRef.colorWrite = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set depthFunc(value) {
        if (this._objRef) {
            this._objRef.depthFunc = value;
        }
    }
    set depthTest(value) {
        if (this._objRef) {
            this._objRef.depthTest = value;
        }
    }
    set depthWrite(value) {
        if (this._objRef) {
            this._objRef.depthWrite = value;
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    set format(value) {
        if (this._objRef) {
            this._objRef.format = value;
        }
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    set stencilWrite(value) {
        if (this._objRef) {
            this._objRef.stencilWrite = value;
        }
    }
    set stencilFunc(value) {
        if (this._objRef) {
            this._objRef.stencilFunc = value;
        }
    }
    set stencilRef(value) {
        if (this._objRef) {
            this._objRef.stencilRef = value;
        }
    }
    set stencilWriteMask(value) {
        if (this._objRef) {
            this._objRef.stencilWriteMask = value;
        }
    }
    set stencilFuncMask(value) {
        if (this._objRef) {
            this._objRef.stencilFuncMask = value;
        }
    }
    set stencilFail(value) {
        if (this._objRef) {
            this._objRef.stencilFail = value;
        }
    }
    set stencilZFail(value) {
        if (this._objRef) {
            this._objRef.stencilZFail = value;
        }
    }
    set stencilZPass(value) {
        if (this._objRef) {
            this._objRef.stencilZPass = value;
        }
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    set needsUpdate(value) {
        if (this._objRef) {
            this._objRef.needsUpdate = value;
        }
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    set polygonOffset(value) {
        if (this._objRef) {
            this._objRef.polygonOffset = value;
        }
    }
    set polygonOffsetFactor(value) {
        if (this._objRef) {
            this._objRef.polygonOffsetFactor = value;
        }
    }
    set polygonOffsetUnits(value) {
        if (this._objRef) {
            this._objRef.polygonOffsetUnits = value;
        }
    }
    set precision(value) {
        if (this._objRef) {
            this._objRef.precision = value;
        }
    }
    set premultipliedAlpha(value) {
        if (this._objRef) {
            this._objRef.premultipliedAlpha = value;
        }
    }
    set dithering(value) {
        if (this._objRef) {
            this._objRef.dithering = value;
        }
    }
    set side(value) {
        if (this._objRef) {
            this._objRef.side = value;
        }
    }
    set shadowSide(value) {
        if (this._objRef) {
            this._objRef.shadowSide = value;
        }
    }
    set toneMapped(value) {
        if (this._objRef) {
            this._objRef.toneMapped = value;
        }
    }
    set transparent(value) {
        if (this._objRef) {
            this._objRef.transparent = value;
        }
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    set vertexColors(value) {
        if (this._objRef) {
            this._objRef.vertexColors = value;
        }
    }
    set visible(value) {
        if (this._objRef) {
            this._objRef.visible = value;
        }
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    set version(value) {
        if (this._objRef) {
            this._objRef.version = value;
        }
    }
}
ThMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaterial, deps: [{ token: ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMaterial, selector: "th-material", inputs: { alphaTest: "alphaTest", alphaToCoverage: "alphaToCoverage", blendDst: "blendDst", blendDstAlpha: "blendDstAlpha", blendEquation: "blendEquation", blendEquationAlpha: "blendEquationAlpha", blending: "blending", blendSrc: "blendSrc", blendSrcAlpha: "blendSrcAlpha", clipIntersection: "clipIntersection", clippingPlanes: "clippingPlanes", clipShadows: "clipShadows", colorWrite: "colorWrite", defines: "defines", depthFunc: "depthFunc", depthTest: "depthTest", depthWrite: "depthWrite", fog: "fog", format: "format", id: "id", stencilWrite: "stencilWrite", stencilFunc: "stencilFunc", stencilRef: "stencilRef", stencilWriteMask: "stencilWriteMask", stencilFuncMask: "stencilFuncMask", stencilFail: "stencilFail", stencilZFail: "stencilZFail", stencilZPass: "stencilZPass", name: "name", needsUpdate: "needsUpdate", opacity: "opacity", polygonOffset: "polygonOffset", polygonOffsetFactor: "polygonOffsetFactor", polygonOffsetUnits: "polygonOffsetUnits", precision: "precision", premultipliedAlpha: "premultipliedAlpha", dithering: "dithering", side: "side", shadowSide: "shadowSide", toneMapped: "toneMapped", transparent: "transparent", type: "type", uuid: "uuid", vertexColors: "vertexColors", visible: "visible", userData: "userData", version: "version" }, providers: [], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-material',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                }]
        }], ctorParameters: function () {
        return [{ type: ThObject3D, decorators: [{
                        type: SkipSelf
                    }] }];
    }, propDecorators: { alphaTest: [{
                type: Input
            }], alphaToCoverage: [{
                type: Input
            }], blendDst: [{
                type: Input
            }], blendDstAlpha: [{
                type: Input
            }], blendEquation: [{
                type: Input
            }], blendEquationAlpha: [{
                type: Input
            }], blending: [{
                type: Input
            }], blendSrc: [{
                type: Input
            }], blendSrcAlpha: [{
                type: Input
            }], clipIntersection: [{
                type: Input
            }], clippingPlanes: [{
                type: Input
            }], clipShadows: [{
                type: Input
            }], colorWrite: [{
                type: Input
            }], defines: [{
                type: Input
            }], depthFunc: [{
                type: Input
            }], depthTest: [{
                type: Input
            }], depthWrite: [{
                type: Input
            }], fog: [{
                type: Input
            }], format: [{
                type: Input
            }], id: [{
                type: Input
            }], stencilWrite: [{
                type: Input
            }], stencilFunc: [{
                type: Input
            }], stencilRef: [{
                type: Input
            }], stencilWriteMask: [{
                type: Input
            }], stencilFuncMask: [{
                type: Input
            }], stencilFail: [{
                type: Input
            }], stencilZFail: [{
                type: Input
            }], stencilZPass: [{
                type: Input
            }], name: [{
                type: Input
            }], needsUpdate: [{
                type: Input
            }], opacity: [{
                type: Input
            }], polygonOffset: [{
                type: Input
            }], polygonOffsetFactor: [{
                type: Input
            }], polygonOffsetUnits: [{
                type: Input
            }], precision: [{
                type: Input
            }], premultipliedAlpha: [{
                type: Input
            }], dithering: [{
                type: Input
            }], side: [{
                type: Input
            }], shadowSide: [{
                type: Input
            }], toneMapped: [{
                type: Input
            }], transparent: [{
                type: Input
            }], type: [{
                type: Input
            }], uuid: [{
                type: Input
            }], vertexColors: [{
                type: Input
            }], visible: [{
                type: Input
            }], userData: [{
                type: Input
            }], version: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLineBasicMaterial extends ThMaterial {
    getType() {
        return LineBasicMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set linewidth(value) {
        if (this._objRef) {
            this._objRef.linewidth = value;
        }
    }
    set linecap(value) {
        if (this._objRef) {
            this._objRef.linecap = value;
        }
    }
    set linejoin(value) {
        if (this._objRef) {
            this._objRef.linejoin = value;
        }
    }
}
ThLineBasicMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineBasicMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLineBasicMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLineBasicMaterial, selector: "th-lineBasicMaterial", inputs: { type: "type", color: "color", linewidth: "linewidth", linecap: "linecap", linejoin: "linejoin" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThLineBasicMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineBasicMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lineBasicMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThLineBasicMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], linewidth: [{
                type: Input
            }], linecap: [{
                type: Input
            }], linejoin: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLineDashedMaterial extends ThLineBasicMaterial {
    getType() {
        return LineDashedMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set scale(value) {
        if (this._objRef) {
            this._objRef.scale = value;
        }
    }
    set dashSize(value) {
        if (this._objRef) {
            this._objRef.dashSize = value;
        }
    }
    set gapSize(value) {
        if (this._objRef) {
            this._objRef.gapSize = value;
        }
    }
}
ThLineDashedMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineDashedMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLineDashedMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLineDashedMaterial, selector: "th-lineDashedMaterial", inputs: { type: "type", scale: "scale", dashSize: "dashSize", gapSize: "gapSize" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThLineDashedMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineDashedMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lineDashedMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThLineDashedMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], scale: [{
                type: Input
            }], dashSize: [{
                type: Input
            }], gapSize: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLineLoop extends ThLine {
    getType() {
        return LineLoop;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThLineLoop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineLoop, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLineLoop.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLineLoop, selector: "th-lineLoop", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThLineLoop) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLineLoop, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lineLoop',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThLineLoop) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThLOD extends ThObject3D {
    getType() {
        return LOD;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set levels(value) {
        if (this._objRef) {
            this._objRef.levels = value;
        }
    }
    set autoUpdate(value) {
        if (this._objRef) {
            this._objRef.autoUpdate = value;
        }
    }
    set objects(value) {
        if (this._objRef) {
            this._objRef.objects = value;
        }
    }
}
ThLOD.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLOD, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLOD.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLOD, selector: "th-lOD", inputs: { type: "type", levels: "levels", autoUpdate: "autoUpdate", objects: "objects" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLOD) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLOD, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lOD',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLOD) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], levels: [{
                type: Input
            }], autoUpdate: [{
                type: Input
            }], objects: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThShaderPass extends ThPass {
    getType() {
        return ShaderPass;
    }
    set textureID(value) {
        if (this._objRef) {
            this._objRef.textureID = value;
        }
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThShaderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShaderPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThShaderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThShaderPass, selector: "th-shaderPass", inputs: { textureID: "textureID", uniforms: "uniforms", material: "material", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThShaderPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShaderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-shaderPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThShaderPass) },
                    ],
                }]
        }], propDecorators: { textureID: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThLUTPass extends ThShaderPass {
    getType() {
        return LUTPass;
    }
    set lut(value) {
        if (this._objRef) {
            this._objRef.lut = value;
        }
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
}
ThLUTPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLUTPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLUTPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThLUTPass, selector: "th-lUTPass", inputs: { lut: "lut", intensity: "intensity" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThLUTPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLUTPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lUTPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThLUTPass) },
                    ],
                }]
        }], propDecorators: { lut: [{
                type: Input
            }], intensity: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThOrbitControls extends ThControlBase {
    getType() {
        return OrbitControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set target(value) {
        if (this._objRef) {
            this._objRef.target = applyValue(this._objRef.target, value);
        }
    }
    set center(value) {
        if (this._objRef) {
            this._objRef.center = applyValue(this._objRef.center, value);
        }
    }
    set minDistance(value) {
        if (this._objRef) {
            this._objRef.minDistance = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set minZoom(value) {
        if (this._objRef) {
            this._objRef.minZoom = value;
        }
    }
    set maxZoom(value) {
        if (this._objRef) {
            this._objRef.maxZoom = value;
        }
    }
    set minPolarAngle(value) {
        if (this._objRef) {
            this._objRef.minPolarAngle = value;
        }
    }
    set maxPolarAngle(value) {
        if (this._objRef) {
            this._objRef.maxPolarAngle = value;
        }
    }
    set minAzimuthAngle(value) {
        if (this._objRef) {
            this._objRef.minAzimuthAngle = value;
        }
    }
    set maxAzimuthAngle(value) {
        if (this._objRef) {
            this._objRef.maxAzimuthAngle = value;
        }
    }
    set enableDamping(value) {
        if (this._objRef) {
            this._objRef.enableDamping = value;
        }
    }
    set dampingFactor(value) {
        if (this._objRef) {
            this._objRef.dampingFactor = value;
        }
    }
    set enableZoom(value) {
        if (this._objRef) {
            this._objRef.enableZoom = value;
        }
    }
    set zoomSpeed(value) {
        if (this._objRef) {
            this._objRef.zoomSpeed = value;
        }
    }
    set enableRotate(value) {
        if (this._objRef) {
            this._objRef.enableRotate = value;
        }
    }
    set rotateSpeed(value) {
        if (this._objRef) {
            this._objRef.rotateSpeed = value;
        }
    }
    set enablePan(value) {
        if (this._objRef) {
            this._objRef.enablePan = value;
        }
    }
    set panSpeed(value) {
        if (this._objRef) {
            this._objRef.panSpeed = value;
        }
    }
    set screenSpacePanning(value) {
        if (this._objRef) {
            this._objRef.screenSpacePanning = value;
        }
    }
    set keyPanSpeed(value) {
        if (this._objRef) {
            this._objRef.keyPanSpeed = value;
        }
    }
    set autoRotate(value) {
        if (this._objRef) {
            this._objRef.autoRotate = value;
        }
    }
    set autoRotateSpeed(value) {
        if (this._objRef) {
            this._objRef.autoRotateSpeed = value;
        }
    }
    set enableKeys(value) {
        if (this._objRef) {
            this._objRef.enableKeys = value;
        }
    }
    set keys(value) {
        if (this._objRef) {
            this._objRef.keys = value;
        }
    }
    set mouseButtons(value) {
        if (this._objRef) {
            this._objRef.mouseButtons = value;
        }
    }
    set touches(value) {
        if (this._objRef) {
            this._objRef.touches = value;
        }
    }
}
ThOrbitControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOrbitControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOrbitControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThOrbitControls, selector: "th-orbitControls", inputs: { object: "object", domElement: "domElement", enabled: "enabled", target: "target", center: "center", minDistance: "minDistance", maxDistance: "maxDistance", minZoom: "minZoom", maxZoom: "maxZoom", minPolarAngle: "minPolarAngle", maxPolarAngle: "maxPolarAngle", minAzimuthAngle: "minAzimuthAngle", maxAzimuthAngle: "maxAzimuthAngle", enableDamping: "enableDamping", dampingFactor: "dampingFactor", enableZoom: "enableZoom", zoomSpeed: "zoomSpeed", enableRotate: "enableRotate", rotateSpeed: "rotateSpeed", enablePan: "enablePan", panSpeed: "panSpeed", screenSpacePanning: "screenSpacePanning", keyPanSpeed: "keyPanSpeed", autoRotate: "autoRotate", autoRotateSpeed: "autoRotateSpeed", enableKeys: "enableKeys", keys: "keys", mouseButtons: "mouseButtons", touches: "touches" }, providers: [
        { provide: ThControlBase, useExisting: forwardRef(() => ThOrbitControls) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOrbitControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-orbitControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThControlBase, useExisting: forwardRef(() => ThOrbitControls) },
                    ],
                }]
        }], propDecorators: { object: [{
                type: Input
            }], domElement: [{
                type: Input
            }], enabled: [{
                type: Input
            }], target: [{
                type: Input
            }], center: [{
                type: Input
            }], minDistance: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], minZoom: [{
                type: Input
            }], maxZoom: [{
                type: Input
            }], minPolarAngle: [{
                type: Input
            }], maxPolarAngle: [{
                type: Input
            }], minAzimuthAngle: [{
                type: Input
            }], maxAzimuthAngle: [{
                type: Input
            }], enableDamping: [{
                type: Input
            }], dampingFactor: [{
                type: Input
            }], enableZoom: [{
                type: Input
            }], zoomSpeed: [{
                type: Input
            }], enableRotate: [{
                type: Input
            }], rotateSpeed: [{
                type: Input
            }], enablePan: [{
                type: Input
            }], panSpeed: [{
                type: Input
            }], screenSpacePanning: [{
                type: Input
            }], keyPanSpeed: [{
                type: Input
            }], autoRotate: [{
                type: Input
            }], autoRotateSpeed: [{
                type: Input
            }], enableKeys: [{
                type: Input
            }], keys: [{
                type: Input
            }], mouseButtons: [{
                type: Input
            }], touches: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMapControls extends ThOrbitControls {
    getType() {
        return MapControls;
    }
}
ThMapControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMapControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMapControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMapControls, selector: "th-mapControls", providers: [
        { provide: ThControlBase, useExisting: forwardRef(() => ThMapControls) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMapControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-mapControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThControlBase, useExisting: forwardRef(() => ThMapControls) },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/ban-types */
class ThMaskPass extends ThPass {
    getType() {
        return MaskPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set inverse(value) {
        if (this._objRef) {
            this._objRef.inverse = value;
        }
    }
}
ThMaskPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaskPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMaskPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMaskPass, selector: "th-maskPass", inputs: { scene: "scene", camera: "camera", inverse: "inverse" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThMaskPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMaskPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-maskPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThMaskPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], inverse: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshBasicMaterial extends ThMaterial {
    getType() {
        return MeshBasicMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set lightMap(value) {
        if (this._objRef) {
            this._objRef.lightMap = value;
        }
    }
    set lightMapIntensity(value) {
        if (this._objRef) {
            this._objRef.lightMapIntensity = value;
        }
    }
    set aoMap(value) {
        if (this._objRef) {
            this._objRef.aoMap = value;
        }
    }
    set aoMapIntensity(value) {
        if (this._objRef) {
            this._objRef.aoMapIntensity = value;
        }
    }
    set specularMap(value) {
        if (this._objRef) {
            this._objRef.specularMap = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set envMap(value) {
        if (this._objRef) {
            this._objRef.envMap = value;
        }
    }
    set combine(value) {
        if (this._objRef) {
            this._objRef.combine = value;
        }
    }
    set reflectivity(value) {
        if (this._objRef) {
            this._objRef.reflectivity = value;
        }
    }
    set refractionRatio(value) {
        if (this._objRef) {
            this._objRef.refractionRatio = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set wireframeLinecap(value) {
        if (this._objRef) {
            this._objRef.wireframeLinecap = value;
        }
    }
    set wireframeLinejoin(value) {
        if (this._objRef) {
            this._objRef.wireframeLinejoin = value;
        }
    }
}
ThMeshBasicMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshBasicMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshBasicMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshBasicMaterial, selector: "th-meshBasicMaterial", inputs: { type: "type", color: "color", map: "map", lightMap: "lightMap", lightMapIntensity: "lightMapIntensity", aoMap: "aoMap", aoMapIntensity: "aoMapIntensity", specularMap: "specularMap", alphaMap: "alphaMap", envMap: "envMap", combine: "combine", reflectivity: "reflectivity", refractionRatio: "refractionRatio", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", wireframeLinecap: "wireframeLinecap", wireframeLinejoin: "wireframeLinejoin" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshBasicMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshBasicMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshBasicMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshBasicMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], map: [{
                type: Input
            }], lightMap: [{
                type: Input
            }], lightMapIntensity: [{
                type: Input
            }], aoMap: [{
                type: Input
            }], aoMapIntensity: [{
                type: Input
            }], specularMap: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], envMap: [{
                type: Input
            }], combine: [{
                type: Input
            }], reflectivity: [{
                type: Input
            }], refractionRatio: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], wireframeLinecap: [{
                type: Input
            }], wireframeLinejoin: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshDepthMaterial extends ThMaterial {
    getType() {
        return MeshDepthMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set depthPacking(value) {
        if (this._objRef) {
            this._objRef.depthPacking = value;
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
}
ThMeshDepthMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshDepthMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshDepthMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshDepthMaterial, selector: "th-meshDepthMaterial", inputs: { type: "type", map: "map", alphaMap: "alphaMap", depthPacking: "depthPacking", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", fog: "fog" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshDepthMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshDepthMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshDepthMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshDepthMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], map: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], depthPacking: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], fog: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshDistanceMaterial extends ThMaterial {
    getType() {
        return MeshDistanceMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set farDistance(value) {
        if (this._objRef) {
            this._objRef.farDistance = value;
        }
    }
    set nearDistance(value) {
        if (this._objRef) {
            this._objRef.nearDistance = value;
        }
    }
    set referencePosition(value) {
        if (this._objRef) {
            this._objRef.referencePosition = applyValue(this._objRef.referencePosition, value);
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
}
ThMeshDistanceMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshDistanceMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshDistanceMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshDistanceMaterial, selector: "th-meshDistanceMaterial", inputs: { type: "type", map: "map", alphaMap: "alphaMap", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", farDistance: "farDistance", nearDistance: "nearDistance", referencePosition: "referencePosition", fog: "fog" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshDistanceMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshDistanceMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshDistanceMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshDistanceMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], map: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], farDistance: [{
                type: Input
            }], nearDistance: [{
                type: Input
            }], referencePosition: [{
                type: Input
            }], fog: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshLambertMaterial extends ThMaterial {
    getType() {
        return MeshLambertMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set emissive(value) {
        if (this._objRef) {
            this._objRef.emissive = applyValue(this._objRef.emissive, value);
        }
    }
    set emissiveIntensity(value) {
        if (this._objRef) {
            this._objRef.emissiveIntensity = value;
        }
    }
    set emissiveMap(value) {
        if (this._objRef) {
            this._objRef.emissiveMap = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set lightMap(value) {
        if (this._objRef) {
            this._objRef.lightMap = value;
        }
    }
    set lightMapIntensity(value) {
        if (this._objRef) {
            this._objRef.lightMapIntensity = value;
        }
    }
    set aoMap(value) {
        if (this._objRef) {
            this._objRef.aoMap = value;
        }
    }
    set aoMapIntensity(value) {
        if (this._objRef) {
            this._objRef.aoMapIntensity = value;
        }
    }
    set specularMap(value) {
        if (this._objRef) {
            this._objRef.specularMap = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set envMap(value) {
        if (this._objRef) {
            this._objRef.envMap = value;
        }
    }
    set combine(value) {
        if (this._objRef) {
            this._objRef.combine = value;
        }
    }
    set reflectivity(value) {
        if (this._objRef) {
            this._objRef.reflectivity = value;
        }
    }
    set refractionRatio(value) {
        if (this._objRef) {
            this._objRef.refractionRatio = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set wireframeLinecap(value) {
        if (this._objRef) {
            this._objRef.wireframeLinecap = value;
        }
    }
    set wireframeLinejoin(value) {
        if (this._objRef) {
            this._objRef.wireframeLinejoin = value;
        }
    }
}
ThMeshLambertMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshLambertMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshLambertMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshLambertMaterial, selector: "th-meshLambertMaterial", inputs: { type: "type", color: "color", emissive: "emissive", emissiveIntensity: "emissiveIntensity", emissiveMap: "emissiveMap", map: "map", lightMap: "lightMap", lightMapIntensity: "lightMapIntensity", aoMap: "aoMap", aoMapIntensity: "aoMapIntensity", specularMap: "specularMap", alphaMap: "alphaMap", envMap: "envMap", combine: "combine", reflectivity: "reflectivity", refractionRatio: "refractionRatio", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", wireframeLinecap: "wireframeLinecap", wireframeLinejoin: "wireframeLinejoin" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshLambertMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshLambertMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshLambertMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshLambertMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], emissive: [{
                type: Input
            }], emissiveIntensity: [{
                type: Input
            }], emissiveMap: [{
                type: Input
            }], map: [{
                type: Input
            }], lightMap: [{
                type: Input
            }], lightMapIntensity: [{
                type: Input
            }], aoMap: [{
                type: Input
            }], aoMapIntensity: [{
                type: Input
            }], specularMap: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], envMap: [{
                type: Input
            }], combine: [{
                type: Input
            }], reflectivity: [{
                type: Input
            }], refractionRatio: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], wireframeLinecap: [{
                type: Input
            }], wireframeLinejoin: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshMatcapMaterial extends ThMaterial {
    getType() {
        return MeshMatcapMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set matcap(value) {
        if (this._objRef) {
            this._objRef.matcap = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set bumpMap(value) {
        if (this._objRef) {
            this._objRef.bumpMap = value;
        }
    }
    set bumpScale(value) {
        if (this._objRef) {
            this._objRef.bumpScale = value;
        }
    }
    set normalMap(value) {
        if (this._objRef) {
            this._objRef.normalMap = value;
        }
    }
    set normalMapType(value) {
        if (this._objRef) {
            this._objRef.normalMapType = value;
        }
    }
    set normalScale(value) {
        if (this._objRef) {
            this._objRef.normalScale = applyValue(this._objRef.normalScale, value);
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set flatShading(value) {
        if (this._objRef) {
            this._objRef.flatShading = value;
        }
    }
}
ThMeshMatcapMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshMatcapMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshMatcapMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshMatcapMaterial, selector: "th-meshMatcapMaterial", inputs: { type: "type", defines: "defines", color: "color", matcap: "matcap", map: "map", bumpMap: "bumpMap", bumpScale: "bumpScale", normalMap: "normalMap", normalMapType: "normalMapType", normalScale: "normalScale", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", alphaMap: "alphaMap", flatShading: "flatShading" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshMatcapMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshMatcapMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshMatcapMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshMatcapMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], color: [{
                type: Input
            }], matcap: [{
                type: Input
            }], map: [{
                type: Input
            }], bumpMap: [{
                type: Input
            }], bumpScale: [{
                type: Input
            }], normalMap: [{
                type: Input
            }], normalMapType: [{
                type: Input
            }], normalScale: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], flatShading: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshNormalMaterial extends ThMaterial {
    getType() {
        return MeshNormalMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set bumpMap(value) {
        if (this._objRef) {
            this._objRef.bumpMap = value;
        }
    }
    set bumpScale(value) {
        if (this._objRef) {
            this._objRef.bumpScale = value;
        }
    }
    set normalMap(value) {
        if (this._objRef) {
            this._objRef.normalMap = value;
        }
    }
    set normalMapType(value) {
        if (this._objRef) {
            this._objRef.normalMapType = value;
        }
    }
    set normalScale(value) {
        if (this._objRef) {
            this._objRef.normalScale = applyValue(this._objRef.normalScale, value);
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set flatShading(value) {
        if (this._objRef) {
            this._objRef.flatShading = value;
        }
    }
}
ThMeshNormalMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshNormalMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshNormalMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshNormalMaterial, selector: "th-meshNormalMaterial", inputs: { type: "type", bumpMap: "bumpMap", bumpScale: "bumpScale", normalMap: "normalMap", normalMapType: "normalMapType", normalScale: "normalScale", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", flatShading: "flatShading" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshNormalMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshNormalMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshNormalMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshNormalMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], bumpMap: [{
                type: Input
            }], bumpScale: [{
                type: Input
            }], normalMap: [{
                type: Input
            }], normalMapType: [{
                type: Input
            }], normalScale: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], flatShading: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshPhongMaterial extends ThMaterial {
    getType() {
        return MeshPhongMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set specular(value) {
        if (this._objRef) {
            this._objRef.specular = applyValue(this._objRef.specular, value);
        }
    }
    set shininess(value) {
        if (this._objRef) {
            this._objRef.shininess = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set lightMap(value) {
        if (this._objRef) {
            this._objRef.lightMap = value;
        }
    }
    set lightMapIntensity(value) {
        if (this._objRef) {
            this._objRef.lightMapIntensity = value;
        }
    }
    set aoMap(value) {
        if (this._objRef) {
            this._objRef.aoMap = value;
        }
    }
    set aoMapIntensity(value) {
        if (this._objRef) {
            this._objRef.aoMapIntensity = value;
        }
    }
    set emissive(value) {
        if (this._objRef) {
            this._objRef.emissive = applyValue(this._objRef.emissive, value);
        }
    }
    set emissiveIntensity(value) {
        if (this._objRef) {
            this._objRef.emissiveIntensity = value;
        }
    }
    set emissiveMap(value) {
        if (this._objRef) {
            this._objRef.emissiveMap = value;
        }
    }
    set bumpMap(value) {
        if (this._objRef) {
            this._objRef.bumpMap = value;
        }
    }
    set bumpScale(value) {
        if (this._objRef) {
            this._objRef.bumpScale = value;
        }
    }
    set normalMap(value) {
        if (this._objRef) {
            this._objRef.normalMap = value;
        }
    }
    set normalMapType(value) {
        if (this._objRef) {
            this._objRef.normalMapType = value;
        }
    }
    set normalScale(value) {
        if (this._objRef) {
            this._objRef.normalScale = applyValue(this._objRef.normalScale, value);
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set specularMap(value) {
        if (this._objRef) {
            this._objRef.specularMap = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set envMap(value) {
        if (this._objRef) {
            this._objRef.envMap = value;
        }
    }
    set combine(value) {
        if (this._objRef) {
            this._objRef.combine = value;
        }
    }
    set reflectivity(value) {
        if (this._objRef) {
            this._objRef.reflectivity = value;
        }
    }
    set refractionRatio(value) {
        if (this._objRef) {
            this._objRef.refractionRatio = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set wireframeLinecap(value) {
        if (this._objRef) {
            this._objRef.wireframeLinecap = value;
        }
    }
    set wireframeLinejoin(value) {
        if (this._objRef) {
            this._objRef.wireframeLinejoin = value;
        }
    }
    set flatShading(value) {
        if (this._objRef) {
            this._objRef.flatShading = value;
        }
    }
    set metal(value) {
        if (this._objRef) {
            this._objRef.metal = value;
        }
    }
}
ThMeshPhongMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshPhongMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshPhongMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshPhongMaterial, selector: "th-meshPhongMaterial", inputs: { type: "type", color: "color", specular: "specular", shininess: "shininess", map: "map", lightMap: "lightMap", lightMapIntensity: "lightMapIntensity", aoMap: "aoMap", aoMapIntensity: "aoMapIntensity", emissive: "emissive", emissiveIntensity: "emissiveIntensity", emissiveMap: "emissiveMap", bumpMap: "bumpMap", bumpScale: "bumpScale", normalMap: "normalMap", normalMapType: "normalMapType", normalScale: "normalScale", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", specularMap: "specularMap", alphaMap: "alphaMap", envMap: "envMap", combine: "combine", reflectivity: "reflectivity", refractionRatio: "refractionRatio", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", wireframeLinecap: "wireframeLinecap", wireframeLinejoin: "wireframeLinejoin", flatShading: "flatShading", metal: "metal" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshPhongMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshPhongMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshPhongMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshPhongMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], specular: [{
                type: Input
            }], shininess: [{
                type: Input
            }], map: [{
                type: Input
            }], lightMap: [{
                type: Input
            }], lightMapIntensity: [{
                type: Input
            }], aoMap: [{
                type: Input
            }], aoMapIntensity: [{
                type: Input
            }], emissive: [{
                type: Input
            }], emissiveIntensity: [{
                type: Input
            }], emissiveMap: [{
                type: Input
            }], bumpMap: [{
                type: Input
            }], bumpScale: [{
                type: Input
            }], normalMap: [{
                type: Input
            }], normalMapType: [{
                type: Input
            }], normalScale: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], specularMap: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], envMap: [{
                type: Input
            }], combine: [{
                type: Input
            }], reflectivity: [{
                type: Input
            }], refractionRatio: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], wireframeLinecap: [{
                type: Input
            }], wireframeLinejoin: [{
                type: Input
            }], flatShading: [{
                type: Input
            }], metal: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshStandardMaterial extends ThMaterial {
    getType() {
        return MeshStandardMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set roughness(value) {
        if (this._objRef) {
            this._objRef.roughness = value;
        }
    }
    set metalness(value) {
        if (this._objRef) {
            this._objRef.metalness = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set lightMap(value) {
        if (this._objRef) {
            this._objRef.lightMap = value;
        }
    }
    set lightMapIntensity(value) {
        if (this._objRef) {
            this._objRef.lightMapIntensity = value;
        }
    }
    set aoMap(value) {
        if (this._objRef) {
            this._objRef.aoMap = value;
        }
    }
    set aoMapIntensity(value) {
        if (this._objRef) {
            this._objRef.aoMapIntensity = value;
        }
    }
    set emissive(value) {
        if (this._objRef) {
            this._objRef.emissive = applyValue(this._objRef.emissive, value);
        }
    }
    set emissiveIntensity(value) {
        if (this._objRef) {
            this._objRef.emissiveIntensity = value;
        }
    }
    set emissiveMap(value) {
        if (this._objRef) {
            this._objRef.emissiveMap = value;
        }
    }
    set bumpMap(value) {
        if (this._objRef) {
            this._objRef.bumpMap = value;
        }
    }
    set bumpScale(value) {
        if (this._objRef) {
            this._objRef.bumpScale = value;
        }
    }
    set normalMap(value) {
        if (this._objRef) {
            this._objRef.normalMap = value;
        }
    }
    set normalMapType(value) {
        if (this._objRef) {
            this._objRef.normalMapType = value;
        }
    }
    set normalScale(value) {
        if (this._objRef) {
            this._objRef.normalScale = applyValue(this._objRef.normalScale, value);
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set roughnessMap(value) {
        if (this._objRef) {
            this._objRef.roughnessMap = value;
        }
    }
    set metalnessMap(value) {
        if (this._objRef) {
            this._objRef.metalnessMap = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set envMap(value) {
        if (this._objRef) {
            this._objRef.envMap = value;
        }
    }
    set envMapIntensity(value) {
        if (this._objRef) {
            this._objRef.envMapIntensity = value;
        }
    }
    set refractionRatio(value) {
        if (this._objRef) {
            this._objRef.refractionRatio = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set wireframeLinecap(value) {
        if (this._objRef) {
            this._objRef.wireframeLinecap = value;
        }
    }
    set wireframeLinejoin(value) {
        if (this._objRef) {
            this._objRef.wireframeLinejoin = value;
        }
    }
    set flatShading(value) {
        if (this._objRef) {
            this._objRef.flatShading = value;
        }
    }
    set isMeshStandardMaterial(value) {
        if (this._objRef) {
            this._objRef.isMeshStandardMaterial = value;
        }
    }
}
ThMeshStandardMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshStandardMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshStandardMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshStandardMaterial, selector: "th-meshStandardMaterial", inputs: { type: "type", defines: "defines", color: "color", roughness: "roughness", metalness: "metalness", map: "map", lightMap: "lightMap", lightMapIntensity: "lightMapIntensity", aoMap: "aoMap", aoMapIntensity: "aoMapIntensity", emissive: "emissive", emissiveIntensity: "emissiveIntensity", emissiveMap: "emissiveMap", bumpMap: "bumpMap", bumpScale: "bumpScale", normalMap: "normalMap", normalMapType: "normalMapType", normalScale: "normalScale", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", roughnessMap: "roughnessMap", metalnessMap: "metalnessMap", alphaMap: "alphaMap", envMap: "envMap", envMapIntensity: "envMapIntensity", refractionRatio: "refractionRatio", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", wireframeLinecap: "wireframeLinecap", wireframeLinejoin: "wireframeLinejoin", flatShading: "flatShading", isMeshStandardMaterial: "isMeshStandardMaterial" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshStandardMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshStandardMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshStandardMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshStandardMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], color: [{
                type: Input
            }], roughness: [{
                type: Input
            }], metalness: [{
                type: Input
            }], map: [{
                type: Input
            }], lightMap: [{
                type: Input
            }], lightMapIntensity: [{
                type: Input
            }], aoMap: [{
                type: Input
            }], aoMapIntensity: [{
                type: Input
            }], emissive: [{
                type: Input
            }], emissiveIntensity: [{
                type: Input
            }], emissiveMap: [{
                type: Input
            }], bumpMap: [{
                type: Input
            }], bumpScale: [{
                type: Input
            }], normalMap: [{
                type: Input
            }], normalMapType: [{
                type: Input
            }], normalScale: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], roughnessMap: [{
                type: Input
            }], metalnessMap: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], envMap: [{
                type: Input
            }], envMapIntensity: [{
                type: Input
            }], refractionRatio: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], wireframeLinecap: [{
                type: Input
            }], wireframeLinejoin: [{
                type: Input
            }], flatShading: [{
                type: Input
            }], isMeshStandardMaterial: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshPhysicalMaterial extends ThMeshStandardMaterial {
    getType() {
        return MeshPhysicalMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set clearcoat(value) {
        if (this._objRef) {
            this._objRef.clearcoat = value;
        }
    }
    set clearcoatMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatMap = value;
        }
    }
    set clearcoatRoughness(value) {
        if (this._objRef) {
            this._objRef.clearcoatRoughness = value;
        }
    }
    set clearcoatRoughnessMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatRoughnessMap = value;
        }
    }
    set clearcoatNormalScale(value) {
        if (this._objRef) {
            this._objRef.clearcoatNormalScale = applyValue(this._objRef.clearcoatNormalScale, value);
        }
    }
    set clearcoatNormalMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatNormalMap = value;
        }
    }
    set reflectivity(value) {
        if (this._objRef) {
            this._objRef.reflectivity = value;
        }
    }
    set ior(value) {
        if (this._objRef) {
            this._objRef.ior = value;
        }
    }
    set sheen(value) {
        if (this._objRef) {
            this._objRef.sheen = value;
        }
    }
    set sheenColor(value) {
        if (this._objRef) {
            this._objRef.sheenColor = applyValue(this._objRef.sheenColor, value);
        }
    }
    set sheenColorMap(value) {
        if (this._objRef) {
            this._objRef.sheenColorMap = value;
        }
    }
    set sheenRoughness(value) {
        if (this._objRef) {
            this._objRef.sheenRoughness = value;
        }
    }
    set sheenRoughnessMap(value) {
        if (this._objRef) {
            this._objRef.sheenRoughnessMap = value;
        }
    }
    set transmission(value) {
        if (this._objRef) {
            this._objRef.transmission = value;
        }
    }
    set transmissionMap(value) {
        if (this._objRef) {
            this._objRef.transmissionMap = value;
        }
    }
    set thickness(value) {
        if (this._objRef) {
            this._objRef.thickness = value;
        }
    }
    set thicknessMap(value) {
        if (this._objRef) {
            this._objRef.thicknessMap = value;
        }
    }
    set attenuationDistance(value) {
        if (this._objRef) {
            this._objRef.attenuationDistance = value;
        }
    }
    set attenuationColor(value) {
        if (this._objRef) {
            this._objRef.attenuationColor = applyValue(this._objRef.attenuationColor, value);
        }
    }
    set specularIntensity(value) {
        if (this._objRef) {
            this._objRef.specularIntensity = value;
        }
    }
    set specularColor(value) {
        if (this._objRef) {
            this._objRef.specularColor = applyValue(this._objRef.specularColor, value);
        }
    }
    set specularIntensityMap(value) {
        if (this._objRef) {
            this._objRef.specularIntensityMap = value;
        }
    }
    set specularColorMap(value) {
        if (this._objRef) {
            this._objRef.specularColorMap = value;
        }
    }
}
ThMeshPhysicalMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshPhysicalMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshPhysicalMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshPhysicalMaterial, selector: "th-meshPhysicalMaterial", inputs: { type: "type", defines: "defines", clearcoat: "clearcoat", clearcoatMap: "clearcoatMap", clearcoatRoughness: "clearcoatRoughness", clearcoatRoughnessMap: "clearcoatRoughnessMap", clearcoatNormalScale: "clearcoatNormalScale", clearcoatNormalMap: "clearcoatNormalMap", reflectivity: "reflectivity", ior: "ior", sheen: "sheen", sheenColor: "sheenColor", sheenColorMap: "sheenColorMap", sheenRoughness: "sheenRoughness", sheenRoughnessMap: "sheenRoughnessMap", transmission: "transmission", transmissionMap: "transmissionMap", thickness: "thickness", thicknessMap: "thicknessMap", attenuationDistance: "attenuationDistance", attenuationColor: "attenuationColor", specularIntensity: "specularIntensity", specularColor: "specularColor", specularIntensityMap: "specularIntensityMap", specularColorMap: "specularColorMap" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshPhysicalMaterial),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshPhysicalMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshPhysicalMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshPhysicalMaterial),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], clearcoat: [{
                type: Input
            }], clearcoatMap: [{
                type: Input
            }], clearcoatRoughness: [{
                type: Input
            }], clearcoatRoughnessMap: [{
                type: Input
            }], clearcoatNormalScale: [{
                type: Input
            }], clearcoatNormalMap: [{
                type: Input
            }], reflectivity: [{
                type: Input
            }], ior: [{
                type: Input
            }], sheen: [{
                type: Input
            }], sheenColor: [{
                type: Input
            }], sheenColorMap: [{
                type: Input
            }], sheenRoughness: [{
                type: Input
            }], sheenRoughnessMap: [{
                type: Input
            }], transmission: [{
                type: Input
            }], transmissionMap: [{
                type: Input
            }], thickness: [{
                type: Input
            }], thicknessMap: [{
                type: Input
            }], attenuationDistance: [{
                type: Input
            }], attenuationColor: [{
                type: Input
            }], specularIntensity: [{
                type: Input
            }], specularColor: [{
                type: Input
            }], specularIntensityMap: [{
                type: Input
            }], specularColorMap: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThMeshToonMaterial extends ThMaterial {
    getType() {
        return MeshToonMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set gradientMap(value) {
        if (this._objRef) {
            this._objRef.gradientMap = value;
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set lightMap(value) {
        if (this._objRef) {
            this._objRef.lightMap = value;
        }
    }
    set lightMapIntensity(value) {
        if (this._objRef) {
            this._objRef.lightMapIntensity = value;
        }
    }
    set aoMap(value) {
        if (this._objRef) {
            this._objRef.aoMap = value;
        }
    }
    set aoMapIntensity(value) {
        if (this._objRef) {
            this._objRef.aoMapIntensity = value;
        }
    }
    set emissive(value) {
        if (this._objRef) {
            this._objRef.emissive = applyValue(this._objRef.emissive, value);
        }
    }
    set emissiveIntensity(value) {
        if (this._objRef) {
            this._objRef.emissiveIntensity = value;
        }
    }
    set emissiveMap(value) {
        if (this._objRef) {
            this._objRef.emissiveMap = value;
        }
    }
    set bumpMap(value) {
        if (this._objRef) {
            this._objRef.bumpMap = value;
        }
    }
    set bumpScale(value) {
        if (this._objRef) {
            this._objRef.bumpScale = value;
        }
    }
    set normalMap(value) {
        if (this._objRef) {
            this._objRef.normalMap = value;
        }
    }
    set normalMapType(value) {
        if (this._objRef) {
            this._objRef.normalMapType = value;
        }
    }
    set normalScale(value) {
        if (this._objRef) {
            this._objRef.normalScale = applyValue(this._objRef.normalScale, value);
        }
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set wireframeLinecap(value) {
        if (this._objRef) {
            this._objRef.wireframeLinecap = value;
        }
    }
    set wireframeLinejoin(value) {
        if (this._objRef) {
            this._objRef.wireframeLinejoin = value;
        }
    }
}
ThMeshToonMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshToonMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshToonMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThMeshToonMaterial, selector: "th-meshToonMaterial", inputs: { type: "type", defines: "defines", color: "color", gradientMap: "gradientMap", map: "map", lightMap: "lightMap", lightMapIntensity: "lightMapIntensity", aoMap: "aoMap", aoMapIntensity: "aoMapIntensity", emissive: "emissive", emissiveIntensity: "emissiveIntensity", emissiveMap: "emissiveMap", bumpMap: "bumpMap", bumpScale: "bumpScale", normalMap: "normalMap", normalMapType: "normalMapType", normalScale: "normalScale", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", alphaMap: "alphaMap", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", wireframeLinecap: "wireframeLinecap", wireframeLinejoin: "wireframeLinejoin" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshToonMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThMeshToonMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshToonMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThMeshToonMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], color: [{
                type: Input
            }], gradientMap: [{
                type: Input
            }], map: [{
                type: Input
            }], lightMap: [{
                type: Input
            }], lightMapIntensity: [{
                type: Input
            }], aoMap: [{
                type: Input
            }], aoMapIntensity: [{
                type: Input
            }], emissive: [{
                type: Input
            }], emissiveIntensity: [{
                type: Input
            }], emissiveMap: [{
                type: Input
            }], bumpMap: [{
                type: Input
            }], bumpScale: [{
                type: Input
            }], normalMap: [{
                type: Input
            }], normalMapType: [{
                type: Input
            }], normalScale: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], wireframeLinecap: [{
                type: Input
            }], wireframeLinejoin: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThOctahedronGeometry extends ThPolyhedronGeometry {
    getType() {
        return OctahedronGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThOctahedronGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOctahedronGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOctahedronGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThOctahedronGeometry, selector: "th-octahedronGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThOctahedronGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOctahedronGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-octahedronGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThOctahedronGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThOrthographicCamera extends ThCamera {
    getType() {
        return OrthographicCamera;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set zoom(value) {
        if (this._objRef) {
            this._objRef.zoom = value;
        }
    }
    set view(value) {
        if (this._objRef) {
            this._objRef.view = value;
        }
    }
    set left(value) {
        if (this._objRef) {
            this._objRef.left = value;
        }
    }
    set right(value) {
        if (this._objRef) {
            this._objRef.right = value;
        }
    }
    set top(value) {
        if (this._objRef) {
            this._objRef.top = value;
        }
    }
    set bottom(value) {
        if (this._objRef) {
            this._objRef.bottom = value;
        }
    }
    set near(value) {
        if (this._objRef) {
            this._objRef.near = value;
        }
    }
    set far(value) {
        if (this._objRef) {
            this._objRef.far = value;
        }
    }
}
ThOrthographicCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOrthographicCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOrthographicCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThOrthographicCamera, selector: "th-orthographicCamera", inputs: { type: "type", zoom: "zoom", view: "view", left: "left", right: "right", top: "top", bottom: "bottom", near: "near", far: "far" }, providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThOrthographicCamera),
        },
        { provide: ThCamera, useExisting: forwardRef(() => ThOrthographicCamera) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOrthographicCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-orthographicCamera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThOrthographicCamera),
                        },
                        { provide: ThCamera, useExisting: forwardRef(() => ThOrthographicCamera) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], zoom: [{
                type: Input
            }], view: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], top: [{
                type: Input
            }], bottom: [{
                type: Input
            }], near: [{
                type: Input
            }], far: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThOutlinePass extends ThPass {
    getType() {
        return OutlinePass;
    }
    set renderScene(value) {
        if (this._objRef) {
            this._objRef.renderScene = value;
        }
    }
    set renderCamera(value) {
        if (this._objRef) {
            this._objRef.renderCamera = value;
        }
    }
    set selectedObjects(value) {
        if (this._objRef) {
            this._objRef.selectedObjects = value;
        }
    }
    set visibleEdgeColor(value) {
        if (this._objRef) {
            this._objRef.visibleEdgeColor = applyValue(this._objRef.visibleEdgeColor, value);
        }
    }
    set hiddenEdgeColor(value) {
        if (this._objRef) {
            this._objRef.hiddenEdgeColor = applyValue(this._objRef.hiddenEdgeColor, value);
        }
    }
    set edgeGlow(value) {
        if (this._objRef) {
            this._objRef.edgeGlow = value;
        }
    }
    set usePatternTexture(value) {
        if (this._objRef) {
            this._objRef.usePatternTexture = value;
        }
    }
    set edgeThickness(value) {
        if (this._objRef) {
            this._objRef.edgeThickness = value;
        }
    }
    set edgeStrength(value) {
        if (this._objRef) {
            this._objRef.edgeStrength = value;
        }
    }
    set downSampleRatio(value) {
        if (this._objRef) {
            this._objRef.downSampleRatio = value;
        }
    }
    set pulsePeriod(value) {
        if (this._objRef) {
            this._objRef.pulsePeriod = value;
        }
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    set patternTexture(value) {
        if (this._objRef) {
            this._objRef.patternTexture = value;
        }
    }
    set maskBufferMaterial(value) {
        if (this._objRef) {
            this._objRef.maskBufferMaterial = value;
        }
    }
    set renderTargetMaskBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetMaskBuffer = value;
        }
    }
    set depthMaterial(value) {
        if (this._objRef) {
            this._objRef.depthMaterial = value;
        }
    }
    set prepareMaskMaterial(value) {
        if (this._objRef) {
            this._objRef.prepareMaskMaterial = value;
        }
    }
    set renderTargetDepthBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetDepthBuffer = value;
        }
    }
    set renderTargetMaskDownSampleBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetMaskDownSampleBuffer = value;
        }
    }
    set renderTargetBlurBuffer1(value) {
        if (this._objRef) {
            this._objRef.renderTargetBlurBuffer1 = value;
        }
    }
    set renderTargetBlurBuffer2(value) {
        if (this._objRef) {
            this._objRef.renderTargetBlurBuffer2 = value;
        }
    }
    set edgeDetectionMaterial(value) {
        if (this._objRef) {
            this._objRef.edgeDetectionMaterial = value;
        }
    }
    set renderTargetEdgeBuffer1(value) {
        if (this._objRef) {
            this._objRef.renderTargetEdgeBuffer1 = value;
        }
    }
    set renderTargetEdgeBuffer2(value) {
        if (this._objRef) {
            this._objRef.renderTargetEdgeBuffer2 = value;
        }
    }
    set separableBlurMaterial1(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterial1 = value;
        }
    }
    set separableBlurMaterial2(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterial2 = value;
        }
    }
    set overlayMaterial(value) {
        if (this._objRef) {
            this._objRef.overlayMaterial = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set tempPulseColor1(value) {
        if (this._objRef) {
            this._objRef.tempPulseColor1 = applyValue(this._objRef.tempPulseColor1, value);
        }
    }
    set tempPulseColor2(value) {
        if (this._objRef) {
            this._objRef.tempPulseColor2 = applyValue(this._objRef.tempPulseColor2, value);
        }
    }
    set textureMatrix(value) {
        if (this._objRef) {
            this._objRef.textureMatrix = applyValue(this._objRef.textureMatrix, value);
        }
    }
}
ThOutlinePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOutlinePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOutlinePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThOutlinePass, selector: "th-outlinePass", inputs: { renderScene: "renderScene", renderCamera: "renderCamera", selectedObjects: "selectedObjects", visibleEdgeColor: "visibleEdgeColor", hiddenEdgeColor: "hiddenEdgeColor", edgeGlow: "edgeGlow", usePatternTexture: "usePatternTexture", edgeThickness: "edgeThickness", edgeStrength: "edgeStrength", downSampleRatio: "downSampleRatio", pulsePeriod: "pulsePeriod", resolution: "resolution", patternTexture: "patternTexture", maskBufferMaterial: "maskBufferMaterial", renderTargetMaskBuffer: "renderTargetMaskBuffer", depthMaterial: "depthMaterial", prepareMaskMaterial: "prepareMaskMaterial", renderTargetDepthBuffer: "renderTargetDepthBuffer", renderTargetMaskDownSampleBuffer: "renderTargetMaskDownSampleBuffer", renderTargetBlurBuffer1: "renderTargetBlurBuffer1", renderTargetBlurBuffer2: "renderTargetBlurBuffer2", edgeDetectionMaterial: "edgeDetectionMaterial", renderTargetEdgeBuffer1: "renderTargetEdgeBuffer1", renderTargetEdgeBuffer2: "renderTargetEdgeBuffer2", separableBlurMaterial1: "separableBlurMaterial1", separableBlurMaterial2: "separableBlurMaterial2", overlayMaterial: "overlayMaterial", copyUniforms: "copyUniforms", materialCopy: "materialCopy", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", fsQuad: "fsQuad", tempPulseColor1: "tempPulseColor1", tempPulseColor2: "tempPulseColor2", textureMatrix: "textureMatrix" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThOutlinePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThOutlinePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-outlinePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThOutlinePass) },
                    ],
                }]
        }], propDecorators: { renderScene: [{
                type: Input
            }], renderCamera: [{
                type: Input
            }], selectedObjects: [{
                type: Input
            }], visibleEdgeColor: [{
                type: Input
            }], hiddenEdgeColor: [{
                type: Input
            }], edgeGlow: [{
                type: Input
            }], usePatternTexture: [{
                type: Input
            }], edgeThickness: [{
                type: Input
            }], edgeStrength: [{
                type: Input
            }], downSampleRatio: [{
                type: Input
            }], pulsePeriod: [{
                type: Input
            }], resolution: [{
                type: Input
            }], patternTexture: [{
                type: Input
            }], maskBufferMaterial: [{
                type: Input
            }], renderTargetMaskBuffer: [{
                type: Input
            }], depthMaterial: [{
                type: Input
            }], prepareMaskMaterial: [{
                type: Input
            }], renderTargetDepthBuffer: [{
                type: Input
            }], renderTargetMaskDownSampleBuffer: [{
                type: Input
            }], renderTargetBlurBuffer1: [{
                type: Input
            }], renderTargetBlurBuffer2: [{
                type: Input
            }], edgeDetectionMaterial: [{
                type: Input
            }], renderTargetEdgeBuffer1: [{
                type: Input
            }], renderTargetEdgeBuffer2: [{
                type: Input
            }], separableBlurMaterial1: [{
                type: Input
            }], separableBlurMaterial2: [{
                type: Input
            }], overlayMaterial: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], tempPulseColor1: [{
                type: Input
            }], tempPulseColor2: [{
                type: Input
            }], textureMatrix: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThParametricGeometry extends ThBufferGeometry {
    getType() {
        return ParametricGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThParametricGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThParametricGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThParametricGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThParametricGeometry, selector: "th-parametricGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThParametricGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThParametricGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-parametricGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThParametricGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPlaneGeometry extends ThBufferGeometry {
    getType() {
        return PlaneGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThPlaneGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPlaneGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPlaneGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPlaneGeometry, selector: "th-planeGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThPlaneGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPlaneGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-planeGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThPlaneGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPlaneHelper extends ThLineSegments {
    getType() {
        return PlaneHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set plane(value) {
        if (this._objRef) {
            this._objRef.plane = applyValue(this._objRef.plane, value);
        }
    }
    set size(value) {
        if (this._objRef) {
            this._objRef.size = value;
        }
    }
}
ThPlaneHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPlaneHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPlaneHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPlaneHelper, selector: "th-planeHelper", inputs: { type: "type", plane: "plane", size: "size" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPlaneHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPlaneHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-planeHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPlaneHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], plane: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPointerLockControls extends ThControlBase {
    getType() {
        return PointerLockControls;
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set isLocked(value) {
        if (this._objRef) {
            this._objRef.isLocked = value;
        }
    }
    set minPolarAngle(value) {
        if (this._objRef) {
            this._objRef.minPolarAngle = value;
        }
    }
    set maxPolarAngle(value) {
        if (this._objRef) {
            this._objRef.maxPolarAngle = value;
        }
    }
}
ThPointerLockControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointerLockControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPointerLockControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPointerLockControls, selector: "th-pointerLockControls", inputs: { domElement: "domElement", isLocked: "isLocked", minPolarAngle: "minPolarAngle", maxPolarAngle: "maxPolarAngle" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThPointerLockControls),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointerLockControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-pointerLockControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThPointerLockControls),
                        },
                    ],
                }]
        }], propDecorators: { domElement: [{
                type: Input
            }], isLocked: [{
                type: Input
            }], minPolarAngle: [{
                type: Input
            }], maxPolarAngle: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPointLight extends ThLight {
    getType() {
        return PointLight;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
    set distance(value) {
        if (this._objRef) {
            this._objRef.distance = value;
        }
    }
    set decay(value) {
        if (this._objRef) {
            this._objRef.decay = value;
        }
    }
    set shadow(value) {
        if (this._objRef) {
            this._objRef.shadow = value;
        }
    }
    set power(value) {
        if (this._objRef) {
            this._objRef.power = value;
        }
    }
}
ThPointLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPointLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPointLight, selector: "th-pointLight", inputs: { type: "type", intensity: "intensity", distance: "distance", decay: "decay", shadow: "shadow", power: "power" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPointLight) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-pointLight',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPointLight) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], intensity: [{
                type: Input
            }], distance: [{
                type: Input
            }], decay: [{
                type: Input
            }], shadow: [{
                type: Input
            }], power: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPointLightHelper extends ThObject3D {
    getType() {
        return PointLightHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set light(value) {
        if (this._objRef) {
            this._objRef.light = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = value;
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
}
ThPointLightHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointLightHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPointLightHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPointLightHelper, selector: "th-pointLightHelper", inputs: { type: "type", light: "light", color: "color", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPointLightHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointLightHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-pointLightHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPointLightHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], light: [{
                type: Input
            }], color: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPoints extends ThObject3D {
    getType() {
        return Points;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set morphTargetInfluences(value) {
        if (this._objRef) {
            this._objRef.morphTargetInfluences = value;
        }
    }
    set morphTargetDictionary(value) {
        if (this._objRef) {
            this._objRef.morphTargetDictionary = value;
        }
    }
    set geometry(value) {
        if (this._objRef) {
            this._objRef.geometry = value;
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
}
ThPoints.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPoints, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPoints.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPoints, selector: "th-points", inputs: { type: "type", morphTargetInfluences: "morphTargetInfluences", morphTargetDictionary: "morphTargetDictionary", geometry: "geometry", material: "material" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThPoints) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPoints, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-points',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThPoints) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], morphTargetInfluences: [{
                type: Input
            }], morphTargetDictionary: [{
                type: Input
            }], geometry: [{
                type: Input
            }], material: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPointsMaterial extends ThMaterial {
    getType() {
        return PointsMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set size(value) {
        if (this._objRef) {
            this._objRef.size = value;
        }
    }
    set sizeAttenuation(value) {
        if (this._objRef) {
            this._objRef.sizeAttenuation = value;
        }
    }
}
ThPointsMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointsMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPointsMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPointsMaterial, selector: "th-pointsMaterial", inputs: { type: "type", color: "color", map: "map", alphaMap: "alphaMap", size: "size", sizeAttenuation: "sizeAttenuation" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThPointsMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPointsMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-pointsMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThPointsMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], map: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], size: [{
                type: Input
            }], sizeAttenuation: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPolarGridHelper extends ThLineSegments {
    getType() {
        return PolarGridHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThPolarGridHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPolarGridHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPolarGridHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPolarGridHelper, selector: "th-polarGridHelper", inputs: { type: "type" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPolarGridHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPolarGridHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-polarGridHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPolarGridHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThPositionalAudio extends ThAudio {
    getType() {
        return PositionalAudio;
    }
    set panner(value) {
        if (this._objRef) {
            this._objRef.panner = value;
        }
    }
}
ThPositionalAudio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPositionalAudio, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPositionalAudio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThPositionalAudio, selector: "th-positionalAudio", inputs: { panner: "panner" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPositionalAudio) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThPositionalAudio, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-positionalAudio',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPositionalAudio) },
                    ],
                }]
        }], propDecorators: { panner: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThShaderMaterial extends ThMaterial {
    getType() {
        return ShaderMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    set uniforms(value) {
        if (this._objRef) {
            this._objRef.uniforms = value;
        }
    }
    set vertexShader(value) {
        if (this._objRef) {
            this._objRef.vertexShader = value;
        }
    }
    set fragmentShader(value) {
        if (this._objRef) {
            this._objRef.fragmentShader = value;
        }
    }
    set linewidth(value) {
        if (this._objRef) {
            this._objRef.linewidth = value;
        }
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    set lights(value) {
        if (this._objRef) {
            this._objRef.lights = value;
        }
    }
    set clipping(value) {
        if (this._objRef) {
            this._objRef.clipping = value;
        }
    }
    set derivatives(value) {
        if (this._objRef) {
            this._objRef.derivatives = value;
        }
    }
    set extensions(value) {
        if (this._objRef) {
            this._objRef.extensions = value;
        }
    }
    set defaultAttributeValues(value) {
        if (this._objRef) {
            this._objRef.defaultAttributeValues = value;
        }
    }
    set index0AttributeName(value) {
        if (this._objRef) {
            this._objRef.index0AttributeName = value;
        }
    }
    set uniformsNeedUpdate(value) {
        if (this._objRef) {
            this._objRef.uniformsNeedUpdate = value;
        }
    }
    set glslVersion(value) {
        if (this._objRef) {
            this._objRef.glslVersion = value;
        }
    }
    set isShaderMaterial(value) {
        if (this._objRef) {
            this._objRef.isShaderMaterial = value;
        }
    }
}
ThShaderMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShaderMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThShaderMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThShaderMaterial, selector: "th-shaderMaterial", inputs: { type: "type", defines: "defines", uniforms: "uniforms", vertexShader: "vertexShader", fragmentShader: "fragmentShader", linewidth: "linewidth", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", fog: "fog", lights: "lights", clipping: "clipping", derivatives: "derivatives", extensions: "extensions", defaultAttributeValues: "defaultAttributeValues", index0AttributeName: "index0AttributeName", uniformsNeedUpdate: "uniformsNeedUpdate", glslVersion: "glslVersion", isShaderMaterial: "isShaderMaterial" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThShaderMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShaderMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-shaderMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThShaderMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], vertexShader: [{
                type: Input
            }], fragmentShader: [{
                type: Input
            }], linewidth: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], fog: [{
                type: Input
            }], lights: [{
                type: Input
            }], clipping: [{
                type: Input
            }], derivatives: [{
                type: Input
            }], extensions: [{
                type: Input
            }], defaultAttributeValues: [{
                type: Input
            }], index0AttributeName: [{
                type: Input
            }], uniformsNeedUpdate: [{
                type: Input
            }], glslVersion: [{
                type: Input
            }], isShaderMaterial: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThRawShaderMaterial extends ThShaderMaterial {
    getType() {
        return RawShaderMaterial;
    }
}
ThRawShaderMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRawShaderMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThRawShaderMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRawShaderMaterial, selector: "th-rawShaderMaterial", providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThRawShaderMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRawShaderMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-rawShaderMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThRawShaderMaterial) },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThRectAreaLight extends ThLight {
    getType() {
        return RectAreaLight;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
    set power(value) {
        if (this._objRef) {
            this._objRef.power = value;
        }
    }
}
ThRectAreaLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRectAreaLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThRectAreaLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRectAreaLight, selector: "th-rectAreaLight", inputs: { type: "type", width: "width", height: "height", intensity: "intensity", power: "power" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThRectAreaLight) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRectAreaLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-rectAreaLight',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThRectAreaLight) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], intensity: [{
                type: Input
            }], power: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThRingGeometry extends ThBufferGeometry {
    getType() {
        return RingGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThRingGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRingGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThRingGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRingGeometry, selector: "th-ringGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThRingGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRingGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-ringGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThRingGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThRoundedBoxGeometry extends ThBoxGeometry {
    getType() {
        return RoundedBoxGeometry;
    }
}
ThRoundedBoxGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRoundedBoxGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThRoundedBoxGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThRoundedBoxGeometry, selector: "th-roundedBoxGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThRoundedBoxGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRoundedBoxGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-roundedBoxGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThRoundedBoxGeometry),
                        },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/ban-types */
class ThSAOPass extends ThPass {
    getType() {
        return SAOPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set supportsDepthTextureExtension(value) {
        if (this._objRef) {
            this._objRef.supportsDepthTextureExtension = value;
        }
    }
    set supportsNormalTexture(value) {
        if (this._objRef) {
            this._objRef.supportsNormalTexture = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    set saoRenderTarget(value) {
        if (this._objRef) {
            this._objRef.saoRenderTarget = value;
        }
    }
    set blurIntermediateRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurIntermediateRenderTarget = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    set depthRenderTarget(value) {
        if (this._objRef) {
            this._objRef.depthRenderTarget = value;
        }
    }
    set depthMaterial(value) {
        if (this._objRef) {
            this._objRef.depthMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set saoMaterial(value) {
        if (this._objRef) {
            this._objRef.saoMaterial = value;
        }
    }
    set vBlurMaterial(value) {
        if (this._objRef) {
            this._objRef.vBlurMaterial = value;
        }
    }
    set hBlurMaterial(value) {
        if (this._objRef) {
            this._objRef.hBlurMaterial = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set depthCopy(value) {
        if (this._objRef) {
            this._objRef.depthCopy = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set params(value) {
        if (this._objRef) {
            this._objRef.params = value;
        }
    }
}
ThSAOPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSAOPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSAOPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSAOPass, selector: "th-sAOPass", inputs: { scene: "scene", camera: "camera", supportsDepthTextureExtension: "supportsDepthTextureExtension", supportsNormalTexture: "supportsNormalTexture", originalClearColor: "originalClearColor", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", resolution: "resolution", saoRenderTarget: "saoRenderTarget", blurIntermediateRenderTarget: "blurIntermediateRenderTarget", beautyRenderTarget: "beautyRenderTarget", normalRenderTarget: "normalRenderTarget", depthRenderTarget: "depthRenderTarget", depthMaterial: "depthMaterial", normalMaterial: "normalMaterial", saoMaterial: "saoMaterial", vBlurMaterial: "vBlurMaterial", hBlurMaterial: "hBlurMaterial", materialCopy: "materialCopy", depthCopy: "depthCopy", fsQuad: "fsQuad", params: "params" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSAOPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSAOPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sAOPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSAOPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], supportsDepthTextureExtension: [{
                type: Input
            }], supportsNormalTexture: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], resolution: [{
                type: Input
            }], saoRenderTarget: [{
                type: Input
            }], blurIntermediateRenderTarget: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], depthRenderTarget: [{
                type: Input
            }], depthMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], saoMaterial: [{
                type: Input
            }], vBlurMaterial: [{
                type: Input
            }], hBlurMaterial: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], depthCopy: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], params: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThSavePass extends ThPass {
    getType() {
        return SavePass;
    }
    set textureID(value) {
        if (this._objRef) {
            this._objRef.textureID = value;
        }
    }
    set renderTarget(value) {
        if (this._objRef) {
            this._objRef.renderTarget = value;
        }
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThSavePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSavePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSavePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSavePass, selector: "th-savePass", inputs: { textureID: "textureID", renderTarget: "renderTarget", uniforms: "uniforms", material: "material", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSavePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSavePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-savePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSavePass) },
                    ],
                }]
        }], propDecorators: { textureID: [{
                type: Input
            }], renderTarget: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThShadowMaterial extends ThMaterial {
    getType() {
        return ShadowMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set transparent(value) {
        if (this._objRef) {
            this._objRef.transparent = value;
        }
    }
}
ThShadowMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShadowMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThShadowMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThShadowMaterial, selector: "th-shadowMaterial", inputs: { type: "type", color: "color", transparent: "transparent" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThShadowMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShadowMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-shadowMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThShadowMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], transparent: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThShapeGeometry extends ThBufferGeometry {
    getType() {
        return ShapeGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThShapeGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShapeGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThShapeGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThShapeGeometry, selector: "th-shapeGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThShapeGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThShapeGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-shapeGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThShapeGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSkeletonHelper extends ThLineSegments {
    getType() {
        return SkeletonHelper;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set bones(value) {
        if (this._objRef) {
            this._objRef.bones = value;
        }
    }
    set root(value) {
        if (this._objRef) {
            this._objRef.root = value;
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
}
ThSkeletonHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSkeletonHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSkeletonHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSkeletonHelper, selector: "th-skeletonHelper", inputs: { type: "type", bones: "bones", root: "root", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThSkeletonHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSkeletonHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-skeletonHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThSkeletonHelper) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], bones: [{
                type: Input
            }], root: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSkinnedMesh extends ThMesh {
    getType() {
        return SkinnedMesh;
    }
    set bindMode(value) {
        if (this._objRef) {
            this._objRef.bindMode = value;
        }
    }
    set bindMatrix(value) {
        if (this._objRef) {
            this._objRef.bindMatrix = applyValue(this._objRef.bindMatrix, value);
        }
    }
    set bindMatrixInverse(value) {
        if (this._objRef) {
            this._objRef.bindMatrixInverse = applyValue(this._objRef.bindMatrixInverse, value);
        }
    }
    set skeleton(value) {
        if (this._objRef) {
            this._objRef.skeleton = value;
        }
    }
}
ThSkinnedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSkinnedMesh, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSkinnedMesh.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSkinnedMesh, selector: "th-skinnedMesh", inputs: { bindMode: "bindMode", bindMatrix: "bindMatrix", bindMatrixInverse: "bindMatrixInverse", skeleton: "skeleton" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThSkinnedMesh) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSkinnedMesh, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-skinnedMesh',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThSkinnedMesh) },
                    ],
                }]
        }], propDecorators: { bindMode: [{
                type: Input
            }], bindMatrix: [{
                type: Input
            }], bindMatrixInverse: [{
                type: Input
            }], skeleton: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThSMAAPass extends ThPass {
    getType() {
        return SMAAPass;
    }
    set edgesRT(value) {
        if (this._objRef) {
            this._objRef.edgesRT = value;
        }
    }
    set weightsRT(value) {
        if (this._objRef) {
            this._objRef.weightsRT = value;
        }
    }
    set areaTexture(value) {
        if (this._objRef) {
            this._objRef.areaTexture = value;
        }
    }
    set searchTexture(value) {
        if (this._objRef) {
            this._objRef.searchTexture = value;
        }
    }
    set uniformsEdges(value) {
        if (this._objRef) {
            this._objRef.uniformsEdges = value;
        }
    }
    set materialEdges(value) {
        if (this._objRef) {
            this._objRef.materialEdges = value;
        }
    }
    set uniformsWeights(value) {
        if (this._objRef) {
            this._objRef.uniformsWeights = value;
        }
    }
    set materialWeights(value) {
        if (this._objRef) {
            this._objRef.materialWeights = value;
        }
    }
    set uniformsBlend(value) {
        if (this._objRef) {
            this._objRef.uniformsBlend = value;
        }
    }
    set materialBlend(value) {
        if (this._objRef) {
            this._objRef.materialBlend = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThSMAAPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSMAAPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSMAAPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSMAAPass, selector: "th-sMAAPass", inputs: { edgesRT: "edgesRT", weightsRT: "weightsRT", areaTexture: "areaTexture", searchTexture: "searchTexture", uniformsEdges: "uniformsEdges", materialEdges: "materialEdges", uniformsWeights: "uniformsWeights", materialWeights: "materialWeights", uniformsBlend: "uniformsBlend", materialBlend: "materialBlend", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSMAAPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSMAAPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sMAAPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSMAAPass) },
                    ],
                }]
        }], propDecorators: { edgesRT: [{
                type: Input
            }], weightsRT: [{
                type: Input
            }], areaTexture: [{
                type: Input
            }], searchTexture: [{
                type: Input
            }], uniformsEdges: [{
                type: Input
            }], materialEdges: [{
                type: Input
            }], uniformsWeights: [{
                type: Input
            }], materialWeights: [{
                type: Input
            }], uniformsBlend: [{
                type: Input
            }], materialBlend: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSphereGeometry extends ThBufferGeometry {
    getType() {
        return SphereGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThSphereGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSphereGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSphereGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSphereGeometry, selector: "th-sphereGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThSphereGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSphereGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sphereGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThSphereGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSpotLight extends ThLight {
    getType() {
        return SpotLight;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set position(value) {
        if (this._objRef) {
            this._objRef.position = applyValue(this._objRef.position, value);
        }
    }
    set target(value) {
        if (this._objRef) {
            this._objRef.target = value;
        }
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
    set distance(value) {
        if (this._objRef) {
            this._objRef.distance = value;
        }
    }
    set angle(value) {
        if (this._objRef) {
            this._objRef.angle = value;
        }
    }
    set decay(value) {
        if (this._objRef) {
            this._objRef.decay = value;
        }
    }
    set shadow(value) {
        if (this._objRef) {
            this._objRef.shadow = value;
        }
    }
    set power(value) {
        if (this._objRef) {
            this._objRef.power = value;
        }
    }
    set penumbra(value) {
        if (this._objRef) {
            this._objRef.penumbra = value;
        }
    }
}
ThSpotLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSpotLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSpotLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSpotLight, selector: "th-spotLight", inputs: { type: "type", position: "position", target: "target", intensity: "intensity", distance: "distance", angle: "angle", decay: "decay", shadow: "shadow", power: "power", penumbra: "penumbra" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThSpotLight) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSpotLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-spotLight',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThSpotLight) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], position: [{
                type: Input
            }], target: [{
                type: Input
            }], intensity: [{
                type: Input
            }], distance: [{
                type: Input
            }], angle: [{
                type: Input
            }], decay: [{
                type: Input
            }], shadow: [{
                type: Input
            }], power: [{
                type: Input
            }], penumbra: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSpotLightHelper extends ThObject3D {
    getType() {
        return SpotLightHelper;
    }
    set light(value) {
        if (this._objRef) {
            this._objRef.light = value;
        }
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = value;
        }
    }
    set cone(value) {
        if (this._objRef) {
            this._objRef.cone = value;
        }
    }
}
ThSpotLightHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSpotLightHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSpotLightHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSpotLightHelper, selector: "th-spotLightHelper", inputs: { light: "light", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate", color: "color", cone: "cone" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThSpotLightHelper) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSpotLightHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-spotLightHelper',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThSpotLightHelper) },
                    ],
                }]
        }], propDecorators: { light: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], color: [{
                type: Input
            }], cone: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSprite extends ThObject3D {
    getType() {
        return Sprite;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set geometry(value) {
        if (this._objRef) {
            this._objRef.geometry = value;
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set center(value) {
        if (this._objRef) {
            this._objRef.center = applyValue(this._objRef.center, value);
        }
    }
}
ThSprite.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSprite, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSprite.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSprite, selector: "th-sprite", inputs: { type: "type", geometry: "geometry", material: "material", center: "center" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSprite) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSprite, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sprite',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSprite) }],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], geometry: [{
                type: Input
            }], material: [{
                type: Input
            }], center: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThSpriteMaterial extends ThMaterial {
    getType() {
        return SpriteMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    set rotation(value) {
        if (this._objRef) {
            this._objRef.rotation = value;
        }
    }
    set sizeAttenuation(value) {
        if (this._objRef) {
            this._objRef.sizeAttenuation = value;
        }
    }
    set transparent(value) {
        if (this._objRef) {
            this._objRef.transparent = value;
        }
    }
}
ThSpriteMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSpriteMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSpriteMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSpriteMaterial, selector: "th-spriteMaterial", inputs: { type: "type", color: "color", map: "map", alphaMap: "alphaMap", rotation: "rotation", sizeAttenuation: "sizeAttenuation", transparent: "transparent" }, providers: [
        { provide: ThMaterial, useExisting: forwardRef(() => ThSpriteMaterial) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSpriteMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-spriteMaterial',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThMaterial, useExisting: forwardRef(() => ThSpriteMaterial) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], color: [{
                type: Input
            }], map: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], rotation: [{
                type: Input
            }], sizeAttenuation: [{
                type: Input
            }], transparent: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThSSAARenderPass extends ThPass {
    getType() {
        return SSAARenderPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set sampleLevel(value) {
        if (this._objRef) {
            this._objRef.sampleLevel = value;
        }
    }
    set unbiased(value) {
        if (this._objRef) {
            this._objRef.unbiased = value;
        }
    }
    set clearColor(value) {
        if (this._objRef) {
            this._objRef.clearColor = value;
        }
    }
    set clearAlpha(value) {
        if (this._objRef) {
            this._objRef.clearAlpha = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set sampleRenderTarget(value) {
        if (this._objRef) {
            this._objRef.sampleRenderTarget = value;
        }
    }
}
ThSSAARenderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSAARenderPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSAARenderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSAARenderPass, selector: "th-sSAARenderPass", inputs: { scene: "scene", camera: "camera", sampleLevel: "sampleLevel", unbiased: "unbiased", clearColor: "clearColor", clearAlpha: "clearAlpha", copyUniforms: "copyUniforms", copyMaterial: "copyMaterial", fsQuad: "fsQuad", sampleRenderTarget: "sampleRenderTarget" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSAARenderPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSAARenderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSAARenderPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSAARenderPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], sampleLevel: [{
                type: Input
            }], unbiased: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], clearAlpha: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], sampleRenderTarget: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThSSAOPass extends ThPass {
    getType() {
        return SSAOPass;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set kernelRadius(value) {
        if (this._objRef) {
            this._objRef.kernelRadius = value;
        }
    }
    set kernelSize(value) {
        if (this._objRef) {
            this._objRef.kernelSize = value;
        }
    }
    set kernel(value) {
        if (this._objRef) {
            this._objRef.kernel = value;
        }
    }
    set noiseTexture(value) {
        if (this._objRef) {
            this._objRef.noiseTexture = value;
        }
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    set minDistance(value) {
        if (this._objRef) {
            this._objRef.minDistance = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    set ssaoRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssaoRenderTarget = value;
        }
    }
    set blurRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget = value;
        }
    }
    set ssaoMaterial(value) {
        if (this._objRef) {
            this._objRef.ssaoMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set blurMaterial(value) {
        if (this._objRef) {
            this._objRef.blurMaterial = value;
        }
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
}
ThSSAOPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSAOPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSAOPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSAOPass, selector: "th-sSAOPass", inputs: { scene: "scene", camera: "camera", width: "width", height: "height", clear: "clear", kernelRadius: "kernelRadius", kernelSize: "kernelSize", kernel: "kernel", noiseTexture: "noiseTexture", output: "output", minDistance: "minDistance", maxDistance: "maxDistance", beautyRenderTarget: "beautyRenderTarget", normalRenderTarget: "normalRenderTarget", ssaoRenderTarget: "ssaoRenderTarget", blurRenderTarget: "blurRenderTarget", ssaoMaterial: "ssaoMaterial", normalMaterial: "normalMaterial", blurMaterial: "blurMaterial", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSAOPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSAOPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSAOPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSAOPass) },
                    ],
                }]
        }], propDecorators: { scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], kernelRadius: [{
                type: Input
            }], kernelSize: [{
                type: Input
            }], kernel: [{
                type: Input
            }], noiseTexture: [{
                type: Input
            }], output: [{
                type: Input
            }], minDistance: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], ssaoRenderTarget: [{
                type: Input
            }], blurRenderTarget: [{
                type: Input
            }], ssaoMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], blurMaterial: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThSSRPass extends ThPass {
    getType() {
        return SSRPass;
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set groundReflector(value) {
        if (this._objRef) {
            this._objRef.groundReflector = value;
        }
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set thickness(value) {
        if (this._objRef) {
            this._objRef.thickness = value;
        }
    }
    set tempColor(value) {
        if (this._objRef) {
            this._objRef.tempColor = applyValue(this._objRef.tempColor, value);
        }
    }
    set selective(value) {
        if (this._objRef) {
            this._objRef.selective = value;
        }
    }
    set blur(value) {
        if (this._objRef) {
            this._objRef.blur = value;
        }
    }
    set thickTolerance(value) {
        if (this._objRef) {
            this._objRef.thickTolerance = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set prevRenderTarget(value) {
        if (this._objRef) {
            this._objRef.prevRenderTarget = value;
        }
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    set metalnessRenderTarget(value) {
        if (this._objRef) {
            this._objRef.metalnessRenderTarget = value;
        }
    }
    set ssrRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssrRenderTarget = value;
        }
    }
    set blurRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget = value;
        }
    }
    set blurRenderTarget2(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget2 = value;
        }
    }
    set ssrMaterial(value) {
        if (this._objRef) {
            this._objRef.ssrMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set metalnessOnMaterial(value) {
        if (this._objRef) {
            this._objRef.metalnessOnMaterial = value;
        }
    }
    set metalnessOffMaterial(value) {
        if (this._objRef) {
            this._objRef.metalnessOffMaterial = value;
        }
    }
    set blurMaterial(value) {
        if (this._objRef) {
            this._objRef.blurMaterial = value;
        }
    }
    set blurMaterial2(value) {
        if (this._objRef) {
            this._objRef.blurMaterial2 = value;
        }
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    set dispose(value) {
        if (this._objRef) {
            this._objRef.dispose = value;
        }
    }
    set renderPass(value) {
        if (this._objRef) {
            this._objRef.renderPass = value;
        }
    }
    set renderOverride(value) {
        if (this._objRef) {
            this._objRef.renderOverride = value;
        }
    }
    set renderMetalness(value) {
        if (this._objRef) {
            this._objRef.renderMetalness = value;
        }
    }
}
ThSSRPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSRPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSRPass, selector: "th-sSRPass", inputs: { width: "width", height: "height", clear: "clear", renderer: "renderer", scene: "scene", camera: "camera", groundReflector: "groundReflector", opacity: "opacity", output: "output", maxDistance: "maxDistance", thickness: "thickness", tempColor: "tempColor", selective: "selective", blur: "blur", thickTolerance: "thickTolerance", beautyRenderTarget: "beautyRenderTarget", prevRenderTarget: "prevRenderTarget", normalRenderTarget: "normalRenderTarget", metalnessRenderTarget: "metalnessRenderTarget", ssrRenderTarget: "ssrRenderTarget", blurRenderTarget: "blurRenderTarget", blurRenderTarget2: "blurRenderTarget2", ssrMaterial: "ssrMaterial", normalMaterial: "normalMaterial", metalnessOnMaterial: "metalnessOnMaterial", metalnessOffMaterial: "metalnessOffMaterial", blurMaterial: "blurMaterial", blurMaterial2: "blurMaterial2", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor", dispose: "dispose", renderPass: "renderPass", renderOverride: "renderOverride", renderMetalness: "renderMetalness" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSRPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRPass) },
                    ],
                }]
        }], propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], renderer: [{
                type: Input
            }], scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], groundReflector: [{
                type: Input
            }], opacity: [{
                type: Input
            }], output: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], thickness: [{
                type: Input
            }], tempColor: [{
                type: Input
            }], selective: [{
                type: Input
            }], blur: [{
                type: Input
            }], thickTolerance: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], prevRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], metalnessRenderTarget: [{
                type: Input
            }], ssrRenderTarget: [{
                type: Input
            }], blurRenderTarget: [{
                type: Input
            }], blurRenderTarget2: [{
                type: Input
            }], ssrMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], metalnessOnMaterial: [{
                type: Input
            }], metalnessOffMaterial: [{
                type: Input
            }], blurMaterial: [{
                type: Input
            }], blurMaterial2: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], dispose: [{
                type: Input
            }], renderPass: [{
                type: Input
            }], renderOverride: [{
                type: Input
            }], renderMetalness: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThSSRrPass extends ThPass {
    getType() {
        return SSRrPass;
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    set ior(value) {
        if (this._objRef) {
            this._objRef.ior = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set surfDist(value) {
        if (this._objRef) {
            this._objRef.surfDist = value;
        }
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = applyValue(this._objRef.color, value);
        }
    }
    set seleects(value) {
        if (this._objRef) {
            this._objRef.seleects = value;
        }
    }
    set _specular(value) {
        if (this._objRef) {
            this._objRef._specular = value;
        }
    }
    set _fillHole(value) {
        if (this._objRef) {
            this._objRef._fillHole = value;
        }
    }
    set _infiniteThick(value) {
        if (this._objRef) {
            this._objRef._infiniteThick = value;
        }
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    set specularRenderTarget(value) {
        if (this._objRef) {
            this._objRef.specularRenderTarget = value;
        }
    }
    set normalSelectsRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalSelectsRenderTarget = value;
        }
    }
    set refractiveRenderTarget(value) {
        if (this._objRef) {
            this._objRef.refractiveRenderTarget = value;
        }
    }
    set ssrrRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssrrRenderTarget = value;
        }
    }
    set ssrrMaterial(value) {
        if (this._objRef) {
            this._objRef.ssrrMaterial = value;
        }
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    set refractiveOnMaterial(value) {
        if (this._objRef) {
            this._objRef.refractiveOnMaterial = value;
        }
    }
    set refractiveOffMaterial(value) {
        if (this._objRef) {
            this._objRef.refractiveOffMaterial = value;
        }
    }
    set specularMaterial(value) {
        if (this._objRef) {
            this._objRef.specularMaterial = value;
        }
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    set dispose(value) {
        if (this._objRef) {
            this._objRef.dispose = value;
        }
    }
    set render(value) {
        if (this._objRef) {
            this._objRef.render = value;
        }
    }
    set renderPass(value) {
        if (this._objRef) {
            this._objRef.renderPass = value;
        }
    }
    set renderOverride(value) {
        if (this._objRef) {
            this._objRef.renderOverride = value;
        }
    }
    set renderRefractive(value) {
        if (this._objRef) {
            this._objRef.renderRefractive = value;
        }
    }
    set setSize(value) {
        if (this._objRef) {
            this._objRef.setSize = value;
        }
    }
}
ThSSRrPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRrPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSRrPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThSSRrPass, selector: "th-sSRrPass", inputs: { width: "width", height: "height", clear: "clear", renderer: "renderer", scene: "scene", camera: "camera", output: "output", ior: "ior", maxDistance: "maxDistance", surfDist: "surfDist", color: "color", seleects: "seleects", _specular: "_specular", _fillHole: "_fillHole", _infiniteThick: "_infiniteThick", beautyRenderTarget: "beautyRenderTarget", specularRenderTarget: "specularRenderTarget", normalSelectsRenderTarget: "normalSelectsRenderTarget", refractiveRenderTarget: "refractiveRenderTarget", ssrrRenderTarget: "ssrrRenderTarget", ssrrMaterial: "ssrrMaterial", normalMaterial: "normalMaterial", refractiveOnMaterial: "refractiveOnMaterial", refractiveOffMaterial: "refractiveOffMaterial", specularMaterial: "specularMaterial", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor", dispose: "dispose", render: "render", renderPass: "renderPass", renderOverride: "renderOverride", renderRefractive: "renderRefractive", setSize: "setSize" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRrPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThSSRrPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSRrPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThSSRrPass) },
                    ],
                }]
        }], propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], renderer: [{
                type: Input
            }], scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], output: [{
                type: Input
            }], ior: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], surfDist: [{
                type: Input
            }], color: [{
                type: Input
            }], seleects: [{
                type: Input
            }], _specular: [{
                type: Input
            }], _fillHole: [{
                type: Input
            }], _infiniteThick: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], specularRenderTarget: [{
                type: Input
            }], normalSelectsRenderTarget: [{
                type: Input
            }], refractiveRenderTarget: [{
                type: Input
            }], ssrrRenderTarget: [{
                type: Input
            }], ssrrMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], refractiveOnMaterial: [{
                type: Input
            }], refractiveOffMaterial: [{
                type: Input
            }], specularMaterial: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], dispose: [{
                type: Input
            }], render: [{
                type: Input
            }], renderPass: [{
                type: Input
            }], renderOverride: [{
                type: Input
            }], renderRefractive: [{
                type: Input
            }], setSize: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThStereoCamera extends ThCamera {
    getType() {
        return StereoCamera;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set aspect(value) {
        if (this._objRef) {
            this._objRef.aspect = value;
        }
    }
    set eyeSep(value) {
        if (this._objRef) {
            this._objRef.eyeSep = value;
        }
    }
    set cameraL(value) {
        if (this._objRef) {
            this._objRef.cameraL = value;
        }
    }
    set cameraR(value) {
        if (this._objRef) {
            this._objRef.cameraR = value;
        }
    }
}
ThStereoCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThStereoCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThStereoCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThStereoCamera, selector: "th-stereoCamera", inputs: { type: "type", aspect: "aspect", eyeSep: "eyeSep", cameraL: "cameraL", cameraR: "cameraR" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThStereoCamera) },
        { provide: ThCamera, useExisting: forwardRef(() => ThStereoCamera) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThStereoCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-stereoCamera',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThStereoCamera) },
                        { provide: ThCamera, useExisting: forwardRef(() => ThStereoCamera) },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], aspect: [{
                type: Input
            }], eyeSep: [{
                type: Input
            }], cameraL: [{
                type: Input
            }], cameraR: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThTAARenderPass extends ThSSAARenderPass {
    getType() {
        return TAARenderPass;
    }
    set accumulate(value) {
        if (this._objRef) {
            this._objRef.accumulate = value;
        }
    }
}
ThTAARenderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTAARenderPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTAARenderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTAARenderPass, selector: "th-tAARenderPass", inputs: { accumulate: "accumulate" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThTAARenderPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTAARenderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-tAARenderPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThTAARenderPass) },
                    ],
                }]
        }], propDecorators: { accumulate: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTeapotGeometry extends ThBufferGeometry {
    getType() {
        return TeapotGeometry;
    }
}
ThTeapotGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTeapotGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTeapotGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTeapotGeometry, selector: "th-teapotGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThTeapotGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTeapotGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-teapotGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThTeapotGeometry),
                        },
                    ],
                }]
        }] });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTetrahedronGeometry extends ThPolyhedronGeometry {
    getType() {
        return TetrahedronGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
}
ThTetrahedronGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTetrahedronGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTetrahedronGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTetrahedronGeometry, selector: "th-tetrahedronGeometry", inputs: { type: "type" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThTetrahedronGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTetrahedronGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-tetrahedronGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThTetrahedronGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTextGeometry extends ThExtrudeGeometry {
    getType() {
        return TextGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThTextGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTextGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTextGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTextGeometry, selector: "th-textGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThTextGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTextGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-textGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThTextGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThTexturePass extends ThPass {
    getType() {
        return TexturePass;
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    set uniforms(map) {
        if (this._objRef) {
            Object.assign(this._objRef.uniforms, map);
        }
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThTexturePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTexturePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTexturePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTexturePass, selector: "th-texturePass", inputs: { map: "map", opacity: "opacity", uniforms: "uniforms", material: "material", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThTexturePass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTexturePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-texturePass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThTexturePass) },
                    ],
                }]
        }], propDecorators: { map: [{
                type: Input
            }], opacity: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], material: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTorusGeometry extends ThBufferGeometry {
    getType() {
        return TorusGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThTorusGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTorusGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTorusGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTorusGeometry, selector: "th-torusGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThTorusGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTorusGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-torusGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThTorusGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTorusKnotGeometry extends ThBufferGeometry {
    getType() {
        return TorusKnotGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThTorusKnotGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTorusKnotGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTorusKnotGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTorusKnotGeometry, selector: "th-torusKnotGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThTorusKnotGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTorusKnotGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-torusKnotGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThTorusKnotGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTrackballControls extends ThControlBase {
    getType() {
        return TrackballControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set screen(value) {
        if (this._objRef) {
            this._objRef.screen = value;
        }
    }
    set rotateSpeed(value) {
        if (this._objRef) {
            this._objRef.rotateSpeed = value;
        }
    }
    set zoomSpeed(value) {
        if (this._objRef) {
            this._objRef.zoomSpeed = value;
        }
    }
    set panSpeed(value) {
        if (this._objRef) {
            this._objRef.panSpeed = value;
        }
    }
    set noRotate(value) {
        if (this._objRef) {
            this._objRef.noRotate = value;
        }
    }
    set noZoom(value) {
        if (this._objRef) {
            this._objRef.noZoom = value;
        }
    }
    set noPan(value) {
        if (this._objRef) {
            this._objRef.noPan = value;
        }
    }
    set noRoll(value) {
        if (this._objRef) {
            this._objRef.noRoll = value;
        }
    }
    set staticMoving(value) {
        if (this._objRef) {
            this._objRef.staticMoving = value;
        }
    }
    set dynamicDampingFactor(value) {
        if (this._objRef) {
            this._objRef.dynamicDampingFactor = value;
        }
    }
    set minDistance(value) {
        if (this._objRef) {
            this._objRef.minDistance = value;
        }
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    set keys(value) {
        if (this._objRef) {
            this._objRef.keys = value;
        }
    }
    set mouseButtons(value) {
        if (this._objRef) {
            this._objRef.mouseButtons = value;
        }
    }
    set target(value) {
        if (this._objRef) {
            this._objRef.target = applyValue(this._objRef.target, value);
        }
    }
    set position0(value) {
        if (this._objRef) {
            this._objRef.position0 = applyValue(this._objRef.position0, value);
        }
    }
    set target0(value) {
        if (this._objRef) {
            this._objRef.target0 = applyValue(this._objRef.target0, value);
        }
    }
    set up0(value) {
        if (this._objRef) {
            this._objRef.up0 = applyValue(this._objRef.up0, value);
        }
    }
}
ThTrackballControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTrackballControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTrackballControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTrackballControls, selector: "th-trackballControls", inputs: { object: "object", domElement: "domElement", enabled: "enabled", screen: "screen", rotateSpeed: "rotateSpeed", zoomSpeed: "zoomSpeed", panSpeed: "panSpeed", noRotate: "noRotate", noZoom: "noZoom", noPan: "noPan", noRoll: "noRoll", staticMoving: "staticMoving", dynamicDampingFactor: "dynamicDampingFactor", minDistance: "minDistance", maxDistance: "maxDistance", keys: "keys", mouseButtons: "mouseButtons", target: "target", position0: "position0", target0: "target0", up0: "up0" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThTrackballControls),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTrackballControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-trackballControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThTrackballControls),
                        },
                    ],
                }]
        }], propDecorators: { object: [{
                type: Input
            }], domElement: [{
                type: Input
            }], enabled: [{
                type: Input
            }], screen: [{
                type: Input
            }], rotateSpeed: [{
                type: Input
            }], zoomSpeed: [{
                type: Input
            }], panSpeed: [{
                type: Input
            }], noRotate: [{
                type: Input
            }], noZoom: [{
                type: Input
            }], noPan: [{
                type: Input
            }], noRoll: [{
                type: Input
            }], staticMoving: [{
                type: Input
            }], dynamicDampingFactor: [{
                type: Input
            }], minDistance: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], keys: [{
                type: Input
            }], mouseButtons: [{
                type: Input
            }], target: [{
                type: Input
            }], position0: [{
                type: Input
            }], target0: [{
                type: Input
            }], up0: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTransformControls extends ThObject3D {
    getType() {
        return TransformControls;
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    set axis(value) {
        if (this._objRef) {
            this._objRef.axis = value;
        }
    }
    set mode(value) {
        if (this._objRef) {
            this._objRef.mode = value;
        }
    }
    set translationSnap(value) {
        if (this._objRef) {
            this._objRef.translationSnap = value;
        }
    }
    set rotationSnap(value) {
        if (this._objRef) {
            this._objRef.rotationSnap = value;
        }
    }
    set space(value) {
        if (this._objRef) {
            this._objRef.space = value;
        }
    }
    set size(value) {
        if (this._objRef) {
            this._objRef.size = value;
        }
    }
    set dragging(value) {
        if (this._objRef) {
            this._objRef.dragging = value;
        }
    }
    set showX(value) {
        if (this._objRef) {
            this._objRef.showX = value;
        }
    }
    set showY(value) {
        if (this._objRef) {
            this._objRef.showY = value;
        }
    }
    set showZ(value) {
        if (this._objRef) {
            this._objRef.showZ = value;
        }
    }
    set mouseButtons(value) {
        if (this._objRef) {
            this._objRef.mouseButtons = value;
        }
    }
}
ThTransformControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTransformControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTransformControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTransformControls, selector: "th-transformControls", inputs: { domElement: "domElement", camera: "camera", object: "object", enabled: "enabled", axis: "axis", mode: "mode", translationSnap: "translationSnap", rotationSnap: "rotationSnap", space: "space", size: "size", dragging: "dragging", showX: "showX", showY: "showY", showZ: "showZ", mouseButtons: "mouseButtons" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThTransformControls),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTransformControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-transformControls',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThTransformControls),
                        },
                    ],
                }]
        }], propDecorators: { domElement: [{
                type: Input
            }], camera: [{
                type: Input
            }], object: [{
                type: Input
            }], enabled: [{
                type: Input
            }], axis: [{
                type: Input
            }], mode: [{
                type: Input
            }], translationSnap: [{
                type: Input
            }], rotationSnap: [{
                type: Input
            }], space: [{
                type: Input
            }], size: [{
                type: Input
            }], dragging: [{
                type: Input
            }], showX: [{
                type: Input
            }], showY: [{
                type: Input
            }], showZ: [{
                type: Input
            }], mouseButtons: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThTubeGeometry extends ThBufferGeometry {
    getType() {
        return TubeGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
    set tangents(value) {
        if (this._objRef) {
            this._objRef.tangents = value;
        }
    }
    set normals(value) {
        if (this._objRef) {
            this._objRef.normals = value;
        }
    }
    set binormals(value) {
        if (this._objRef) {
            this._objRef.binormals = value;
        }
    }
}
ThTubeGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTubeGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTubeGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThTubeGeometry, selector: "th-tubeGeometry", inputs: { type: "type", parameters: "parameters", tangents: "tangents", normals: "normals", binormals: "binormals" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThTubeGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThTubeGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-tubeGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThTubeGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }], tangents: [{
                type: Input
            }], normals: [{
                type: Input
            }], binormals: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class ThUnrealBloomPass extends ThPass {
    getType() {
        return UnrealBloomPass;
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    set strength(value) {
        if (this._objRef) {
            this._objRef.strength = value;
        }
    }
    set radius(value) {
        if (this._objRef) {
            this._objRef.radius = value;
        }
    }
    set threshold(value) {
        if (this._objRef) {
            this._objRef.threshold = value;
        }
    }
    set clearColor(value) {
        if (this._objRef) {
            this._objRef.clearColor = applyValue(this._objRef.clearColor, value);
        }
    }
    set renderTargetsHorizontal(value) {
        if (this._objRef) {
            this._objRef.renderTargetsHorizontal = value;
        }
    }
    set renderTargetsVertical(value) {
        if (this._objRef) {
            this._objRef.renderTargetsVertical = value;
        }
    }
    set nMips(value) {
        if (this._objRef) {
            this._objRef.nMips = value;
        }
    }
    set renderTargetBright(value) {
        if (this._objRef) {
            this._objRef.renderTargetBright = value;
        }
    }
    set highPassUniforms(value) {
        if (this._objRef) {
            this._objRef.highPassUniforms = value;
        }
    }
    set materialHighPassFilter(value) {
        if (this._objRef) {
            this._objRef.materialHighPassFilter = value;
        }
    }
    set separableBlurMaterials(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterials = value;
        }
    }
    set compositeMaterial(value) {
        if (this._objRef) {
            this._objRef.compositeMaterial = value;
        }
    }
    set bloomTintColors(value) {
        if (this._objRef) {
            this._objRef.bloomTintColors = value;
        }
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    set basic(value) {
        if (this._objRef) {
            this._objRef.basic = value;
        }
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
}
ThUnrealBloomPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThUnrealBloomPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThUnrealBloomPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThUnrealBloomPass, selector: "th-unrealBloomPass", inputs: { resolution: "resolution", strength: "strength", radius: "radius", threshold: "threshold", clearColor: "clearColor", renderTargetsHorizontal: "renderTargetsHorizontal", renderTargetsVertical: "renderTargetsVertical", nMips: "nMips", renderTargetBright: "renderTargetBright", highPassUniforms: "highPassUniforms", materialHighPassFilter: "materialHighPassFilter", separableBlurMaterials: "separableBlurMaterials", compositeMaterial: "compositeMaterial", bloomTintColors: "bloomTintColors", copyUniforms: "copyUniforms", materialCopy: "materialCopy", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", basic: "basic", fsQuad: "fsQuad" }, providers: [
        { provide: ThPassBase, useExisting: forwardRef(() => ThUnrealBloomPass) },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThUnrealBloomPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-unrealBloomPass',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThPassBase, useExisting: forwardRef(() => ThUnrealBloomPass) },
                    ],
                }]
        }], propDecorators: { resolution: [{
                type: Input
            }], strength: [{
                type: Input
            }], radius: [{
                type: Input
            }], threshold: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], renderTargetsHorizontal: [{
                type: Input
            }], renderTargetsVertical: [{
                type: Input
            }], nMips: [{
                type: Input
            }], renderTargetBright: [{
                type: Input
            }], highPassUniforms: [{
                type: Input
            }], materialHighPassFilter: [{
                type: Input
            }], separableBlurMaterials: [{
                type: Input
            }], compositeMaterial: [{
                type: Input
            }], bloomTintColors: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], basic: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/naming-convention */
class ThWireframeGeometry extends ThBufferGeometry {
    getType() {
        return WireframeGeometry;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    set parameters(value) {
        if (this._objRef) {
            this._objRef.parameters = value;
        }
    }
}
ThWireframeGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThWireframeGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThWireframeGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: ThWireframeGeometry, selector: "th-wireframeGeometry", inputs: { type: "type", parameters: "parameters" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThWireframeGeometry),
        },
    ], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThWireframeGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-wireframeGeometry',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThWireframeGeometry),
                        },
                    ],
                }]
        }], propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }] } });

class NgxThreeGeneratedModule {
}
NgxThreeGeneratedModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeGeneratedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxThreeGeneratedModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeGeneratedModule, declarations: [ThAudioListener,
        ThPositionalAudio,
        ThAudio,
        ThStereoCamera,
        ThPerspectiveCamera,
        ThOrthographicCamera,
        ThCubeCamera,
        ThArrayCamera,
        ThCamera,
        ThObject3D,
        ThSpotLightHelper,
        ThSkeletonHelper,
        ThPointLightHelper,
        ThHemisphereLightHelper,
        ThGridHelper,
        ThPolarGridHelper,
        ThDirectionalLightHelper,
        ThCameraHelper,
        ThBoxHelper,
        ThBox3Helper,
        ThPlaneHelper,
        ThArrowHelper,
        ThAxesHelper,
        ThSpotLight,
        ThPointLight,
        ThRectAreaLight,
        ThHemisphereLight,
        ThDirectionalLight,
        ThAmbientLight,
        ThLight,
        ThAmbientLightProbe,
        ThHemisphereLightProbe,
        ThLightProbe,
        ThSprite,
        ThLOD,
        ThInstancedMesh,
        ThSkinnedMesh,
        ThBone,
        ThMesh,
        ThLineSegments,
        ThLineLoop,
        ThLine,
        ThPoints,
        ThGroup,
        ThScene,
        ThShadowMaterial,
        ThSpriteMaterial,
        ThRawShaderMaterial,
        ThShaderMaterial,
        ThPointsMaterial,
        ThMeshPhysicalMaterial,
        ThMeshStandardMaterial,
        ThMeshPhongMaterial,
        ThMeshToonMaterial,
        ThMeshNormalMaterial,
        ThMeshLambertMaterial,
        ThMeshDepthMaterial,
        ThMeshDistanceMaterial,
        ThMeshBasicMaterial,
        ThMeshMatcapMaterial,
        ThLineDashedMaterial,
        ThLineBasicMaterial,
        ThMaterial,
        ThInstancedBufferGeometry,
        ThBufferGeometry,
        ThBoxGeometry,
        ThCircleGeometry,
        ThConeGeometry,
        ThCylinderGeometry,
        ThDodecahedronGeometry,
        ThEdgesGeometry,
        ThExtrudeGeometry,
        ThIcosahedronGeometry,
        ThLatheGeometry,
        ThOctahedronGeometry,
        ThPlaneGeometry,
        ThPolyhedronGeometry,
        ThRingGeometry,
        ThShapeGeometry,
        ThSphereGeometry,
        ThTetrahedronGeometry,
        ThTorusGeometry,
        ThTorusKnotGeometry,
        ThTubeGeometry,
        ThWireframeGeometry,
        ThBoxLineGeometry,
        ThConvexGeometry,
        ThDecalGeometry,
        ThParametricGeometry,
        ThRoundedBoxGeometry,
        ThTeapotGeometry,
        ThTextGeometry,
        ThDragControls,
        ThFirstPersonControls,
        ThFlyControls,
        ThOrbitControls,
        ThMapControls,
        ThPointerLockControls,
        ThTrackballControls,
        ThTransformControls,
        ThPass,
        ThEffectComposerGen,
        ThEffectComposer,
        ThAdaptiveToneMappingPass,
        ThAfterimagePass,
        ThBloomPass,
        ThBokehPass,
        ThClearPass,
        ThCubeTexturePass,
        ThDotScreenPass,
        ThFilmPass,
        ThGlitchPass,
        ThHalftonePass,
        ThLUTPass,
        ThMaskPass,
        ThClearMaskPass,
        ThOutlinePass,
        ThRenderPassGen,
        ThRenderPass,
        ThSAOPass,
        ThSMAAPass,
        ThSSAARenderPass,
        ThSSAOPass,
        ThSSRPass,
        ThSSRrPass,
        ThSavePass,
        ThShaderPass,
        ThTAARenderPass,
        ThTexturePass,
        ThUnrealBloomPass], exports: [ThAudioListener,
        ThPositionalAudio,
        ThAudio,
        ThStereoCamera,
        ThPerspectiveCamera,
        ThOrthographicCamera,
        ThCubeCamera,
        ThArrayCamera,
        ThCamera,
        ThObject3D,
        ThSpotLightHelper,
        ThSkeletonHelper,
        ThPointLightHelper,
        ThHemisphereLightHelper,
        ThGridHelper,
        ThPolarGridHelper,
        ThDirectionalLightHelper,
        ThCameraHelper,
        ThBoxHelper,
        ThBox3Helper,
        ThPlaneHelper,
        ThArrowHelper,
        ThAxesHelper,
        ThSpotLight,
        ThPointLight,
        ThRectAreaLight,
        ThHemisphereLight,
        ThDirectionalLight,
        ThAmbientLight,
        ThLight,
        ThAmbientLightProbe,
        ThHemisphereLightProbe,
        ThLightProbe,
        ThSprite,
        ThLOD,
        ThInstancedMesh,
        ThSkinnedMesh,
        ThBone,
        ThMesh,
        ThLineSegments,
        ThLineLoop,
        ThLine,
        ThPoints,
        ThGroup,
        ThScene,
        ThShadowMaterial,
        ThSpriteMaterial,
        ThRawShaderMaterial,
        ThShaderMaterial,
        ThPointsMaterial,
        ThMeshPhysicalMaterial,
        ThMeshStandardMaterial,
        ThMeshPhongMaterial,
        ThMeshToonMaterial,
        ThMeshNormalMaterial,
        ThMeshLambertMaterial,
        ThMeshDepthMaterial,
        ThMeshDistanceMaterial,
        ThMeshBasicMaterial,
        ThMeshMatcapMaterial,
        ThLineDashedMaterial,
        ThLineBasicMaterial,
        ThMaterial,
        ThInstancedBufferGeometry,
        ThBufferGeometry,
        ThBoxGeometry,
        ThCircleGeometry,
        ThConeGeometry,
        ThCylinderGeometry,
        ThDodecahedronGeometry,
        ThEdgesGeometry,
        ThExtrudeGeometry,
        ThIcosahedronGeometry,
        ThLatheGeometry,
        ThOctahedronGeometry,
        ThPlaneGeometry,
        ThPolyhedronGeometry,
        ThRingGeometry,
        ThShapeGeometry,
        ThSphereGeometry,
        ThTetrahedronGeometry,
        ThTorusGeometry,
        ThTorusKnotGeometry,
        ThTubeGeometry,
        ThWireframeGeometry,
        ThBoxLineGeometry,
        ThConvexGeometry,
        ThDecalGeometry,
        ThParametricGeometry,
        ThRoundedBoxGeometry,
        ThTeapotGeometry,
        ThTextGeometry,
        ThDragControls,
        ThFirstPersonControls,
        ThFlyControls,
        ThOrbitControls,
        ThMapControls,
        ThPointerLockControls,
        ThTrackballControls,
        ThTransformControls,
        ThPass,
        ThEffectComposerGen,
        ThEffectComposer,
        ThAdaptiveToneMappingPass,
        ThAfterimagePass,
        ThBloomPass,
        ThBokehPass,
        ThClearPass,
        ThCubeTexturePass,
        ThDotScreenPass,
        ThFilmPass,
        ThGlitchPass,
        ThHalftonePass,
        ThLUTPass,
        ThMaskPass,
        ThClearMaskPass,
        ThOutlinePass,
        ThRenderPassGen,
        ThRenderPass,
        ThSAOPass,
        ThSMAAPass,
        ThSSAARenderPass,
        ThSSAOPass,
        ThSSRPass,
        ThSSRrPass,
        ThSavePass,
        ThShaderPass,
        ThTAARenderPass,
        ThTexturePass,
        ThUnrealBloomPass] });
NgxThreeGeneratedModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeGeneratedModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeGeneratedModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ThAudioListener,
                        ThPositionalAudio,
                        ThAudio,
                        ThStereoCamera,
                        ThPerspectiveCamera,
                        ThOrthographicCamera,
                        ThCubeCamera,
                        ThArrayCamera,
                        ThCamera,
                        ThObject3D,
                        ThSpotLightHelper,
                        ThSkeletonHelper,
                        ThPointLightHelper,
                        ThHemisphereLightHelper,
                        ThGridHelper,
                        ThPolarGridHelper,
                        ThDirectionalLightHelper,
                        ThCameraHelper,
                        ThBoxHelper,
                        ThBox3Helper,
                        ThPlaneHelper,
                        ThArrowHelper,
                        ThAxesHelper,
                        ThSpotLight,
                        ThPointLight,
                        ThRectAreaLight,
                        ThHemisphereLight,
                        ThDirectionalLight,
                        ThAmbientLight,
                        ThLight,
                        ThAmbientLightProbe,
                        ThHemisphereLightProbe,
                        ThLightProbe,
                        ThSprite,
                        ThLOD,
                        ThInstancedMesh,
                        ThSkinnedMesh,
                        ThBone,
                        ThMesh,
                        ThLineSegments,
                        ThLineLoop,
                        ThLine,
                        ThPoints,
                        ThGroup,
                        ThScene,
                        ThShadowMaterial,
                        ThSpriteMaterial,
                        ThRawShaderMaterial,
                        ThShaderMaterial,
                        ThPointsMaterial,
                        ThMeshPhysicalMaterial,
                        ThMeshStandardMaterial,
                        ThMeshPhongMaterial,
                        ThMeshToonMaterial,
                        ThMeshNormalMaterial,
                        ThMeshLambertMaterial,
                        ThMeshDepthMaterial,
                        ThMeshDistanceMaterial,
                        ThMeshBasicMaterial,
                        ThMeshMatcapMaterial,
                        ThLineDashedMaterial,
                        ThLineBasicMaterial,
                        ThMaterial,
                        ThInstancedBufferGeometry,
                        ThBufferGeometry,
                        ThBoxGeometry,
                        ThCircleGeometry,
                        ThConeGeometry,
                        ThCylinderGeometry,
                        ThDodecahedronGeometry,
                        ThEdgesGeometry,
                        ThExtrudeGeometry,
                        ThIcosahedronGeometry,
                        ThLatheGeometry,
                        ThOctahedronGeometry,
                        ThPlaneGeometry,
                        ThPolyhedronGeometry,
                        ThRingGeometry,
                        ThShapeGeometry,
                        ThSphereGeometry,
                        ThTetrahedronGeometry,
                        ThTorusGeometry,
                        ThTorusKnotGeometry,
                        ThTubeGeometry,
                        ThWireframeGeometry,
                        ThBoxLineGeometry,
                        ThConvexGeometry,
                        ThDecalGeometry,
                        ThParametricGeometry,
                        ThRoundedBoxGeometry,
                        ThTeapotGeometry,
                        ThTextGeometry,
                        ThDragControls,
                        ThFirstPersonControls,
                        ThFlyControls,
                        ThOrbitControls,
                        ThMapControls,
                        ThPointerLockControls,
                        ThTrackballControls,
                        ThTransformControls,
                        ThPass,
                        ThEffectComposerGen,
                        ThEffectComposer,
                        ThAdaptiveToneMappingPass,
                        ThAfterimagePass,
                        ThBloomPass,
                        ThBokehPass,
                        ThClearPass,
                        ThCubeTexturePass,
                        ThDotScreenPass,
                        ThFilmPass,
                        ThGlitchPass,
                        ThHalftonePass,
                        ThLUTPass,
                        ThMaskPass,
                        ThClearMaskPass,
                        ThOutlinePass,
                        ThRenderPassGen,
                        ThRenderPass,
                        ThSAOPass,
                        ThSMAAPass,
                        ThSSAARenderPass,
                        ThSSAOPass,
                        ThSSRPass,
                        ThSSRrPass,
                        ThSavePass,
                        ThShaderPass,
                        ThTAARenderPass,
                        ThTexturePass,
                        ThUnrealBloomPass,
                    ],
                    exports: [
                        ThAudioListener,
                        ThPositionalAudio,
                        ThAudio,
                        ThStereoCamera,
                        ThPerspectiveCamera,
                        ThOrthographicCamera,
                        ThCubeCamera,
                        ThArrayCamera,
                        ThCamera,
                        ThObject3D,
                        ThSpotLightHelper,
                        ThSkeletonHelper,
                        ThPointLightHelper,
                        ThHemisphereLightHelper,
                        ThGridHelper,
                        ThPolarGridHelper,
                        ThDirectionalLightHelper,
                        ThCameraHelper,
                        ThBoxHelper,
                        ThBox3Helper,
                        ThPlaneHelper,
                        ThArrowHelper,
                        ThAxesHelper,
                        ThSpotLight,
                        ThPointLight,
                        ThRectAreaLight,
                        ThHemisphereLight,
                        ThDirectionalLight,
                        ThAmbientLight,
                        ThLight,
                        ThAmbientLightProbe,
                        ThHemisphereLightProbe,
                        ThLightProbe,
                        ThSprite,
                        ThLOD,
                        ThInstancedMesh,
                        ThSkinnedMesh,
                        ThBone,
                        ThMesh,
                        ThLineSegments,
                        ThLineLoop,
                        ThLine,
                        ThPoints,
                        ThGroup,
                        ThScene,
                        ThShadowMaterial,
                        ThSpriteMaterial,
                        ThRawShaderMaterial,
                        ThShaderMaterial,
                        ThPointsMaterial,
                        ThMeshPhysicalMaterial,
                        ThMeshStandardMaterial,
                        ThMeshPhongMaterial,
                        ThMeshToonMaterial,
                        ThMeshNormalMaterial,
                        ThMeshLambertMaterial,
                        ThMeshDepthMaterial,
                        ThMeshDistanceMaterial,
                        ThMeshBasicMaterial,
                        ThMeshMatcapMaterial,
                        ThLineDashedMaterial,
                        ThLineBasicMaterial,
                        ThMaterial,
                        ThInstancedBufferGeometry,
                        ThBufferGeometry,
                        ThBoxGeometry,
                        ThCircleGeometry,
                        ThConeGeometry,
                        ThCylinderGeometry,
                        ThDodecahedronGeometry,
                        ThEdgesGeometry,
                        ThExtrudeGeometry,
                        ThIcosahedronGeometry,
                        ThLatheGeometry,
                        ThOctahedronGeometry,
                        ThPlaneGeometry,
                        ThPolyhedronGeometry,
                        ThRingGeometry,
                        ThShapeGeometry,
                        ThSphereGeometry,
                        ThTetrahedronGeometry,
                        ThTorusGeometry,
                        ThTorusKnotGeometry,
                        ThTubeGeometry,
                        ThWireframeGeometry,
                        ThBoxLineGeometry,
                        ThConvexGeometry,
                        ThDecalGeometry,
                        ThParametricGeometry,
                        ThRoundedBoxGeometry,
                        ThTeapotGeometry,
                        ThTextGeometry,
                        ThDragControls,
                        ThFirstPersonControls,
                        ThFlyControls,
                        ThOrbitControls,
                        ThMapControls,
                        ThPointerLockControls,
                        ThTrackballControls,
                        ThTransformControls,
                        ThPass,
                        ThEffectComposerGen,
                        ThEffectComposer,
                        ThAdaptiveToneMappingPass,
                        ThAfterimagePass,
                        ThBloomPass,
                        ThBokehPass,
                        ThClearPass,
                        ThCubeTexturePass,
                        ThDotScreenPass,
                        ThFilmPass,
                        ThGlitchPass,
                        ThHalftonePass,
                        ThLUTPass,
                        ThMaskPass,
                        ThClearMaskPass,
                        ThOutlinePass,
                        ThRenderPassGen,
                        ThRenderPass,
                        ThSAOPass,
                        ThSMAAPass,
                        ThSSAARenderPass,
                        ThSSAOPass,
                        ThSSRPass,
                        ThSSRrPass,
                        ThSavePass,
                        ThShaderPass,
                        ThTAARenderPass,
                        ThTexturePass,
                        ThUnrealBloomPass,
                    ],
                }]
        }] });

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class ThLoader {
    constructor(host, zone) {
        this.host = host;
        this.zone = zone;
        this.initialized = false;
        this.proxy = createLazyObject3DProxy();
        host.objRef = this.proxy;
    }
    set url(url) {
        this._url = url;
        this.loadAsync();
    }
    get url() {
        return this._url;
    }
    ngOnInit() {
        this.initialized = true;
        this.loadAsync();
        // this.zone.runOutsideAngular(() => );
    }
    get onLoaded() {
        if (!this.onLoaded$) {
            this.onLoaded$ = new EventEmitter();
        }
        return this.onLoaded$;
    }
    get onProgress() {
        if (!this.onProgress$) {
            this.onProgress$ = new EventEmitter();
        }
        return this.onProgress$;
    }
    loadAsync() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.initialized) {
                return;
            }
            const loaderFn = this.loaderFn;
            if (!loaderFn) {
                throw new Error('Missing loader Function ( @Input() loaderFn )');
            }
            if (!this.proxy) {
                return;
            }
            const onProgress = this.onProgress$
                ? (progress) => {
                    var _a;
                    (_a = this.onProgress$) === null || _a === void 0 ? void 0 : _a.next(progress);
                }
                : undefined;
            let loaderResult;
            const onLoaded = this.onLoaded$
                ? (result) => {
                    loaderResult = result;
                }
                : undefined;
            const object = yield this.zone.runOutsideAngular(() => loaderFn(this.url, onProgress, onLoaded));
            this.proxy.objRef = object;
            // add the new object to the parent and
            // emit a loaded event directly on the three.js object and on objRef$
            this.host.objRef = this.proxy;
            if (this.onLoaded$ && loaderResult !== undefined) {
                (_a = this.onLoaded$) === null || _a === void 0 ? void 0 : _a.next(loaderResult);
            }
            return object;
        });
    }
}
ThLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLoader, deps: [{ token: ThObject3D, host: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
ThLoader.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: ThLoader, selector: "[load]", inputs: { loaderFn: "loaderFn", url: "url" }, outputs: { onLoaded: "onLoaded", onProgress: "onProgress" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThLoader, decorators: [{
            type: Directive,
            args: [{
                    selector: '[load]'
                }]
        }], ctorParameters: function () {
        return [{ type: ThObject3D, decorators: [{
                        type: Host
                    }] }, { type: i0.NgZone }];
    }, propDecorators: { loaderFn: [{
                type: Input
            }], url: [{
                type: Input
            }], onLoaded: [{
                type: Output
            }], onProgress: [{
                type: Output
            }] } });

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class ThGLTFLoader extends ThLoader {
    constructor() {
        super(...arguments);
        this.loaderFn = (input, onProgress, onLoaded) => __awaiter(this, void 0, void 0, function* () {
            if (!input) {
                throw new Error('missing input url');
            }
            const loader = new GLTFLoader();
            const result = yield loader.loadAsync(input, onProgress);
            if (onLoaded) {
                onLoaded(result);
            }
            return result.scene;
        });
    }
}
ThGLTFLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGLTFLoader, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ThGLTFLoader.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: ThGLTFLoader, selector: "[loadGLTF]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThGLTFLoader, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loadGLTF]'
                }]
        }] });

/**
 * constructs a color of it's constructor parameters
 */
class ColorPipe {
    /* ContructorProperties does not support multiple constructors --> */
    transform(args) {
        if (Array.isArray(args)) {
            return new Color(...args);
        }
        else {
            return new Color(args);
        }
    }
}
ColorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ColorPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ColorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ColorPipe, name: "color" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ColorPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'color',
                    pure: true
                }]
        }] });

/**
 * transform arrays to vectors
 */
class Vector2Pipe {
    transform(args) {
        return new Vector2(...args);
    }
}
Vector2Pipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector2Pipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
Vector2Pipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector2Pipe, name: "vector2" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector2Pipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'vector2',
                    pure: true
                }]
        }] });
class Vector3Pipe {
    transform(args) {
        return new Vector3(...args);
    }
}
Vector3Pipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector3Pipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
Vector3Pipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector3Pipe, name: "vector3" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector3Pipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'vector3',
                    pure: true
                }]
        }] });
class Vector4Pipe {
    transform(args) {
        return new Vector4(...args);
    }
}
Vector4Pipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector4Pipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
Vector4Pipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector4Pipe, name: "vector4" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: Vector4Pipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'vector4',
                    pure: true
                }]
        }] });

/**
 * create a clone of any "cloneable" three.js class (or from it's ngx-three warpper)
 */
class ClonePipe {
    transform(value) {
        var _a;
        if (!value) {
            return;
        }
        if (value instanceof ThWrapperBase) {
            return (_a = value.objRef) === null || _a === void 0 ? void 0 : _a.clone();
        }
        else {
            return value.clone();
        }
    }
}
ClonePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ClonePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ClonePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ClonePipe, name: "clone" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ClonePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'clone',
                }]
        }] });

class StatsDirective {
    constructor(engineService) {
        this.engineService = engineService;
        this.stats = Stats();
    }
    ngOnDestroy() {
        if (this.renderSubscription) {
            this.renderSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        var _a;
        if (!this.engineService.canvas) {
            throw new Error('No canvas present');
        }
        const parentElement = this.engineService.canvas.parentElement;
        if (parentElement) {
            parentElement.style.position = 'relative';
            this.stats.domElement.style.position = 'absolute';
            this.stats.showPanel(0);
            (_a = this.engineService.canvas.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(this.stats.dom);
            this.renderSubscription = this.engineService.beforeRender$.subscribe(() => {
                this.stats.update();
            });
        }
    }
    set thStats(enabled) {
        if (!enabled) {
            this.stats.domElement.style.visibility = 'hidden';
        }
        else {
            this.stats.domElement.style.visibility = 'visible';
        }
    }
}
StatsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StatsDirective, deps: [{ token: ThEngineService }], target: i0.ɵɵFactoryTarget.Directive });
StatsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: StatsDirective, selector: "[thStats]", inputs: { thStats: "thStats" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: StatsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[thStats]'
                }]
        }], ctorParameters: function () { return [{ type: ThEngineService }]; }, propDecorators: { thStats: [{
                type: Input
            }] } });

class ThRenderDirective {
    constructor(engineService) {
        this.engineService = engineService;
    }
    get beforeRender() {
        return this.engineService.beforeRender$;
    }
}
ThRenderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderDirective, deps: [{ token: ThEngineService }], target: i0.ɵɵFactoryTarget.Directive });
ThRenderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.2", type: ThRenderDirective, selector: "[beforeRender]", outputs: { beforeRender: "beforeRender" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: ThRenderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[beforeRender]'
                }]
        }], ctorParameters: function () { return [{ type: ThEngineService }]; }, propDecorators: { beforeRender: [{
                type: Output
            }] } });

class NgxThreeModule {
}
NgxThreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxThreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeModule, declarations: [ThCanvas,
        ThView,
        ThObjectBase,
        ThMaterialBase,
        ThWrapperBase,
        ThLoader,
        ThGLTFLoader,
        //   ThOBJLoader,
        RaycasterEventDirective,
        ColorPipe,
        Vector2Pipe,
        Vector3Pipe,
        Vector4Pipe,
        ClonePipe,
        StatsDirective,
        ThRenderDirective], imports: [NgxThreeGeneratedModule], exports: [NgxThreeGeneratedModule,
        ThCanvas,
        ThView,
        ThLoader,
        ThGLTFLoader,
        //   ThOBJLoader,
        RaycasterEventDirective,
        ColorPipe,
        Vector2Pipe,
        Vector3Pipe,
        Vector4Pipe,
        ClonePipe,
        ThRenderDirective,
        StatsDirective] });
NgxThreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeModule, imports: [[NgxThreeGeneratedModule], NgxThreeGeneratedModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxThreeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ThCanvas,
                        ThView,
                        ThObjectBase,
                        ThMaterialBase,
                        ThWrapperBase,
                        ThLoader,
                        ThGLTFLoader,
                        //   ThOBJLoader,
                        RaycasterEventDirective,
                        ColorPipe,
                        Vector2Pipe,
                        Vector3Pipe,
                        Vector4Pipe,
                        ClonePipe,
                        StatsDirective,
                        ThRenderDirective
                    ],
                    imports: [NgxThreeGeneratedModule],
                    exports: [
                        NgxThreeGeneratedModule,
                        ThCanvas,
                        ThView,
                        ThLoader,
                        ThGLTFLoader,
                        //   ThOBJLoader,
                        RaycasterEventDirective,
                        ColorPipe,
                        Vector2Pipe,
                        Vector3Pipe,
                        Vector4Pipe,
                        ClonePipe,
                        ThRenderDirective,
                        StatsDirective
                    ]
                }]
        }] });

/*
          Generated, modifications will get overwritten
        */

function createThProviderArray(cls, baseCls) {
    const providers = [];
    if (ThObject3D.isPrototypeOf(baseCls) || Object3D === baseCls) {
        providers.push({ provide: ThObject3D, useExisting: forwardRef(() => cls) });
        if (ThCamera.isPrototypeOf(baseCls) || ThCamera === baseCls) {
            providers.push({ provide: ThCamera, useExisting: forwardRef(() => cls) });
        }
    }
}
/**
 * usage:
 *
 * @Component({
 *  providers: createObj3DProviderArray(forwardRef(() => TheComponent)))
 * })
 * export class TheComponent {
 * ...
 * }
 * @param type the Object3D derived Class to be provided
 */
function createObj3DProviderArray(type) {
    return [{ provide: ThObject3D, useExisting: forwardRef(() => type) }];
}
function createCameraProviderArray(type) {
    return [
        { provide: ThObject3D, useExisting: forwardRef(() => type) },
        { provide: ThCamera, useExisting: forwardRef(() => type) }
    ];
}

/*
 * Public API Surface of ngx-three
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ClonePipe, ColorPipe, NgxThreeGeneratedModule, NgxThreeModule, RaycasterEventDirective, StatsDirective, ThAdaptiveToneMappingPass, ThAfterimagePass, ThAmbientLight, ThAmbientLightProbe, ThArrayCamera, ThArrowHelper, ThAudio, ThAudioListener, ThAxesHelper, ThBloomPass, ThBokehPass, ThBone, ThBox3Helper, ThBoxGeometry, ThBoxHelper, ThBoxLineGeometry, ThBufferGeometry, ThCamera, ThCameraHelper, ThCanvas, ThCircleGeometry, ThClearMaskPass, ThClearPass, ThConeGeometry, ThConvexGeometry, ThCubeCamera, ThCubeTexturePass, ThCylinderGeometry, ThDecalGeometry, ThDirectionalLight, ThDirectionalLightHelper, ThDodecahedronGeometry, ThDotScreenPass, ThDragControls, ThEdgesGeometry, ThEffectComposer, ThEffectComposerGen, ThEngineService, ThExtrudeGeometry, ThFilmPass, ThFirstPersonControls, ThFlyControls, ThGLTFLoader, ThGlitchPass, ThGridHelper, ThGroup, ThHalftonePass, ThHemisphereLight, ThHemisphereLightHelper, ThHemisphereLightProbe, ThIcosahedronGeometry, ThInstancedBufferGeometry, ThInstancedMesh, ThLOD, ThLUTPass, ThLatheGeometry, ThLight, ThLightProbe, ThLine, ThLineBasicMaterial, ThLineDashedMaterial, ThLineLoop, ThLineSegments, ThLoader, ThMapControls, ThMaskPass, ThMaterial, ThMesh, ThMeshBasicMaterial, ThMeshDepthMaterial, ThMeshDistanceMaterial, ThMeshLambertMaterial, ThMeshMatcapMaterial, ThMeshNormalMaterial, ThMeshPhongMaterial, ThMeshPhysicalMaterial, ThMeshStandardMaterial, ThMeshToonMaterial, ThObject3D, ThOctahedronGeometry, ThOrbitControls, ThOrthographicCamera, ThOutlinePass, ThParametricGeometry, ThPass, ThPerspectiveCamera, ThPlaneGeometry, ThPlaneHelper, ThPointLight, ThPointLightHelper, ThPointerLockControls, ThPoints, ThPointsMaterial, ThPolarGridHelper, ThPolyhedronGeometry, ThPositionalAudio, ThRawShaderMaterial, ThRectAreaLight, ThRenderDirective, ThRenderPass, ThRenderPassGen, ThRingGeometry, ThRoundedBoxGeometry, ThSAOPass, ThSMAAPass, ThSSAARenderPass, ThSSAOPass, ThSSRPass, ThSSRrPass, ThSavePass, ThScene, ThShaderMaterial, ThShaderPass, ThShadowMaterial, ThShapeGeometry, ThSkeletonHelper, ThSkinnedMesh, ThSphereGeometry, ThSpotLight, ThSpotLightHelper, ThSprite, ThSpriteMaterial, ThStereoCamera, ThTAARenderPass, ThTeapotGeometry, ThTetrahedronGeometry, ThTextGeometry, ThTexturePass, ThTorusGeometry, ThTorusKnotGeometry, ThTrackballControls, ThTransformControls, ThTubeGeometry, ThUnrealBloomPass, ThView, ThWireframeGeometry, Vector2Pipe, Vector3Pipe, Vector4Pipe, createCameraProviderArray, createLazyObject3DProxy, createObj3DProviderArray, createThProviderArray, isLazyObject3dProxy };
//# sourceMappingURL=ngx-three.mjs.map
