import { AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';
import { Event } from 'three';
import { ThObject3D } from '../generated/ThObject3D';
import { RaycasterService } from './raycaster.service';
import * as i0 from "@angular/core";
export interface RaycasterEmitEvent {
    component: ThObject3D;
    face?: THREE.Face;
}
export declare class RaycasterEventDirective implements AfterViewInit, OnDestroy {
    readonly host: ThObject3D;
    private raycasterService;
    mouseEnter: EventEmitter<RaycasterEmitEvent>;
    mouseExit: EventEmitter<RaycasterEmitEvent>;
    click: EventEmitter<RaycasterEmitEvent>;
    constructor(host: ThObject3D, raycasterService: RaycasterService);
    ngAfterViewInit(): void;
    private subscribeEvents;
    private unSubscribeEvents;
    onMouseExit(): void;
    onMouseEnter(event: Event): void;
    onClick(event: Event): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RaycasterEventDirective, [{ host: true; }, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RaycasterEventDirective, "[onClick], [onMouseEnter], [onMouseExit]", never, {}, { "mouseEnter": "onMouseEnter"; "mouseExit": "onMouseExit"; "click": "onClick"; }, never>;
}
