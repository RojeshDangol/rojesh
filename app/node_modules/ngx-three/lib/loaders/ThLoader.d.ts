import { EventEmitter, NgZone, OnInit } from '@angular/core';
import { Object3D } from 'three';
import { ThObject3D } from '../generated/ThObject3D';
import { LazyObject3DProxy } from './LazyObject3dProxy';
import * as i0 from "@angular/core";
export declare class ThLoader<T = any> implements OnInit {
    protected host: ThObject3D<any>;
    protected zone: NgZone;
    private initialized;
    private _url?;
    loaderFn?: (input?: string, onProgress?: (progress: ProgressEvent) => void, onLoaded?: (result: T) => void) => Promise<Object3D>;
    set url(url: string | undefined);
    get url(): string | undefined;
    protected proxy: LazyObject3DProxy;
    protected onLoaded$?: EventEmitter<T>;
    protected onProgress$?: EventEmitter<ProgressEvent>;
    constructor(host: ThObject3D<any>, zone: NgZone);
    ngOnInit(): void;
    get onLoaded(): EventEmitter<T>;
    get onProgress(): EventEmitter<ProgressEvent<EventTarget>>;
    protected loadAsync(): Promise<Object3D<import("three").Event> | undefined>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThLoader<any>, [{ host: true; }, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThLoader<any>, "[load]", never, { "loaderFn": "loaderFn"; "url": "url"; }, { "onLoaded": "onLoaded"; "onProgress": "onProgress"; }, never>;
}
