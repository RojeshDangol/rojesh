import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Type } from '@angular/core';
import { Observable, ReplaySubject } from 'rxjs';
import { ThWrapperLifeCycle } from './ThWrapperLifeCycle';
import * as i0 from "@angular/core";
export declare class ThWrapperBase<T, ARGS = unknown> implements ThWrapperLifeCycle, OnChanges, OnInit, OnDestroy {
    protected _objRef?: T;
    protected _objRef$?: ReplaySubject<T>;
    autoAddToParent: boolean;
    autoDispose: boolean;
    set objRef(ref: T | undefined);
    get objRef(): T | undefined;
    protected updateEmitter?: EventEmitter<SimpleChanges>;
    constructor();
    addToParent(): void;
    removeFromParent(): void;
    args?: ARGS;
    get onUpdate(): Observable<SimpleChanges>;
    /**
     * emits the last assigned object ref
     */
    get objRef$(): Observable<T>;
    ngOnInit(): void;
    getType(): Type<any>;
    createThreeInstance(args?: unknown): any;
    ngOnChanges(changes: SimpleChanges): void;
    disposeObjRef(): void;
    ngOnDestroy(): void;
    protected applyObjRef(objRef: T | undefined): void;
    protected emitObjRefChange(): void;
    protected emitPropertyChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThWrapperBase<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThWrapperBase<any, any>, "th-abs-wrapper", never, { "autoAddToParent": "autoAddToParent"; "autoDispose": "autoDispose"; "objRef": "objRef"; "args": "args"; }, { "onUpdate": "onUpdate"; "objRef$": "objRef$"; }, never, never>;
}
