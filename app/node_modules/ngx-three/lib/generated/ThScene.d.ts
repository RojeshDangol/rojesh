import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, Event, FogBase, Material, Scene, Texture, WebGLRenderer } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThScene<T extends Scene = Scene, TARGS = []> extends ThObject3D<Event, T, TARGS> {
    getType(): Type<Scene>;
    set type(value: 'Scene');
    set fog(value: FogBase | null);
    set overrideMaterial(value: Material | null);
    set autoUpdate(value: boolean);
    set background(value: null | Color | Texture | [color: ColorRepresentation]);
    set environment(value: null | Texture);
    set onBeforeRender(value: (renderer: WebGLRenderer, scene: Scene, camera: Camera, renderTarget: any) => void);
    set onAfterRender(value: (renderer: WebGLRenderer, scene: Scene, camera: Camera) => void);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThScene<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThScene<any, any>, "th-scene", never, { "type": "type"; "fog": "fog"; "overrideMaterial": "overrideMaterial"; "autoUpdate": "autoUpdate"; "background": "background"; "environment": "environment"; "onBeforeRender": "onBeforeRender"; "onAfterRender": "onAfterRender"; }, {}, never, never>;
}
