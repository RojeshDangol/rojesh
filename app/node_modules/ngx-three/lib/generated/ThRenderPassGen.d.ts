import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, Material, Scene } from 'three';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThRenderPassGen<T extends RenderPass = RenderPass, TARGS = [
    scene: Scene,
    camera: Camera,
    overrideMaterial?: Material,
    clearColor?: Color,
    clearAlpha?: number
]> extends ThPass<T, TARGS> {
    getType(): Type<RenderPass>;
    set scene(value: Scene);
    set camera(value: Camera);
    set overrideMaterial(value: Material);
    set clearColor(value: Color | [color: ColorRepresentation]);
    set clearAlpha(value: number);
    set clearDepth(value: boolean);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThRenderPassGen<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThRenderPassGen<any, any>, "th-renderPassGen", never, { "scene": "scene"; "camera": "camera"; "overrideMaterial": "overrideMaterial"; "clearColor": "clearColor"; "clearAlpha": "clearAlpha"; "clearDepth": "clearDepth"; }, {}, never, never>;
}
