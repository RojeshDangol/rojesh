import { Type } from '@angular/core';
import { Color, ColorRepresentation, Combine, MeshLambertMaterial, MeshLambertMaterialParameters, Texture } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export declare class ThMeshLambertMaterial<T extends MeshLambertMaterial = MeshLambertMaterial, TARGS = MeshLambertMaterialParameters> extends ThMaterial<T, TARGS> {
    getType(): Type<MeshLambertMaterial>;
    set type(value: string);
    set color(value: Color | [color: ColorRepresentation]);
    set emissive(value: Color | [color: ColorRepresentation]);
    set emissiveIntensity(value: number);
    set emissiveMap(value: Texture | null);
    set map(value: Texture | null);
    set lightMap(value: Texture | null);
    set lightMapIntensity(value: number);
    set aoMap(value: Texture | null);
    set aoMapIntensity(value: number);
    set specularMap(value: Texture | null);
    set alphaMap(value: Texture | null);
    set envMap(value: Texture | null);
    set combine(value: Combine);
    set reflectivity(value: number);
    set refractionRatio(value: number);
    set wireframe(value: boolean);
    set wireframeLinewidth(value: number);
    set wireframeLinecap(value: string);
    set wireframeLinejoin(value: string);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThMeshLambertMaterial<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThMeshLambertMaterial<any, any>, "th-meshLambertMaterial", never, { "type": "type"; "color": "color"; "emissive": "emissive"; "emissiveIntensity": "emissiveIntensity"; "emissiveMap": "emissiveMap"; "map": "map"; "lightMap": "lightMap"; "lightMapIntensity": "lightMapIntensity"; "aoMap": "aoMap"; "aoMapIntensity": "aoMapIntensity"; "specularMap": "specularMap"; "alphaMap": "alphaMap"; "envMap": "envMap"; "combine": "combine"; "reflectivity": "reflectivity"; "refractionRatio": "refractionRatio"; "wireframe": "wireframe"; "wireframeLinewidth": "wireframeLinewidth"; "wireframeLinecap": "wireframeLinecap"; "wireframeLinejoin": "wireframeLinejoin"; }, {}, never, never>;
}
