import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, Matrix4, MeshBasicMaterial, MeshDepthMaterial, Object3D, Scene, ShaderMaterial, Texture, Vector2, WebGLRenderTarget } from 'three';
import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThOutlinePass<T extends OutlinePass = OutlinePass, TARGS = [
    resolution: Vector2,
    scene: Scene,
    camera: Camera,
    selectedObjects?: Object3D[]
]> extends ThPass<T, TARGS> {
    getType(): Type<OutlinePass>;
    set renderScene(value: Scene);
    set renderCamera(value: Camera);
    set selectedObjects(value: Object3D[]);
    set visibleEdgeColor(value: Color | [color: ColorRepresentation]);
    set hiddenEdgeColor(value: Color | [color: ColorRepresentation]);
    set edgeGlow(value: number);
    set usePatternTexture(value: boolean);
    set edgeThickness(value: number);
    set edgeStrength(value: number);
    set downSampleRatio(value: number);
    set pulsePeriod(value: number);
    set resolution(value: Vector2 | [x: number, y: number]);
    set patternTexture(value: Texture);
    set maskBufferMaterial(value: MeshBasicMaterial);
    set renderTargetMaskBuffer(value: WebGLRenderTarget);
    set depthMaterial(value: MeshDepthMaterial);
    set prepareMaskMaterial(value: ShaderMaterial);
    set renderTargetDepthBuffer(value: WebGLRenderTarget);
    set renderTargetMaskDownSampleBuffer(value: WebGLRenderTarget);
    set renderTargetBlurBuffer1(value: WebGLRenderTarget);
    set renderTargetBlurBuffer2(value: WebGLRenderTarget);
    set edgeDetectionMaterial(value: ShaderMaterial);
    set renderTargetEdgeBuffer1(value: WebGLRenderTarget);
    set renderTargetEdgeBuffer2(value: WebGLRenderTarget);
    set separableBlurMaterial1(value: ShaderMaterial);
    set separableBlurMaterial2(value: ShaderMaterial);
    set overlayMaterial(value: ShaderMaterial);
    set copyUniforms(value: object);
    set materialCopy(value: ShaderMaterial);
    set oldClearColor(value: Color | [color: ColorRepresentation]);
    set oldClearAlpha(value: number);
    set fsQuad(value: object);
    set tempPulseColor1(value: Color | [color: ColorRepresentation]);
    set tempPulseColor2(value: Color | [color: ColorRepresentation]);
    set textureMatrix(value: Matrix4 | [
        n11: number,
        n12: number,
        n13: number,
        n14: number,
        n21: number,
        n22: number,
        n23: number,
        n24: number,
        n31: number,
        n32: number,
        n33: number,
        n34: number,
        n41: number,
        n42: number,
        n43: number,
        n44: number
    ]);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThOutlinePass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThOutlinePass<any, any>, "th-outlinePass", never, { "renderScene": "renderScene"; "renderCamera": "renderCamera"; "selectedObjects": "selectedObjects"; "visibleEdgeColor": "visibleEdgeColor"; "hiddenEdgeColor": "hiddenEdgeColor"; "edgeGlow": "edgeGlow"; "usePatternTexture": "usePatternTexture"; "edgeThickness": "edgeThickness"; "edgeStrength": "edgeStrength"; "downSampleRatio": "downSampleRatio"; "pulsePeriod": "pulsePeriod"; "resolution": "resolution"; "patternTexture": "patternTexture"; "maskBufferMaterial": "maskBufferMaterial"; "renderTargetMaskBuffer": "renderTargetMaskBuffer"; "depthMaterial": "depthMaterial"; "prepareMaskMaterial": "prepareMaskMaterial"; "renderTargetDepthBuffer": "renderTargetDepthBuffer"; "renderTargetMaskDownSampleBuffer": "renderTargetMaskDownSampleBuffer"; "renderTargetBlurBuffer1": "renderTargetBlurBuffer1"; "renderTargetBlurBuffer2": "renderTargetBlurBuffer2"; "edgeDetectionMaterial": "edgeDetectionMaterial"; "renderTargetEdgeBuffer1": "renderTargetEdgeBuffer1"; "renderTargetEdgeBuffer2": "renderTargetEdgeBuffer2"; "separableBlurMaterial1": "separableBlurMaterial1"; "separableBlurMaterial2": "separableBlurMaterial2"; "overlayMaterial": "overlayMaterial"; "copyUniforms": "copyUniforms"; "materialCopy": "materialCopy"; "oldClearColor": "oldClearColor"; "oldClearAlpha": "oldClearAlpha"; "fsQuad": "fsQuad"; "tempPulseColor1": "tempPulseColor1"; "tempPulseColor2": "tempPulseColor2"; "textureMatrix": "textureMatrix"; }, {}, never, never>;
}
