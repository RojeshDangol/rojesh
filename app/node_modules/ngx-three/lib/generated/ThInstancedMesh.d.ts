import { Type } from '@angular/core';
import { BufferGeometry, InstancedBufferAttribute, InstancedMesh, Material } from 'three';
import { ThMesh } from './ThMesh';
import * as i0 from "@angular/core";
export declare class ThInstancedMesh<TGeometry extends BufferGeometry = BufferGeometry, TMaterial extends Material | Material[] = Material | Material[], T extends InstancedMesh<TGeometry, TMaterial> = InstancedMesh<TGeometry, TMaterial>, TARGS = [
    geometry: TGeometry | undefined,
    material: TMaterial | undefined,
    count: number
]> extends ThMesh<TGeometry, TMaterial, T, TARGS> {
    getType(): Type<InstancedMesh<TGeometry, TMaterial>>;
    set count(value: number);
    set instanceColor(value: null | InstancedBufferAttribute | [value: ArrayLike<number> | ArrayBufferView, offset?: number]);
    set instanceMatrix(value: InstancedBufferAttribute | [value: ArrayLike<number> | ArrayBufferView, offset?: number]);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThInstancedMesh<any, any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThInstancedMesh<any, any, any, any>, "th-instancedMesh", never, { "count": "count"; "instanceColor": "instanceColor"; "instanceMatrix": "instanceMatrix"; }, {}, never, never>;
}
