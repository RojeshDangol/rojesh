import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, Material, MeshBasicMaterial, MeshNormalMaterial, Scene, ShaderMaterial, WebGLRenderer, WebGLRenderTarget } from 'three';
import { Reflector } from 'three/examples/jsm/objects/ReflectorForSSRPass';
import { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass';
import { SSRPass, SSRPassParams } from 'three/examples/jsm/postprocessing/SSRPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThSSRPass<T extends SSRPass = SSRPass, TARGS = SSRPassParams> extends ThPass<T, TARGS> {
    getType(): Type<SSRPass>;
    set width(value: number);
    set height(value: number);
    set clear(value: boolean);
    set renderer(value: WebGLRenderer);
    set scene(value: Scene);
    set camera(value: Camera);
    set groundReflector(value: Reflector | null);
    set opacity(value: number);
    set output(value: number);
    set maxDistance(value: number);
    set thickness(value: number);
    set tempColor(value: Color | [color: ColorRepresentation]);
    set selective(value: boolean);
    set blur(value: boolean);
    set thickTolerance(value: number);
    set beautyRenderTarget(value: WebGLRenderTarget);
    set prevRenderTarget(value: WebGLRenderTarget);
    set normalRenderTarget(value: WebGLRenderTarget);
    set metalnessRenderTarget(value: WebGLRenderTarget);
    set ssrRenderTarget(value: WebGLRenderTarget);
    set blurRenderTarget(value: WebGLRenderTarget);
    set blurRenderTarget2(value: WebGLRenderTarget);
    set ssrMaterial(value: ShaderMaterial);
    set normalMaterial(value: MeshNormalMaterial);
    set metalnessOnMaterial(value: MeshBasicMaterial);
    set metalnessOffMaterial(value: MeshBasicMaterial);
    set blurMaterial(value: ShaderMaterial);
    set blurMaterial2(value: ShaderMaterial);
    set depthRenderMaterial(value: ShaderMaterial);
    set copyMaterial(value: ShaderMaterial);
    set fsQuad(value: FullScreenQuad);
    set originalClearColor(value: Color | [color: ColorRepresentation]);
    set dispose(value: () => void);
    set renderPass(value: (renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void);
    set renderOverride(value: (renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void);
    set renderMetalness(value: (renderer: WebGLRenderer, passMaterial: Material, renderTarget: WebGLRenderTarget, clearColor: ColorRepresentation, clearAlpha: ColorRepresentation) => void);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThSSRPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThSSRPass<any, any>, "th-sSRPass", never, { "width": "width"; "height": "height"; "clear": "clear"; "renderer": "renderer"; "scene": "scene"; "camera": "camera"; "groundReflector": "groundReflector"; "opacity": "opacity"; "output": "output"; "maxDistance": "maxDistance"; "thickness": "thickness"; "tempColor": "tempColor"; "selective": "selective"; "blur": "blur"; "thickTolerance": "thickTolerance"; "beautyRenderTarget": "beautyRenderTarget"; "prevRenderTarget": "prevRenderTarget"; "normalRenderTarget": "normalRenderTarget"; "metalnessRenderTarget": "metalnessRenderTarget"; "ssrRenderTarget": "ssrRenderTarget"; "blurRenderTarget": "blurRenderTarget"; "blurRenderTarget2": "blurRenderTarget2"; "ssrMaterial": "ssrMaterial"; "normalMaterial": "normalMaterial"; "metalnessOnMaterial": "metalnessOnMaterial"; "metalnessOffMaterial": "metalnessOffMaterial"; "blurMaterial": "blurMaterial"; "blurMaterial2": "blurMaterial2"; "depthRenderMaterial": "depthRenderMaterial"; "copyMaterial": "copyMaterial"; "fsQuad": "fsQuad"; "originalClearColor": "originalClearColor"; "dispose": "dispose"; "renderPass": "renderPass"; "renderOverride": "renderOverride"; "renderMetalness": "renderMetalness"; }, {}, never, never>;
}
