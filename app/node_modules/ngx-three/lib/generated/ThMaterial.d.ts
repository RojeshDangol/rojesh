import { Type } from '@angular/core';
import { Blending, BlendingDstFactor, BlendingEquation, BlendingSrcFactor, DepthModes, Material, PixelFormat, Side, StencilFunc, StencilOp } from 'three';
import { ThMaterialBase } from '../ThMaterialBase';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThMaterial<T extends Material = Material, TARGS = []> extends ThMaterialBase<T, TARGS> {
    getType(): Type<Material>;
    set alphaTest(value: number);
    set alphaToCoverage(value: boolean);
    set blendDst(value: BlendingDstFactor);
    set blendDstAlpha(value: number | null);
    set blendEquation(value: BlendingEquation);
    set blendEquationAlpha(value: number | null);
    set blending(value: Blending);
    set blendSrc(value: BlendingSrcFactor | BlendingDstFactor);
    set blendSrcAlpha(value: number | null);
    set clipIntersection(value: boolean);
    set clippingPlanes(value: any);
    set clipShadows(value: boolean);
    set colorWrite(value: boolean);
    set defines(value: undefined | {
        [key: string]: any;
    });
    set depthFunc(value: DepthModes);
    set depthTest(value: boolean);
    set depthWrite(value: boolean);
    set fog(value: boolean);
    set format(value: PixelFormat);
    set id(value: number);
    set stencilWrite(value: boolean);
    set stencilFunc(value: StencilFunc);
    set stencilRef(value: number);
    set stencilWriteMask(value: number);
    set stencilFuncMask(value: number);
    set stencilFail(value: StencilOp);
    set stencilZFail(value: StencilOp);
    set stencilZPass(value: StencilOp);
    set name(value: string);
    set needsUpdate(value: boolean);
    set opacity(value: number);
    set polygonOffset(value: boolean);
    set polygonOffsetFactor(value: number);
    set polygonOffsetUnits(value: number);
    set precision(value: 'highp' | 'mediump' | 'lowp' | null);
    set premultipliedAlpha(value: boolean);
    set dithering(value: boolean);
    set side(value: Side);
    set shadowSide(value: Side | null);
    set toneMapped(value: boolean);
    set transparent(value: boolean);
    set type(value: string);
    set uuid(value: string);
    set vertexColors(value: boolean);
    set visible(value: boolean);
    set userData(value: any);
    set version(value: number);
    constructor(hostObject: ThObject3D);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThMaterial<any, any>, [{ skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThMaterial<any, any>, "th-material", never, { "alphaTest": "alphaTest"; "alphaToCoverage": "alphaToCoverage"; "blendDst": "blendDst"; "blendDstAlpha": "blendDstAlpha"; "blendEquation": "blendEquation"; "blendEquationAlpha": "blendEquationAlpha"; "blending": "blending"; "blendSrc": "blendSrc"; "blendSrcAlpha": "blendSrcAlpha"; "clipIntersection": "clipIntersection"; "clippingPlanes": "clippingPlanes"; "clipShadows": "clipShadows"; "colorWrite": "colorWrite"; "defines": "defines"; "depthFunc": "depthFunc"; "depthTest": "depthTest"; "depthWrite": "depthWrite"; "fog": "fog"; "format": "format"; "id": "id"; "stencilWrite": "stencilWrite"; "stencilFunc": "stencilFunc"; "stencilRef": "stencilRef"; "stencilWriteMask": "stencilWriteMask"; "stencilFuncMask": "stencilFuncMask"; "stencilFail": "stencilFail"; "stencilZFail": "stencilZFail"; "stencilZPass": "stencilZPass"; "name": "name"; "needsUpdate": "needsUpdate"; "opacity": "opacity"; "polygonOffset": "polygonOffset"; "polygonOffsetFactor": "polygonOffsetFactor"; "polygonOffsetUnits": "polygonOffsetUnits"; "precision": "precision"; "premultipliedAlpha": "premultipliedAlpha"; "dithering": "dithering"; "side": "side"; "shadowSide": "shadowSide"; "toneMapped": "toneMapped"; "transparent": "transparent"; "type": "type"; "uuid": "uuid"; "vertexColors": "vertexColors"; "visible": "visible"; "userData": "userData"; "version": "version"; }, {}, never, never>;
}
