import { Type } from '@angular/core';
import { GLSLVersion, IUniform, ShaderMaterial, ShaderMaterialParameters } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export declare class ThShaderMaterial<T extends ShaderMaterial = ShaderMaterial, TARGS = ShaderMaterialParameters> extends ThMaterial<T, TARGS> {
    getType(): Type<ShaderMaterial>;
    set type(value: string);
    set defines(value: {
        [key: string]: any;
    });
    set uniforms(value: {
        [uniform: string]: IUniform;
    });
    set vertexShader(value: string);
    set fragmentShader(value: string);
    set linewidth(value: number);
    set wireframe(value: boolean);
    set wireframeLinewidth(value: number);
    set fog(value: boolean);
    set lights(value: boolean);
    set clipping(value: boolean);
    set derivatives(value: any);
    set extensions(value: {
        derivatives: boolean;
        fragDepth: boolean;
        drawBuffers: boolean;
        shaderTextureLOD: boolean;
    });
    set defaultAttributeValues(value: any);
    set index0AttributeName(value: string | undefined);
    set uniformsNeedUpdate(value: boolean);
    set glslVersion(value: GLSLVersion | null);
    set isShaderMaterial(value: boolean);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThShaderMaterial<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThShaderMaterial<any, any>, "th-shaderMaterial", never, { "type": "type"; "defines": "defines"; "uniforms": "uniforms"; "vertexShader": "vertexShader"; "fragmentShader": "fragmentShader"; "linewidth": "linewidth"; "wireframe": "wireframe"; "wireframeLinewidth": "wireframeLinewidth"; "fog": "fog"; "lights": "lights"; "clipping": "clipping"; "derivatives": "derivatives"; "extensions": "extensions"; "defaultAttributeValues": "defaultAttributeValues"; "index0AttributeName": "index0AttributeName"; "uniformsNeedUpdate": "uniformsNeedUpdate"; "glslVersion": "glslVersion"; "isShaderMaterial": "isShaderMaterial"; }, {}, never, never>;
}
