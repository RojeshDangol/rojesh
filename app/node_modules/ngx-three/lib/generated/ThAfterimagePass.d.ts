import { Type } from '@angular/core';
import { ShaderMaterial, WebGLRenderTarget } from 'three';
import { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThAfterimagePass<T extends AfterimagePass = AfterimagePass, TARGS = number> extends ThPass<T, TARGS> {
    getType(): Type<AfterimagePass>;
    set shader(value: object);
    set uniforms(map: {
        [name: string]: {
            value: any;
        };
    });
    set textureComp(value: WebGLRenderTarget);
    set textureOld(value: WebGLRenderTarget);
    set shaderMaterial(value: ShaderMaterial);
    set compFsQuad(value: object);
    set copyFsQuad(value: object);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThAfterimagePass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThAfterimagePass<any, any>, "th-afterimagePass", never, { "shader": "shader"; "uniforms": "uniforms"; "textureComp": "textureComp"; "textureOld": "textureOld"; "shaderMaterial": "shaderMaterial"; "compFsQuad": "compFsQuad"; "copyFsQuad": "copyFsQuad"; }, {}, never, never>;
}
