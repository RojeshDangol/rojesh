import { Type } from '@angular/core';
import { MeshNormalMaterial, MeshNormalMaterialParameters, NormalMapTypes, Texture, Vector2 } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export declare class ThMeshNormalMaterial<T extends MeshNormalMaterial = MeshNormalMaterial, TARGS = MeshNormalMaterialParameters> extends ThMaterial<T, TARGS> {
    getType(): Type<MeshNormalMaterial>;
    set type(value: string);
    set bumpMap(value: Texture | null);
    set bumpScale(value: number);
    set normalMap(value: Texture | null);
    set normalMapType(value: NormalMapTypes);
    set normalScale(value: Vector2 | [x: number, y: number]);
    set displacementMap(value: Texture | null);
    set displacementScale(value: number);
    set displacementBias(value: number);
    set wireframe(value: boolean);
    set wireframeLinewidth(value: number);
    set flatShading(value: boolean);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThMeshNormalMaterial<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThMeshNormalMaterial<any, any>, "th-meshNormalMaterial", never, { "type": "type"; "bumpMap": "bumpMap"; "bumpScale": "bumpScale"; "normalMap": "normalMap"; "normalMapType": "normalMapType"; "normalScale": "normalScale"; "displacementMap": "displacementMap"; "displacementScale": "displacementScale"; "displacementBias": "displacementBias"; "wireframe": "wireframe"; "wireframeLinewidth": "wireframeLinewidth"; "flatShading": "flatShading"; }, {}, never, never>;
}
