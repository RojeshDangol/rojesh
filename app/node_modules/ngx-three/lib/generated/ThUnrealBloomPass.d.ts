import { Type } from '@angular/core';
import { Color, ColorRepresentation, MeshBasicMaterial, ShaderMaterial, Vector2, Vector3, WebGLRenderTarget } from 'three';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThUnrealBloomPass<T extends UnrealBloomPass = UnrealBloomPass, TARGS = [
    resolution: Vector2,
    strength: number,
    radius: number,
    threshold: number
]> extends ThPass<T, TARGS> {
    getType(): Type<UnrealBloomPass>;
    set resolution(value: Vector2 | [x: number, y: number]);
    set strength(value: number);
    set radius(value: number);
    set threshold(value: number);
    set clearColor(value: Color | [color: ColorRepresentation]);
    set renderTargetsHorizontal(value: WebGLRenderTarget[]);
    set renderTargetsVertical(value: WebGLRenderTarget[]);
    set nMips(value: number);
    set renderTargetBright(value: WebGLRenderTarget);
    set highPassUniforms(value: object);
    set materialHighPassFilter(value: ShaderMaterial);
    set separableBlurMaterials(value: ShaderMaterial[]);
    set compositeMaterial(value: ShaderMaterial);
    set bloomTintColors(value: Vector3[]);
    set copyUniforms(value: object);
    set materialCopy(value: ShaderMaterial);
    set oldClearColor(value: Color | [color: ColorRepresentation]);
    set oldClearAlpha(value: number);
    set basic(value: MeshBasicMaterial);
    set fsQuad(value: object);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThUnrealBloomPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThUnrealBloomPass<any, any>, "th-unrealBloomPass", never, { "resolution": "resolution"; "strength": "strength"; "radius": "radius"; "threshold": "threshold"; "clearColor": "clearColor"; "renderTargetsHorizontal": "renderTargetsHorizontal"; "renderTargetsVertical": "renderTargetsVertical"; "nMips": "nMips"; "renderTargetBright": "renderTargetBright"; "highPassUniforms": "highPassUniforms"; "materialHighPassFilter": "materialHighPassFilter"; "separableBlurMaterials": "separableBlurMaterials"; "compositeMaterial": "compositeMaterial"; "bloomTintColors": "bloomTintColors"; "copyUniforms": "copyUniforms"; "materialCopy": "materialCopy"; "oldClearColor": "oldClearColor"; "oldClearAlpha": "oldClearAlpha"; "basic": "basic"; "fsQuad": "fsQuad"; }, {}, never, never>;
}
