import { Type } from '@angular/core';
import { BufferGeometry, Material, Matrix4, Skeleton, SkinnedMesh } from 'three';
import { ThMesh } from './ThMesh';
import * as i0 from "@angular/core";
export declare class ThSkinnedMesh<TGeometry extends BufferGeometry = BufferGeometry, TMaterial extends Material | Material[] = Material | Material[], T extends SkinnedMesh<TGeometry, TMaterial> = SkinnedMesh<TGeometry, TMaterial>, TARGS = [
    geometry?: TGeometry,
    material?: TMaterial,
    useVertexTexture?: boolean
]> extends ThMesh<TGeometry, TMaterial, T, TARGS> {
    getType(): Type<SkinnedMesh<TGeometry, TMaterial>>;
    set bindMode(value: string);
    set bindMatrix(value: Matrix4 | [
        n11: number,
        n12: number,
        n13: number,
        n14: number,
        n21: number,
        n22: number,
        n23: number,
        n24: number,
        n31: number,
        n32: number,
        n33: number,
        n34: number,
        n41: number,
        n42: number,
        n43: number,
        n44: number
    ]);
    set bindMatrixInverse(value: Matrix4 | [
        n11: number,
        n12: number,
        n13: number,
        n14: number,
        n21: number,
        n22: number,
        n23: number,
        n24: number,
        n31: number,
        n32: number,
        n33: number,
        n34: number,
        n41: number,
        n42: number,
        n43: number,
        n44: number
    ]);
    set skeleton(value: Skeleton);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThSkinnedMesh<any, any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThSkinnedMesh<any, any, any, any>, "th-skinnedMesh", never, { "bindMode": "bindMode"; "bindMatrix": "bindMatrix"; "bindMatrixInverse": "bindMatrixInverse"; "skeleton": "skeleton"; }, {}, never, never>;
}
