import { Type } from '@angular/core';
import { Audio, AudioListener, Event } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThAudio<NodeType extends AudioNode = GainNode, T extends Audio<NodeType> = Audio<NodeType>, TARGS = AudioListener> extends ThObject3D<Event, T, TARGS> {
    getType(): Type<Audio<NodeType>>;
    set type(value: 'Audio');
    set listener(value: AudioListener);
    set context(value: AudioContext);
    set gain(value: GainNode);
    set autoplay(value: boolean);
    set buffer(value: null | AudioBuffer);
    set detune(value: number);
    set loop(value: boolean);
    set loopStart(value: number);
    set loopEnd(value: number);
    set offset(value: number);
    set duration(value: number | undefined);
    set playbackRate(value: number);
    set isPlaying(value: boolean);
    set hasPlaybackControl(value: boolean);
    set sourceType(value: string);
    set source(value: null | AudioBufferSourceNode);
    set filters(value: AudioNode[]);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThAudio<any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThAudio<any, any, any>, "th-audio", never, { "type": "type"; "listener": "listener"; "context": "context"; "gain": "gain"; "autoplay": "autoplay"; "buffer": "buffer"; "detune": "detune"; "loop": "loop"; "loopStart": "loopStart"; "loopEnd": "loopEnd"; "offset": "offset"; "duration": "duration"; "playbackRate": "playbackRate"; "isPlaying": "isPlaying"; "hasPlaybackControl": "hasPlaybackControl"; "sourceType": "sourceType"; "source": "source"; "filters": "filters"; }, {}, never, never>;
}
