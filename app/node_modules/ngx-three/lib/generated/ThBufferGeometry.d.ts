import { Type } from '@angular/core';
import { Box3, BufferAttribute, BufferGeometry, InterleavedBufferAttribute, Sphere, Vector3 } from 'three';
import { ThGeometryBase } from '../ThGeometryBase';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThBufferGeometry<T extends BufferGeometry = BufferGeometry, TARGS = []> extends ThGeometryBase<T, TARGS> {
    getType(): Type<BufferGeometry>;
    set id(value: number);
    set uuid(value: string);
    set name(value: string);
    set type(value: string);
    set index(value: BufferAttribute | null | [value: ArrayLike<number> | ArrayBufferView, offset?: number]);
    set attributes(value: {
        [name: string]: BufferAttribute | InterleavedBufferAttribute;
    });
    set morphAttributes(value: {
        [name: string]: Array<BufferAttribute | InterleavedBufferAttribute>;
    });
    set morphTargetsRelative(value: boolean);
    set groups(value: Array<{
        start: number;
        count: number;
        materialIndex?: number | undefined;
    }>);
    set boundingBox(value: Box3 | null | [min: Vector3, max: Vector3]);
    set boundingSphere(value: Sphere | null | [center: Vector3, radius: number]);
    set drawRange(value: {
        start: number;
        count: number;
    });
    set userData(value: {
        [key: string]: any;
    });
    set drawcalls(value: any);
    set offsets(value: any);
    constructor(hostObject: ThObject3D);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThBufferGeometry<any, any>, [{ skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThBufferGeometry<any, any>, "th-bufferGeometry", never, { "id": "id"; "uuid": "uuid"; "name": "name"; "type": "type"; "index": "index"; "attributes": "attributes"; "morphAttributes": "morphAttributes"; "morphTargetsRelative": "morphTargetsRelative"; "groups": "groups"; "boundingBox": "boundingBox"; "boundingSphere": "boundingSphere"; "drawRange": "drawRange"; "userData": "userData"; "drawcalls": "drawcalls"; "offsets": "offsets"; }, {}, never, never>;
}
