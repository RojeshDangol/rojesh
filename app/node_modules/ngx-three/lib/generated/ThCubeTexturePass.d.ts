import { Type } from '@angular/core';
import { CubeTexture, Mesh, PerspectiveCamera, Scene } from 'three';
import { CubeTexturePass } from 'three/examples/jsm/postprocessing/CubeTexturePass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThCubeTexturePass<T extends CubeTexturePass = CubeTexturePass, TARGS = [camera: PerspectiveCamera, envMap?: CubeTexture, opacity?: number]> extends ThPass<T, TARGS> {
    getType(): Type<CubeTexturePass>;
    set camera(value: PerspectiveCamera);
    set cubeShader(value: object);
    set cubeMesh(value: Mesh);
    set envMap(value: CubeTexture);
    set opacity(value: number);
    set cubeScene(value: Scene);
    set cubeCamera(value: PerspectiveCamera);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThCubeTexturePass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThCubeTexturePass<any, any>, "th-cubeTexturePass", never, { "camera": "camera"; "cubeShader": "cubeShader"; "cubeMesh": "cubeMesh"; "envMap": "envMap"; "opacity": "opacity"; "cubeScene": "cubeScene"; "cubeCamera": "cubeCamera"; }, {}, never, never>;
}
