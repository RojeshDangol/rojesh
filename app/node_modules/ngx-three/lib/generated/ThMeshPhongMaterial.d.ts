import { Type } from '@angular/core';
import { Color, ColorRepresentation, Combine, MeshPhongMaterial, MeshPhongMaterialParameters, NormalMapTypes, Texture, Vector2 } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export declare class ThMeshPhongMaterial<T extends MeshPhongMaterial = MeshPhongMaterial, TARGS = MeshPhongMaterialParameters> extends ThMaterial<T, TARGS> {
    getType(): Type<MeshPhongMaterial>;
    set type(value: string);
    set color(value: Color | [color: ColorRepresentation]);
    set specular(value: Color | [color: ColorRepresentation]);
    set shininess(value: number);
    set map(value: Texture | null);
    set lightMap(value: Texture | null);
    set lightMapIntensity(value: number);
    set aoMap(value: Texture | null);
    set aoMapIntensity(value: number);
    set emissive(value: Color | [color: ColorRepresentation]);
    set emissiveIntensity(value: number);
    set emissiveMap(value: Texture | null);
    set bumpMap(value: Texture | null);
    set bumpScale(value: number);
    set normalMap(value: Texture | null);
    set normalMapType(value: NormalMapTypes);
    set normalScale(value: Vector2 | [x: number, y: number]);
    set displacementMap(value: Texture | null);
    set displacementScale(value: number);
    set displacementBias(value: number);
    set specularMap(value: Texture | null);
    set alphaMap(value: Texture | null);
    set envMap(value: Texture | null);
    set combine(value: Combine);
    set reflectivity(value: number);
    set refractionRatio(value: number);
    set wireframe(value: boolean);
    set wireframeLinewidth(value: number);
    set wireframeLinecap(value: string);
    set wireframeLinejoin(value: string);
    set flatShading(value: boolean);
    set metal(value: boolean);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThMeshPhongMaterial<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThMeshPhongMaterial<any, any>, "th-meshPhongMaterial", never, { "type": "type"; "color": "color"; "specular": "specular"; "shininess": "shininess"; "map": "map"; "lightMap": "lightMap"; "lightMapIntensity": "lightMapIntensity"; "aoMap": "aoMap"; "aoMapIntensity": "aoMapIntensity"; "emissive": "emissive"; "emissiveIntensity": "emissiveIntensity"; "emissiveMap": "emissiveMap"; "bumpMap": "bumpMap"; "bumpScale": "bumpScale"; "normalMap": "normalMap"; "normalMapType": "normalMapType"; "normalScale": "normalScale"; "displacementMap": "displacementMap"; "displacementScale": "displacementScale"; "displacementBias": "displacementBias"; "specularMap": "specularMap"; "alphaMap": "alphaMap"; "envMap": "envMap"; "combine": "combine"; "reflectivity": "reflectivity"; "refractionRatio": "refractionRatio"; "wireframe": "wireframe"; "wireframeLinewidth": "wireframeLinewidth"; "wireframeLinecap": "wireframeLinecap"; "wireframeLinejoin": "wireframeLinejoin"; "flatShading": "flatShading"; "metal": "metal"; }, {}, never, never>;
}
