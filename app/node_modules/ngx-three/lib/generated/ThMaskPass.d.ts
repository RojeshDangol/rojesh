import { Type } from '@angular/core';
import { Camera, Scene } from 'three';
import { MaskPass } from 'three/examples/jsm/postprocessing/MaskPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThMaskPass<T extends MaskPass = MaskPass, TARGS = [scene: Scene, camera: Camera]> extends ThPass<T, TARGS> {
    getType(): Type<MaskPass>;
    set scene(value: Scene);
    set camera(value: Camera);
    set inverse(value: boolean);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThMaskPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThMaskPass<any, any>, "th-maskPass", never, { "scene": "scene"; "camera": "camera"; "inverse": "inverse"; }, {}, never, never>;
}
