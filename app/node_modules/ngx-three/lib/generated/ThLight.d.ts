import { Type } from '@angular/core';
import { Color, ColorRepresentation, Event, Light, LightShadow } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThLight<T extends Light = Light, TARGS = [hex?: number | string, intensity?: number]> extends ThObject3D<Event, T, TARGS> {
    getType(): Type<Light>;
    set type(value: string);
    set color(value: Color | [color: ColorRepresentation]);
    set intensity(value: number);
    set shadow(value: LightShadow);
    set shadowCameraFov(value: any);
    set shadowCameraLeft(value: any);
    set shadowCameraRight(value: any);
    set shadowCameraTop(value: any);
    set shadowCameraBottom(value: any);
    set shadowCameraNear(value: any);
    set shadowCameraFar(value: any);
    set shadowBias(value: any);
    set shadowMapWidth(value: any);
    set shadowMapHeight(value: any);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThLight<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThLight<any, any>, "th-light", never, { "type": "type"; "color": "color"; "intensity": "intensity"; "shadow": "shadow"; "shadowCameraFov": "shadowCameraFov"; "shadowCameraLeft": "shadowCameraLeft"; "shadowCameraRight": "shadowCameraRight"; "shadowCameraTop": "shadowCameraTop"; "shadowCameraBottom": "shadowCameraBottom"; "shadowCameraNear": "shadowCameraNear"; "shadowCameraFar": "shadowCameraFar"; "shadowBias": "shadowBias"; "shadowMapWidth": "shadowMapWidth"; "shadowMapHeight": "shadowMapHeight"; }, {}, never, never>;
}
