import { Type } from '@angular/core';
import { ShaderMaterial, WebGLRenderTarget } from 'three';
import { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThBloomPass<T extends BloomPass = BloomPass, TARGS = [
    strength?: number,
    kernelSize?: number,
    sigma?: number,
    resolution?: number
]> extends ThPass<T, TARGS> {
    getType(): Type<BloomPass>;
    set renderTargetX(value: WebGLRenderTarget);
    set renderTargetY(value: WebGLRenderTarget);
    set copyUniforms(value: object);
    set materialCopy(value: ShaderMaterial);
    set convolutionUniforms(value: object);
    set materialConvolution(value: ShaderMaterial);
    set fsQuad(value: object);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThBloomPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThBloomPass<any, any>, "th-bloomPass", never, { "renderTargetX": "renderTargetX"; "renderTargetY": "renderTargetY"; "copyUniforms": "copyUniforms"; "materialCopy": "materialCopy"; "convolutionUniforms": "convolutionUniforms"; "materialConvolution": "materialConvolution"; "fsQuad": "fsQuad"; }, {}, never, never>;
}
