import { NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER, NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, NGT_OBJECT_POST_INIT, NGT_OBJECT_TYPE, NgtCommonMesh, NgtMaterialGeometryController, } from '@angular-three/core';
import { Directive, Inject, Input, NgModule, NgZone, Optional, } from '@angular/core';
import * as THREE from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class NgtInstancedMesh extends NgtCommonMesh {
    constructor(materialGeometryController, ngZone) {
        super(materialGeometryController, ngZone);
    }
    set args(value) {
        if (this.materialGeometryController) {
            this.materialGeometryController.meshArgs = value;
        }
    }
}
NgtInstancedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtInstancedMesh, deps: [{ token: NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NgtInstancedMesh.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtInstancedMesh, selector: "ngt-instanced-mesh", inputs: { args: "args" }, providers: [
        { provide: NgtCommonMesh, useExisting: NgtInstancedMesh },
        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
        { provide: NGT_OBJECT_TYPE, useValue: THREE.InstancedMesh },
        {
            provide: NGT_OBJECT_POST_INIT,
            useValue: (object) => {
                object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
            },
        },
    ], exportAs: ["ngtInstancedMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtInstancedMesh, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-instanced-mesh',
                    exportAs: 'ngtInstancedMesh',
                    providers: [
                        { provide: NgtCommonMesh, useExisting: NgtInstancedMesh },
                        NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,
                        { provide: NGT_OBJECT_TYPE, useValue: THREE.InstancedMesh },
                        {
                            provide: NGT_OBJECT_POST_INIT,
                            useValue: (object) => {
                                object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
                            },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtMaterialGeometryController, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER]
                }] }, { type: i0.NgZone }]; }, propDecorators: { args: [{
                type: Input
            }] } });
export class NgtInstancedMeshModule {
}
NgtInstancedMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtInstancedMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtInstancedMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtInstancedMeshModule, declarations: [NgtInstancedMesh], exports: [NgtInstancedMesh] });
NgtInstancedMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtInstancedMeshModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtInstancedMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtInstancedMesh],
                    exports: [NgtInstancedMesh],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2VkLW1lc2guZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9tZXNoZXMvc3JjL2luc3RhbmNlZC1tZXNoL2luc3RhbmNlZC1tZXNoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wseUNBQXlDLEVBQ3pDLHdDQUF3QyxFQUN4QyxvQkFBb0IsRUFDcEIsZUFBZSxFQUNmLGFBQWEsRUFDYiw2QkFBNkIsR0FDOUIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLE1BQU0sRUFDTixRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7OztBQWlCL0IsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGFBQWtDO0lBT3RFLFlBR0UsMEJBQXlELEVBQ3pELE1BQWM7UUFFZCxLQUFLLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQWJELElBQWEsSUFBSSxDQUFDLEtBQWU7UUFDL0IsSUFBSSxJQUFJLENBQUMsMEJBQTBCLEVBQUU7WUFDbkMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDbEQ7SUFDSCxDQUFDOzs2R0FMVSxnQkFBZ0Isa0JBU2pCLHdDQUF3QztpR0FUdkMsZ0JBQWdCLHVFQVpoQjtRQUNULEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUU7UUFDekQseUNBQXlDO1FBQ3pDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRTtRQUMzRDtZQUNFLE9BQU8sRUFBRSxvQkFBb0I7WUFDN0IsUUFBUSxFQUFFLENBQUMsTUFBMkIsRUFBRSxFQUFFO2dCQUN4QyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN6RCxDQUFDO1NBQ0Y7S0FDRjsyRkFFVSxnQkFBZ0I7a0JBZjVCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLGtCQUFrQixFQUFFO3dCQUN6RCx5Q0FBeUM7d0JBQ3pDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRTt3QkFDM0Q7NEJBQ0UsT0FBTyxFQUFFLG9CQUFvQjs0QkFDN0IsUUFBUSxFQUFFLENBQUMsTUFBMkIsRUFBRSxFQUFFO2dDQUN4QyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs0QkFDekQsQ0FBQzt5QkFDRjtxQkFDRjtpQkFDRjs7MEJBU0ksUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyx3Q0FBd0M7aUVBUnJDLElBQUk7c0JBQWhCLEtBQUs7O0FBb0JSLE1BQU0sT0FBTyxzQkFBc0I7O21IQUF0QixzQkFBc0I7b0hBQXRCLHNCQUFzQixpQkFyQnRCLGdCQUFnQixhQUFoQixnQkFBZ0I7b0hBcUJoQixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFKbEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQzVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTkdUX01BVEVSSUFMX0dFT01FVFJZX0NPTlRST0xMRVJfUFJPVklERVIsXG4gIE5HVF9NQVRFUklBTF9HRU9NRVRSWV9XQVRDSEVEX0NPTlRST0xMRVIsXG4gIE5HVF9PQkpFQ1RfUE9TVF9JTklULFxuICBOR1RfT0JKRUNUX1RZUEUsXG4gIE5ndENvbW1vbk1lc2gsXG4gIE5ndE1hdGVyaWFsR2VvbWV0cnlDb250cm9sbGVyLFxufSBmcm9tICdAYW5ndWxhci10aHJlZS9jb3JlJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgT3B0aW9uYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduZ3QtaW5zdGFuY2VkLW1lc2gnLFxuICBleHBvcnRBczogJ25ndEluc3RhbmNlZE1lc2gnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5ndENvbW1vbk1lc2gsIHVzZUV4aXN0aW5nOiBOZ3RJbnN0YW5jZWRNZXNoIH0sXG4gICAgTkdUX01BVEVSSUFMX0dFT01FVFJZX0NPTlRST0xMRVJfUFJPVklERVIsXG4gICAgeyBwcm92aWRlOiBOR1RfT0JKRUNUX1RZUEUsIHVzZVZhbHVlOiBUSFJFRS5JbnN0YW5jZWRNZXNoIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdUX09CSkVDVF9QT1NUX0lOSVQsXG4gICAgICB1c2VWYWx1ZTogKG9iamVjdDogVEhSRUUuSW5zdGFuY2VkTWVzaCkgPT4ge1xuICAgICAgICBvYmplY3QuaW5zdGFuY2VNYXRyaXguc2V0VXNhZ2UoVEhSRUUuRHluYW1pY0RyYXdVc2FnZSk7XG4gICAgICB9LFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE5ndEluc3RhbmNlZE1lc2ggZXh0ZW5kcyBOZ3RDb21tb25NZXNoPFRIUkVFLkluc3RhbmNlZE1lc2g+IHtcbiAgQElucHV0KCkgc2V0IGFyZ3ModmFsdWU6IFtudW1iZXJdKSB7XG4gICAgaWYgKHRoaXMubWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIpIHtcbiAgICAgIHRoaXMubWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIubWVzaEFyZ3MgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoTkdUX01BVEVSSUFMX0dFT01FVFJZX1dBVENIRURfQ09OVFJPTExFUilcbiAgICBtYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcjogTmd0TWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIsXG4gICAgbmdab25lOiBOZ1pvbmVcbiAgKSB7XG4gICAgc3VwZXIobWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIsIG5nWm9uZSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmd0SW5zdGFuY2VkTWVzaF0sXG4gIGV4cG9ydHM6IFtOZ3RJbnN0YW5jZWRNZXNoXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd0SW5zdGFuY2VkTWVzaE1vZHVsZSB7fVxuIl19