import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Input, NgZone, Output, Self, ViewChild, } from '@angular/core';
import * as THREE from 'three';
import { NgtLoopService } from './services/loop.service';
import { NgtResize } from './services/resize.service';
import { NgtAnimationFrameStore } from './stores/animation-frame.store';
import { EnhancedRxState } from './stores/enhanced-rx-state';
import { NgtEventsStore } from './stores/events.store';
import { NgtPerformanceStore } from './stores/performance.store';
import { NgtStore } from './stores/store';
import * as i0 from "@angular/core";
import * as i1 from "./stores/store";
import * as i2 from "./stores/performance.store";
import * as i3 from "./stores/events.store";
import * as i4 from "./stores/animation-frame.store";
import * as i5 from "./services/loop.service";
export class NgtCanvas extends EnhancedRxState {
    constructor(store, performanceStore, eventsStore, animationFrameStore, loopService, ngZone) {
        super();
        this.store = store;
        this.performanceStore = performanceStore;
        this.eventsStore = eventsStore;
        this.animationFrameStore = animationFrameStore;
        this.loopService = loopService;
        this.ngZone = ngZone;
        this.hostClass = true;
        this.created = new EventEmitter();
        this.pointermissed = new EventEmitter();
    }
    set vr(vr) {
        this.store.set({ vr: vr === '' ? true : vr });
    }
    set linear(linear) {
        this.store.set({ linear: linear === '' ? true : linear });
    }
    set flat(flat) {
        this.store.set({ flat: flat === '' ? true : flat });
    }
    set frameloop(frameloop) {
        this.store.set({ frameloop });
    }
    set orthographic(orthographic) {
        this.store.set({ orthographic: orthographic === '' ? true : orthographic });
    }
    set performance(performance) {
        this.store.set({ performance });
    }
    set size(size) {
        this.store.set({ size });
    }
    set dpr(dpr) {
        this.store.set({ dpr });
    }
    set clock(clock) {
        this.store.set({ clock });
    }
    set raycaster(raycaster) {
        this.store.set({ raycasterOptions: raycaster });
    }
    set shadows(shadows) {
        this.store.set({ shadows });
    }
    set camera(cameraOptions) {
        this.store.set({ cameraOptions });
    }
    set scene(sceneOptions) {
        this.store.set({ sceneOptions });
    }
    set gl(glOptions) {
        this.store.set({ glOptions });
    }
    set rendererCanvas(v) {
        this.store.actions.canvasElement(v.nativeElement);
    }
    ngOnInit() {
        // if there is handler to pointermissed on the canvas
        // update pointermissed in events store so that
        // events util will handle it
        if (this.pointermissed.observed) {
            this.eventsStore.set({
                pointerMissed: (event) => {
                    this.pointermissed.emit(event);
                },
            });
        }
        this.hold(this.store.select('ready'), (ready) => {
            if (ready) {
                this.ngZone.runOutsideAngular(() => {
                    const state = this.store.get();
                    this.eventsStore.actions.element(state.renderer.domElement);
                    this.loopService.invalidate(state);
                    this.created.emit(state);
                });
            }
        });
    }
}
NgtCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtCanvas, deps: [{ token: i1.NgtStore, self: true }, { token: i2.NgtPerformanceStore, self: true }, { token: i3.NgtEventsStore, self: true }, { token: i4.NgtAnimationFrameStore, self: true }, { token: i5.NgtLoopService, self: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NgtCanvas.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: NgtCanvas, selector: "ngt-canvas", inputs: { vr: "vr", linear: "linear", flat: "flat", frameloop: "frameloop", orthographic: "orthographic", performance: "performance", size: "size", dpr: "dpr", clock: "clock", raycaster: "raycaster", shadows: "shadows", camera: "camera", scene: "scene", gl: "gl" }, outputs: { created: "created", pointermissed: "pointermissed" }, host: { properties: { "class.ngt-canvas": "this.hostClass" } }, providers: [
        NgtResize,
        NgtStore,
        NgtPerformanceStore,
        NgtEventsStore,
        NgtAnimationFrameStore,
        NgtLoopService,
    ], viewQueries: [{ propertyName: "rendererCanvas", first: true, predicate: ["rendererCanvas"], descendants: true }], usesInheritance: true, ngImport: i0, template: ` <canvas #rendererCanvas></canvas> `, isInline: true, styles: [":host{display:block;position:relative;width:100%;height:100%;overflow:hidden}:host canvas{display:block}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtCanvas, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngt-canvas',
                    template: ` <canvas #rendererCanvas></canvas> `,
                    styles: [
                        `
      :host {
        display: block;
        position: relative;
        width: 100%;
        height: 100%;
        overflow: hidden;
      }

      :host canvas {
        display: block;
      }
    `,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NgtResize,
                        NgtStore,
                        NgtPerformanceStore,
                        NgtEventsStore,
                        NgtAnimationFrameStore,
                        NgtLoopService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtStore, decorators: [{
                    type: Self
                }] }, { type: i2.NgtPerformanceStore, decorators: [{
                    type: Self
                }] }, { type: i3.NgtEventsStore, decorators: [{
                    type: Self
                }] }, { type: i4.NgtAnimationFrameStore, decorators: [{
                    type: Self
                }] }, { type: i5.NgtLoopService, decorators: [{
                    type: Self
                }] }, { type: i0.NgZone }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class.ngt-canvas']
            }], vr: [{
                type: Input
            }], linear: [{
                type: Input
            }], flat: [{
                type: Input
            }], frameloop: [{
                type: Input
            }], orthographic: [{
                type: Input
            }], performance: [{
                type: Input
            }], size: [{
                type: Input
            }], dpr: [{
                type: Input
            }], clock: [{
                type: Input
            }], raycaster: [{
                type: Input
            }], shadows: [{
                type: Input
            }], camera: [{
                type: Input
            }], scene: [{
                type: Input
            }], gl: [{
                type: Input
            }], created: [{
                type: Output
            }], pointermissed: [{
                type: Output
            }], rendererCanvas: [{
                type: ViewChild,
                args: ['rendererCanvas']
            }] } });
//# sourceMappingURL=data:application/json;base64,