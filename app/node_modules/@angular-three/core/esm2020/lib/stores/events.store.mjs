var _NgtEventsStore_instances, _NgtEventsStore_connect;
import { __classPrivateFieldGet } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { noop } from 'rxjs';
import { createEvents } from '../utils/events';
import { EnhancedRxState, getActions } from './enhanced-rx-state';
import { NgtStore } from './store';
import * as i0 from "@angular/core";
import * as i1 from "./store";
const names = {
    click: false,
    contextmenu: false,
    dblclick: false,
    wheel: false,
    pointerdown: true,
    pointerup: true,
    pointerleave: true,
    pointermove: true,
    pointercancel: true,
    lostpointercapture: true,
};
export class NgtEventsStore extends EnhancedRxState {
    constructor(store, ngZone) {
        super();
        this.store = store;
        this.ngZone = ngZone;
        _NgtEventsStore_instances.add(this);
        this.actions = getActions();
        this.set({
            pointerMissed: noop,
            connected: false,
            handlers: {},
            internal: {
                interaction: [],
                hovered: new Map(),
                capturedMap: new Map(),
                initialClick: [0, 0],
                initialHits: [],
            },
        });
        ngZone.runOutsideAngular(() => {
            const { handlePointer } = createEvents(this.store.get.bind(this.store), this.get.bind(this));
            this.set({
                handlers: Object.keys(names).reduce((handlers, supportedEventName) => {
                    handlers[supportedEventName] = handlePointer(supportedEventName);
                    return handlers;
                }, {}),
            });
            this.holdEffect(this.actions.element$, __classPrivateFieldGet(this, _NgtEventsStore_instances, "m", _NgtEventsStore_connect).bind(this));
        });
    }
    addInteraction(interaction) {
        this.set((state) => ({
            ...state,
            internal: {
                ...state.internal,
                interaction: [...state.internal.interaction, interaction],
            },
        }));
    }
    removeInteraction(uuid) {
        this.set((state) => ({
            ...state,
            internal: {
                ...state.internal,
                interaction: state.internal.interaction.filter((interaction) => interaction.uuid !== uuid),
            },
        }));
    }
}
_NgtEventsStore_instances = new WeakSet(), _NgtEventsStore_connect = function _NgtEventsStore_connect(element) {
    return this.ngZone.runOutsideAngular(() => {
        this.set({ connected: element });
        const handlers = this.get('handlers');
        Object.entries(handlers ?? {}).forEach(([eventName, handler]) => {
            const passive = names[eventName];
            element.addEventListener(eventName, handler, { passive });
        });
        return () => {
            const { handlers, connected } = this.get();
            if (connected) {
                Object.entries(handlers ?? {}).forEach(([eventName, handler]) => {
                    if (connected instanceof HTMLElement) {
                        connected.removeEventListener(eventName, handler);
                    }
                });
            }
        };
    });
};
NgtEventsStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtEventsStore, deps: [{ token: i1.NgtStore }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
NgtEventsStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtEventsStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtEventsStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NgtStore }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,