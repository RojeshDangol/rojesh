import { Directive } from '@angular/core';
import { createSideEffectObservable, RxState } from '@rx-angular/state';
import { catchError, EMPTY, noop, Subject, tap } from 'rxjs';
import * as i0 from "@angular/core";
export class EnhancedRxState extends RxState {
    constructor() {
        super(...arguments);
        this.effect$ = createSideEffectObservable();
        this.effectSubscription = this.effect$.subscribe();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.effectSubscription.unsubscribe();
    }
    holdEffect(obsOrObsWithSideEffect, sideEffectFn) {
        let cleanupFn = noop;
        let firstRun = false;
        let latestValue = undefined;
        const sideEffect = obsOrObsWithSideEffect.pipe(catchError((_) => EMPTY));
        this.effect$.nextEffectObservable(sideEffect.pipe(tap({
            next: (value) => {
                if (cleanupFn && firstRun) {
                    cleanupFn(latestValue, false);
                }
                const cleanUpOrVoid = sideEffectFn(value, firstRun);
                if (cleanUpOrVoid) {
                    cleanupFn = cleanUpOrVoid;
                }
                latestValue = value;
                if (!firstRun) {
                    firstRun = true;
                }
            },
            unsubscribe: () => {
                if (cleanupFn) {
                    cleanupFn(latestValue, true);
                }
            },
        })));
    }
}
EnhancedRxState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: EnhancedRxState, deps: null, target: i0.ɵɵFactoryTarget.Directive });
EnhancedRxState.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: EnhancedRxState, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: EnhancedRxState, decorators: [{
            type: Directive
        }] });
export function capitalize(str) {
    return (str.charAt(0).toUpperCase() + str.slice(1));
}
/**
 * Returns a object based off of the provided typing with a separate setter `[prop](value: T[K]): void` and observable stream `[prop]$: Observable<T[K]>`;
 *
 * { search: string } => { search$: Observable<string>, search: (value: string) => void;}
 *
 * @example
 *
 * const actions = getActions<search: string, submit: void>({search: (e) => e.target.value});
 *
 * actions.search($event);
 * actions.search$ | async;
 *
 * @param transforms map of transform functions to apply on certain properties if they are set.
 */
export function getActions() {
    const subjects = {};
    const handler = {
        get(_, property) {
            if (property.toString().split('').pop() === '$') {
                const propName = property
                    .toString()
                    .slice(0, -1);
                subjects[propName] = subjects[propName] || new Subject();
                return subjects[propName];
            }
            return (args) => {
                subjects[property] = subjects[property] || new Subject();
                subjects[property].next(args);
            };
        },
        set() {
            throw new Error('No setters available. To emit call the property name.');
        },
    };
    return new Proxy({}, handler);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5oYW5jZWQtcngtc3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvc3RvcmVzL2VuaGFuY2VkLXJ4LXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBYyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUd6RSxNQUFNLE9BQWdCLGVBRXBCLFNBQVEsT0FBVTtJQUhwQjs7UUFJVSxZQUFPLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztRQUN2Qyx1QkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBcUR2RDtJQW5EQyxXQUFXO1FBQ1QsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsVUFBVSxDQUNSLHNCQUFxQyxFQUNyQyxZQUtRO1FBRVIsSUFBSSxTQUFTLEdBR0QsSUFBSSxDQUFDO1FBQ2pCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLFdBQVcsR0FBa0IsU0FBUyxDQUFDO1FBRTNDLE1BQU0sVUFBVSxHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFekUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FDL0IsVUFBVSxDQUFDLElBQUksQ0FDYixHQUFHLENBQUM7WUFDRixJQUFJLEVBQUUsQ0FBQyxLQUFRLEVBQUUsRUFBRTtnQkFDakIsSUFBSSxTQUFTLElBQUksUUFBUSxFQUFFO29CQUN6QixTQUFTLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUMvQjtnQkFFRCxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLGFBQWEsRUFBRTtvQkFDakIsU0FBUyxHQUFHLGFBQWEsQ0FBQztpQkFDM0I7Z0JBRUQsV0FBVyxHQUFHLEtBQUssQ0FBQztnQkFFcEIsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDYixRQUFRLEdBQUcsSUFBSSxDQUFDO2lCQUNqQjtZQUNILENBQUM7WUFDRCxXQUFXLEVBQUUsR0FBRyxFQUFFO2dCQUNoQixJQUFJLFNBQVMsRUFBRTtvQkFDYixTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUM5QjtZQUNILENBQUM7U0FDRixDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7NEdBeERtQixlQUFlO2dHQUFmLGVBQWU7MkZBQWYsZUFBZTtrQkFEcEMsU0FBUzs7QUE0RFYsTUFBTSxVQUFVLFVBQVUsQ0FBbUIsR0FBTTtJQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFrQixDQUFDO0FBQ3ZFLENBQUM7QUFZRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxVQUFVLFVBQVU7SUFDeEIsTUFBTSxRQUFRLEdBQXdDLEVBQUUsQ0FBQztJQUV6RCxNQUFNLE9BQU8sR0FBa0M7UUFDN0MsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFnQjtZQUNyQixJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssR0FBRyxFQUFFO2dCQUMvQyxNQUFNLFFBQVEsR0FBNkIsUUFBUTtxQkFDaEQsUUFBUSxFQUFFO3FCQUNWLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLE9BQU8sRUFBVyxDQUFDO2dCQUNsRSxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMzQjtZQUVELE9BQU8sQ0FBQyxJQUFnQixFQUFFLEVBQUU7Z0JBQzFCLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxPQUFPLEVBQVcsQ0FBQztnQkFDbEUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUM7UUFDSixDQUFDO1FBQ0QsR0FBRztZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztRQUMzRSxDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sSUFBSSxLQUFLLENBQUMsRUFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVTaWRlRWZmZWN0T2JzZXJ2YWJsZSwgUnhTdGF0ZSB9IGZyb20gJ0ByeC1hbmd1bGFyL3N0YXRlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIEVNUFRZLCBub29wLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0YXAgfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRW5oYW5jZWRSeFN0YXRlPFxuICBUIGV4dGVuZHMgb2JqZWN0ID0ge31cbj4gZXh0ZW5kcyBSeFN0YXRlPFQ+IHtcbiAgcHJpdmF0ZSBlZmZlY3QkID0gY3JlYXRlU2lkZUVmZmVjdE9ic2VydmFibGUoKTtcbiAgcHJpdmF0ZSBlZmZlY3RTdWJzY3JpcHRpb24gPSB0aGlzLmVmZmVjdCQuc3Vic2NyaWJlKCk7XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcbiAgICB0aGlzLmVmZmVjdFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgaG9sZEVmZmVjdDxTPihcbiAgICBvYnNPck9ic1dpdGhTaWRlRWZmZWN0OiBPYnNlcnZhYmxlPFM+LFxuICAgIHNpZGVFZmZlY3RGbjogKFxuICAgICAgdmFsdWU6IFMsXG4gICAgICBmaXJzdFJ1bjogYm9vbGVhblxuICAgICkgPT5cbiAgICAgIHwgKChwcmV2aW91c1ZhbHVlOiBTIHwgdW5kZWZpbmVkLCBpc1Vuc3Vic2NyaWJlZDogYm9vbGVhbikgPT4gdm9pZClcbiAgICAgIHwgdm9pZFxuICApOiB2b2lkIHtcbiAgICBsZXQgY2xlYW51cEZuOiAoXG4gICAgICBwcmV2aW91c1ZhbHVlOiBTIHwgdW5kZWZpbmVkLFxuICAgICAgaXNVbnN1YnNjcmliZWQ6IGJvb2xlYW5cbiAgICApID0+IHZvaWQgPSBub29wO1xuICAgIGxldCBmaXJzdFJ1biA9IGZhbHNlO1xuICAgIGxldCBsYXRlc3RWYWx1ZTogUyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHNpZGVFZmZlY3QgPSBvYnNPck9ic1dpdGhTaWRlRWZmZWN0LnBpcGUoY2F0Y2hFcnJvcigoXykgPT4gRU1QVFkpKTtcblxuICAgIHRoaXMuZWZmZWN0JC5uZXh0RWZmZWN0T2JzZXJ2YWJsZShcbiAgICAgIHNpZGVFZmZlY3QucGlwZShcbiAgICAgICAgdGFwKHtcbiAgICAgICAgICBuZXh0OiAodmFsdWU6IFMpID0+IHtcbiAgICAgICAgICAgIGlmIChjbGVhbnVwRm4gJiYgZmlyc3RSdW4pIHtcbiAgICAgICAgICAgICAgY2xlYW51cEZuKGxhdGVzdFZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNsZWFuVXBPclZvaWQgPSBzaWRlRWZmZWN0Rm4odmFsdWUsIGZpcnN0UnVuKTtcbiAgICAgICAgICAgIGlmIChjbGVhblVwT3JWb2lkKSB7XG4gICAgICAgICAgICAgIGNsZWFudXBGbiA9IGNsZWFuVXBPclZvaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhdGVzdFZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGlmICghZmlyc3RSdW4pIHtcbiAgICAgICAgICAgICAgZmlyc3RSdW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjbGVhbnVwRm4pIHtcbiAgICAgICAgICAgICAgY2xlYW51cEZuKGxhdGVzdFZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemU8VCBleHRlbmRzIHN0cmluZz4oc3RyOiBUKTogQ2FwaXRhbGl6ZTxUPiB7XG4gIHJldHVybiAoc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKSBhcyBDYXBpdGFsaXplPFQ+O1xufVxuXG50eXBlIEluc3RhbmNlT3JUeXBlPFQ+ID0gVCBleHRlbmRzIGFic3RyYWN0IG5ldyAoLi4uYXJnczogdW5rbm93bltdKSA9PiBpbmZlciBSXG4gID8gUlxuICA6IFQ7XG5cbmV4cG9ydCB0eXBlIEFjdGlvbkFjY2VzczxUIGV4dGVuZHMgeyBbeDogc3RyaW5nXTogYW55IH0+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogKGFyZzogSW5zdGFuY2VPclR5cGU8VFtLXT4pID0+IHZvaWQ7XG59ICYge1xuICBbSyBpbiBFeHRyYWN0PGtleW9mIFQsIHN0cmluZz4gYXMgYCR7S30kYF06IE9ic2VydmFibGU8VFtLXT47XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBvYmplY3QgYmFzZWQgb2ZmIG9mIHRoZSBwcm92aWRlZCB0eXBpbmcgd2l0aCBhIHNlcGFyYXRlIHNldHRlciBgW3Byb3BdKHZhbHVlOiBUW0tdKTogdm9pZGAgYW5kIG9ic2VydmFibGUgc3RyZWFtIGBbcHJvcF0kOiBPYnNlcnZhYmxlPFRbS10+YDtcbiAqXG4gKiB7IHNlYXJjaDogc3RyaW5nIH0gPT4geyBzZWFyY2gkOiBPYnNlcnZhYmxlPHN0cmluZz4sIHNlYXJjaDogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7fVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgYWN0aW9ucyA9IGdldEFjdGlvbnM8c2VhcmNoOiBzdHJpbmcsIHN1Ym1pdDogdm9pZD4oe3NlYXJjaDogKGUpID0+IGUudGFyZ2V0LnZhbHVlfSk7XG4gKlxuICogYWN0aW9ucy5zZWFyY2goJGV2ZW50KTtcbiAqIGFjdGlvbnMuc2VhcmNoJCB8IGFzeW5jO1xuICpcbiAqIEBwYXJhbSB0cmFuc2Zvcm1zIG1hcCBvZiB0cmFuc2Zvcm0gZnVuY3Rpb25zIHRvIGFwcGx5IG9uIGNlcnRhaW4gcHJvcGVydGllcyBpZiB0aGV5IGFyZSBzZXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3Rpb25zPFQgZXh0ZW5kcyBvYmplY3Q+KCk6IEFjdGlvbkFjY2VzczxUPiB7XG4gIGNvbnN0IHN1YmplY3RzOiBSZWNvcmQ8c3RyaW5nLCBTdWJqZWN0PFRba2V5b2YgVF0+PiA9IHt9O1xuXG4gIGNvbnN0IGhhbmRsZXI6IFByb3h5SGFuZGxlcjxBY3Rpb25BY2Nlc3M8VD4+ID0ge1xuICAgIGdldChfLCBwcm9wZXJ0eTogc3RyaW5nKSB7XG4gICAgICBpZiAocHJvcGVydHkudG9TdHJpbmcoKS5zcGxpdCgnJykucG9wKCkgPT09ICckJykge1xuICAgICAgICBjb25zdCBwcm9wTmFtZTogc3RyaW5nIHwgbnVtYmVyIHwgU3ltYm9sID0gcHJvcGVydHlcbiAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgICAgIC5zbGljZSgwLCAtMSk7XG4gICAgICAgIHN1YmplY3RzW3Byb3BOYW1lXSA9IHN1YmplY3RzW3Byb3BOYW1lXSB8fCBuZXcgU3ViamVjdDxrZXlvZiBUPigpO1xuICAgICAgICByZXR1cm4gc3ViamVjdHNbcHJvcE5hbWVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGFyZ3M6IFRba2V5b2YgVF0pID0+IHtcbiAgICAgICAgc3ViamVjdHNbcHJvcGVydHldID0gc3ViamVjdHNbcHJvcGVydHldIHx8IG5ldyBTdWJqZWN0PGtleW9mIFQ+KCk7XG4gICAgICAgIHN1YmplY3RzW3Byb3BlcnR5XS5uZXh0KGFyZ3MpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHNldCgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2V0dGVycyBhdmFpbGFibGUuIFRvIGVtaXQgY2FsbCB0aGUgcHJvcGVydHkgbmFtZS4nKTtcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBuZXcgUHJveHkoe30gYXMgQWN0aW9uQWNjZXNzPFQ+LCBoYW5kbGVyKTtcbn1cbiJdfQ==