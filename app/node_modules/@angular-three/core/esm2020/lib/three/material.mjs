var _NgtMaterial_instances, _NgtMaterial_parameters, _NgtMaterial_material, _NgtMaterial_convertColorToLinear;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Directive, EventEmitter, Inject, Input, NgZone, Optional, Output, } from '@angular/core';
import { requestAnimationFrame } from '@rx-angular/cdk/zone-less';
import { NgtContentMaterialController } from '../controllers/content-material.controller';
import { NGT_OBJECT_3D } from '../di/object3d';
import { NgtStore } from '../stores/store';
import { makeColor } from '../utils/make';
import * as i0 from "@angular/core";
import * as i1 from "../stores/store";
import * as i2 from "../controllers/content-material.controller";
export class NgtMaterial {
    constructor(ngZone, store, parentObject, contentMaterialController) {
        this.ngZone = ngZone;
        this.store = store;
        this.parentObject = parentObject;
        this.contentMaterialController = contentMaterialController;
        _NgtMaterial_instances.add(this);
        this.ready = new EventEmitter();
        _NgtMaterial_parameters.set(this, void 0);
        _NgtMaterial_material.set(this, void 0);
    }
    set parameters(v) {
        requestAnimationFrame(() => {
            __classPrivateFieldSet(this, _NgtMaterial_parameters, v, "f");
            if (v && this.material) {
                __classPrivateFieldGet(this, _NgtMaterial_instances, "m", _NgtMaterial_convertColorToLinear).call(this, v);
                this.material.setValues(v);
                this.material.needsUpdate = true;
            }
        });
    }
    get parameters() {
        return __classPrivateFieldGet(this, _NgtMaterial_parameters, "f");
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.parameters) {
                __classPrivateFieldGet(this, _NgtMaterial_instances, "m", _NgtMaterial_convertColorToLinear).call(this, this.parameters);
            }
            __classPrivateFieldSet(this, _NgtMaterial_material, new this.materialType(this.parameters), "f");
            requestAnimationFrame(() => {
                const parentObject = this.parentObject();
                if (parentObject) {
                    if (this.contentMaterialController &&
                        this.contentMaterialController.isMaterialArray) {
                        if (!Array.isArray(parentObject.material)) {
                            parentObject.material = [];
                        }
                        parentObject.material.push(this.material);
                    }
                    else {
                        parentObject.material = this.material;
                    }
                }
                this.ready.emit();
            });
        });
    }
    get material() {
        return __classPrivateFieldGet(this, _NgtMaterial_material, "f");
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.material) {
                this.material.dispose();
            }
        });
    }
}
_NgtMaterial_parameters = new WeakMap(), _NgtMaterial_material = new WeakMap(), _NgtMaterial_instances = new WeakSet(), _NgtMaterial_convertColorToLinear = function _NgtMaterial_convertColorToLinear(parameters) {
    if ('color' in parameters) {
        const colorParams = parameters['color'];
        parameters['color'] = makeColor(colorParams);
        if (!this.store.get('linear')) {
            parameters['color'].convertSRGBToLinear();
        }
    }
};
NgtMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterial, deps: [{ token: i0.NgZone }, { token: i1.NgtStore }, { token: NGT_OBJECT_3D }, { token: i2.NgtContentMaterialController, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtMaterial.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtMaterial, inputs: { parameters: "parameters" }, outputs: { ready: "ready" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterial, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.NgtStore }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_3D]
                }] }, { type: i2.NgtContentMaterialController, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { ready: [{
                type: Output
            }], parameters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0ZXJpYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdGhyZWUvbWF0ZXJpYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFHTixRQUFRLEVBQ1IsTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUcxQyxNQUFNLE9BQWdCLFdBQVc7SUF3Qi9CLFlBQ1ksTUFBYyxFQUNkLEtBQWUsRUFDUSxZQUF5QyxFQUVoRSx5QkFBdUQ7UUFKdkQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQVU7UUFDUSxpQkFBWSxHQUFaLFlBQVksQ0FBNkI7UUFFaEUsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUE4Qjs7UUF4QnpELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBaUJyQywwQ0FBa0M7UUFzQ2xDLHdDQUFzQjtJQTlCbkIsQ0FBQztJQXZCSixJQUFhLFVBQVUsQ0FBQyxDQUFrQztRQUN4RCxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7WUFDekIsdUJBQUEsSUFBSSwyQkFBZSxDQUFDLE1BQUEsQ0FBQztZQUNyQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUN0Qix1QkFBQSxJQUFJLGlFQUFzQixNQUExQixJQUFJLEVBQXVCLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyx1QkFBQSxJQUFJLCtCQUFZLENBQUM7SUFDMUIsQ0FBQztJQWNELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLHVCQUFBLElBQUksaUVBQXNCLE1BQTFCLElBQUksRUFBdUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsdUJBQUEsSUFBSSx5QkFBYSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFBLENBQUM7WUFDeEQscUJBQXFCLENBQUMsR0FBRyxFQUFFO2dCQUN6QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFnQixDQUFDO2dCQUN2RCxJQUFJLFlBQVksRUFBRTtvQkFDaEIsSUFDRSxJQUFJLENBQUMseUJBQXlCO3dCQUM5QixJQUFJLENBQUMseUJBQXlCLENBQUMsZUFBZSxFQUM5Qzt3QkFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUU7NEJBQ3pDLFlBQVksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO3lCQUM1Qjt3QkFDQSxZQUFZLENBQUMsUUFBNkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUNqRTt5QkFBTTt3QkFDTCxZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7cUJBQ3ZDO2lCQUNGO2dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxJQUFJLFFBQVE7UUFDVixPQUFPLHVCQUFBLElBQUksNkJBQVUsQ0FBQztJQUN4QixDQUFDO0lBZUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN6QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7dU1BbkJxQixVQUErQjtJQUNuRCxJQUFJLE9BQU8sSUFBSSxVQUFVLEVBQUU7UUFDekIsTUFBTSxXQUFXLEdBQUksVUFBNEIsQ0FBQyxPQUFPLENBQWEsQ0FBQztRQUN0RSxVQUE0QixDQUFDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFFMUIsVUFBNEIsQ0FBQyxPQUFPLENBQ3RDLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUN6QjtLQUNGO0FBQ0gsQ0FBQzt3R0E1RW1CLFdBQVcsZ0VBMkJyQixhQUFhOzRGQTNCSCxXQUFXOzJGQUFYLFdBQVc7a0JBRGhDLFNBQVM7OzBCQTRCTCxNQUFNOzJCQUFDLGFBQWE7OzBCQUNwQixRQUFROzRDQXZCRCxLQUFLO3NCQUFkLE1BQU07Z0JBRU0sVUFBVTtzQkFBdEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHJlcXVlc3RBbmltYXRpb25GcmFtZSB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay96b25lLWxlc3MnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgTmd0Q29udGVudE1hdGVyaWFsQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbnRyb2xsZXJzL2NvbnRlbnQtbWF0ZXJpYWwuY29udHJvbGxlcic7XG5pbXBvcnQgeyBOR1RfT0JKRUNUXzNEIH0gZnJvbSAnLi4vZGkvb2JqZWN0M2QnO1xuaW1wb3J0IHsgTmd0U3RvcmUgfSBmcm9tICcuLi9zdG9yZXMvc3RvcmUnO1xuaW1wb3J0IHR5cGUge1xuICBBbnlDb25zdHJ1Y3RvcixcbiAgQW55RnVuY3Rpb24sXG4gIE5ndENvbG9yLFxuICBVbmtub3duUmVjb3JkLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBtYWtlQ29sb3IgfSBmcm9tICcuLi91dGlscy9tYWtlJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmd0TWF0ZXJpYWw8XG4gIFRNYXRlcmlhbFBhcmFtZXRlcnMgZXh0ZW5kcyBUSFJFRS5NYXRlcmlhbFBhcmFtZXRlcnMgPSBUSFJFRS5NYXRlcmlhbFBhcmFtZXRlcnMsXG4gIFRNYXRlcmlhbCBleHRlbmRzIFRIUkVFLk1hdGVyaWFsID0gVEhSRUUuTWF0ZXJpYWxcbj4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveVxue1xuICBAT3V0cHV0KCkgcmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQElucHV0KCkgc2V0IHBhcmFtZXRlcnModjogVE1hdGVyaWFsUGFyYW1ldGVycyB8IHVuZGVmaW5lZCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLiNwYXJhbWV0ZXJzID0gdjtcbiAgICAgIGlmICh2ICYmIHRoaXMubWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy4jY29udmVydENvbG9yVG9MaW5lYXIodik7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwuc2V0VmFsdWVzKHYpO1xuICAgICAgICB0aGlzLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldCBwYXJhbWV0ZXJzKCk6IFRNYXRlcmlhbFBhcmFtZXRlcnMgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLiNwYXJhbWV0ZXJzO1xuICB9XG5cbiAgI3BhcmFtZXRlcnM/OiBUTWF0ZXJpYWxQYXJhbWV0ZXJzO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZSxcbiAgICBwcm90ZWN0ZWQgc3RvcmU6IE5ndFN0b3JlLFxuICAgIEBJbmplY3QoTkdUX09CSkVDVF8zRCkgcHJvdGVjdGVkIHBhcmVudE9iamVjdDogQW55RnVuY3Rpb248VEhSRUUuT2JqZWN0M0Q+LFxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJvdGVjdGVkIGNvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXI6IE5ndENvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXJcbiAgKSB7fVxuXG4gIGFic3RyYWN0IG1hdGVyaWFsVHlwZTogQW55Q29uc3RydWN0b3I8VE1hdGVyaWFsPjtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuI2NvbnZlcnRDb2xvclRvTGluZWFyKHRoaXMucGFyYW1ldGVycyk7XG4gICAgICB9XG4gICAgICB0aGlzLiNtYXRlcmlhbCA9IG5ldyB0aGlzLm1hdGVyaWFsVHlwZSh0aGlzLnBhcmFtZXRlcnMpO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50T2JqZWN0ID0gdGhpcy5wYXJlbnRPYmplY3QoKSBhcyBUSFJFRS5NZXNoO1xuICAgICAgICBpZiAocGFyZW50T2JqZWN0KSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5jb250ZW50TWF0ZXJpYWxDb250cm9sbGVyICYmXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRNYXRlcmlhbENvbnRyb2xsZXIuaXNNYXRlcmlhbEFycmF5XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyZW50T2JqZWN0Lm1hdGVyaWFsKSkge1xuICAgICAgICAgICAgICBwYXJlbnRPYmplY3QubWF0ZXJpYWwgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChwYXJlbnRPYmplY3QubWF0ZXJpYWwgYXMgVEhSRUUuTWF0ZXJpYWxbXSkucHVzaCh0aGlzLm1hdGVyaWFsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50T2JqZWN0Lm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkeS5lbWl0KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gICNtYXRlcmlhbCE6IFRNYXRlcmlhbDtcbiAgZ2V0IG1hdGVyaWFsKCk6IFRNYXRlcmlhbCB7XG4gICAgcmV0dXJuIHRoaXMuI21hdGVyaWFsO1xuICB9XG5cbiAgI2NvbnZlcnRDb2xvclRvTGluZWFyKHBhcmFtZXRlcnM6IFRNYXRlcmlhbFBhcmFtZXRlcnMpIHtcbiAgICBpZiAoJ2NvbG9yJyBpbiBwYXJhbWV0ZXJzKSB7XG4gICAgICBjb25zdCBjb2xvclBhcmFtcyA9IChwYXJhbWV0ZXJzIGFzIFVua25vd25SZWNvcmQpWydjb2xvciddIGFzIE5ndENvbG9yO1xuICAgICAgKHBhcmFtZXRlcnMgYXMgVW5rbm93blJlY29yZClbJ2NvbG9yJ10gPSBtYWtlQ29sb3IoY29sb3JQYXJhbXMpO1xuXG4gICAgICBpZiAoIXRoaXMuc3RvcmUuZ2V0KCdsaW5lYXInKSkge1xuICAgICAgICAoXG4gICAgICAgICAgKHBhcmFtZXRlcnMgYXMgVW5rbm93blJlY29yZClbJ2NvbG9yJ10gYXMgVEhSRUUuQ29sb3JcbiAgICAgICAgKS5jb252ZXJ0U1JHQlRvTGluZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMubWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==