var _NgtGeometry_instances, _NgtGeometry_geometryArgs, _NgtGeometry_init, _NgtGeometry_assign, _NgtGeometry_construct, _NgtGeometry_geometry;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Directive, EventEmitter, Inject, NgZone, Output, } from '@angular/core';
import { requestAnimationFrame } from '@rx-angular/cdk/zone-less';
import { NGT_OBJECT_3D } from '../di/object3d';
import * as i0 from "@angular/core";
export class NgtGeometry {
    constructor(ngZone, parentObject) {
        this.ngZone = ngZone;
        this.parentObject = parentObject;
        _NgtGeometry_instances.add(this);
        this.ready = new EventEmitter();
        _NgtGeometry_geometryArgs.set(this, []);
        _NgtGeometry_geometry.set(this, void 0);
    }
    set geometryArgs(v) {
        __classPrivateFieldSet(this, _NgtGeometry_geometryArgs, Array.isArray(v) ? v : [v], "f");
        this.ngZone.runOutsideAngular(() => {
            __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_init).call(this);
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.geometry) {
                __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_init).call(this);
            }
        });
    }
    get geometry() {
        return __classPrivateFieldGet(this, _NgtGeometry_geometry, "f");
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.geometry) {
                this.geometry.dispose();
            }
        });
    }
}
_NgtGeometry_geometryArgs = new WeakMap(), _NgtGeometry_geometry = new WeakMap(), _NgtGeometry_instances = new WeakSet(), _NgtGeometry_init = function _NgtGeometry_init() {
    // geometry has changed. reconstruct
    if (this.geometry) {
        // cleanup
        if (this.parentObject) {
            const object3d = this.parentObject;
            if (object3d.geometry) {
                object3d.geometry.dispose();
            }
        }
        // reconstruct
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_construct).call(this);
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_assign).call(this);
    }
    else {
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_construct).call(this);
        __classPrivateFieldGet(this, _NgtGeometry_instances, "m", _NgtGeometry_assign).call(this);
    }
}, _NgtGeometry_assign = function _NgtGeometry_assign() {
    requestAnimationFrame(() => {
        const parentObject = this.parentObject();
        if (parentObject) {
            parentObject.geometry = this.geometry;
        }
        this.ready.emit();
    });
}, _NgtGeometry_construct = function _NgtGeometry_construct() {
    __classPrivateFieldSet(this, _NgtGeometry_geometry, new this.geometryType(...__classPrivateFieldGet(this, _NgtGeometry_geometryArgs, "f")), "f");
};
NgtGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtGeometry, deps: [{ token: i0.NgZone }, { token: NGT_OBJECT_3D }], target: i0.ɵɵFactoryTarget.Directive });
NgtGeometry.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtGeometry, outputs: { ready: "ready" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtGeometry, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_3D]
                }] }]; }, propDecorators: { ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbWV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdGhyZWUvZ2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sTUFBTSxFQUdOLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSS9DLE1BQU0sT0FBZ0IsV0FBVztJQU0vQixZQUNZLE1BQWMsRUFDUyxZQUF5QztRQURoRSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ1MsaUJBQVksR0FBWixZQUFZLENBQTZCOztRQUpsRSxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVNyQyxvQ0FBMkIsRUFBRSxFQUFDO1FBa0Q5Qix3Q0FBc0I7SUF0RG5CLENBQUM7SUFLSixJQUFjLFlBQVksQ0FBQyxDQUFzQjtRQUMvQyx1QkFBQSxJQUFJLDZCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUEsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyx1QkFBQSxJQUFJLGlEQUFNLE1BQVYsSUFBSSxDQUFRLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLHVCQUFBLElBQUksaURBQU0sTUFBVixJQUFJLENBQVEsQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBcUNELElBQUksUUFBUTtRQUNWLE9BQU8sdUJBQUEsSUFBSSw2QkFBVSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7SUE1Q0Msb0NBQW9DO0lBQ3BDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNqQixVQUFVO1FBQ1YsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUF3QyxDQUFDO1lBQy9ELElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDcEIsUUFBUSxDQUFDLFFBQWlDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDdkQ7U0FDRjtRQUVELGNBQWM7UUFDZCx1QkFBQSxJQUFJLHNEQUFXLE1BQWYsSUFBSSxDQUFhLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxtREFBUSxNQUFaLElBQUksQ0FBVSxDQUFDO0tBQ2hCO1NBQU07UUFDTCx1QkFBQSxJQUFJLHNEQUFXLE1BQWYsSUFBSSxDQUFhLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxtREFBUSxNQUFaLElBQUksQ0FBVSxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQztJQUdDLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtRQUN6QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFnQixDQUFDO1FBQ3ZELElBQUksWUFBWSxFQUFFO1lBQ2hCLFlBQVksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0lBR0MsdUJBQUEsSUFBSSx5QkFBYSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyx1QkFBQSxJQUFJLGlDQUFjLENBQUMsTUFBQSxDQUFDO0FBQ2hFLENBQUM7d0dBN0RtQixXQUFXLHdDQVFyQixhQUFhOzRGQVJILFdBQVc7MkZBQVgsV0FBVztrQkFEaEMsU0FBUzs7MEJBU0wsTUFBTTsyQkFBQyxhQUFhOzRDQUpiLEtBQUs7c0JBQWQsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfSBmcm9tICdAcngtYW5ndWxhci9jZGsvem9uZS1sZXNzJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IE5HVF9PQkpFQ1RfM0QgfSBmcm9tICcuLi9kaS9vYmplY3QzZCc7XG5pbXBvcnQgdHlwZSB7IEFueUNvbnN0cnVjdG9yLCBBbnlGdW5jdGlvbiwgVW5rbm93blJlY29yZCB9IGZyb20gJy4uL3R5cGVzJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmd0R2VvbWV0cnk8XG4gIFRHZW9tZXRyeSBleHRlbmRzIFRIUkVFLkJ1ZmZlckdlb21ldHJ5ID0gVEhSRUUuQnVmZmVyR2VvbWV0cnlcbj4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveVxue1xuICBAT3V0cHV0KCkgcmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIG5nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoTkdUX09CSkVDVF8zRCkgcHJvdGVjdGVkIHBhcmVudE9iamVjdDogQW55RnVuY3Rpb248VEhSRUUuT2JqZWN0M0Q+XG4gICkge31cblxuICBhYnN0cmFjdCBnZW9tZXRyeVR5cGU6IEFueUNvbnN0cnVjdG9yPFRHZW9tZXRyeT47XG5cbiAgI2dlb21ldHJ5QXJnczogdW5rbm93bltdID0gW107XG4gIHByb3RlY3RlZCBzZXQgZ2VvbWV0cnlBcmdzKHY6IHVua25vd24gfCB1bmtub3duW10pIHtcbiAgICB0aGlzLiNnZW9tZXRyeUFyZ3MgPSBBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XTtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLiNpbml0KCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZ2VvbWV0cnkpIHtcbiAgICAgICAgdGhpcy4jaW5pdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgI2luaXQoKSB7XG4gICAgLy8gZ2VvbWV0cnkgaGFzIGNoYW5nZWQuIHJlY29uc3RydWN0XG4gICAgaWYgKHRoaXMuZ2VvbWV0cnkpIHtcbiAgICAgIC8vIGNsZWFudXBcbiAgICAgIGlmICh0aGlzLnBhcmVudE9iamVjdCkge1xuICAgICAgICBjb25zdCBvYmplY3QzZCA9IHRoaXMucGFyZW50T2JqZWN0IGFzIHVua25vd24gYXMgVW5rbm93blJlY29yZDtcbiAgICAgICAgaWYgKG9iamVjdDNkLmdlb21ldHJ5KSB7XG4gICAgICAgICAgKG9iamVjdDNkLmdlb21ldHJ5IGFzIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcmVjb25zdHJ1Y3RcbiAgICAgIHRoaXMuI2NvbnN0cnVjdCgpO1xuICAgICAgdGhpcy4jYXNzaWduKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI2NvbnN0cnVjdCgpO1xuICAgICAgdGhpcy4jYXNzaWduKCk7XG4gICAgfVxuICB9XG5cbiAgI2Fzc2lnbigpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50T2JqZWN0ID0gdGhpcy5wYXJlbnRPYmplY3QoKSBhcyBUSFJFRS5NZXNoO1xuICAgICAgaWYgKHBhcmVudE9iamVjdCkge1xuICAgICAgICBwYXJlbnRPYmplY3QuZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuICAgICAgfVxuICAgICAgdGhpcy5yZWFkeS5lbWl0KCk7XG4gICAgfSk7XG4gIH1cblxuICAjY29uc3RydWN0KCkge1xuICAgIHRoaXMuI2dlb21ldHJ5ID0gbmV3IHRoaXMuZ2VvbWV0cnlUeXBlKC4uLnRoaXMuI2dlb21ldHJ5QXJncyk7XG4gIH1cblxuICAjZ2VvbWV0cnkhOiBUR2VvbWV0cnk7XG4gIGdldCBnZW9tZXRyeSgpOiBUR2VvbWV0cnkge1xuICAgIHJldHVybiB0aGlzLiNnZW9tZXRyeTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmdlb21ldHJ5KSB7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=