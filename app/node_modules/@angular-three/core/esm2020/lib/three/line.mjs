import { Directive, Inject, Optional } from '@angular/core';
import * as THREE from 'three';
import { NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, NGT_OBJECT_TYPE, } from '../controllers/material-geometry.controller';
import * as i0 from "@angular/core";
import * as i1 from "../controllers/material-geometry.controller";
export class NgtCommonLine {
    constructor(materialGeometryController) {
        this.materialGeometryController = materialGeometryController;
    }
    get line() {
        return this.materialGeometryController?.objectController.object3d;
    }
}
NgtCommonLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtCommonLine, deps: [{ token: NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtCommonLine.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtCommonLine, providers: [{ provide: NGT_OBJECT_TYPE, useValue: THREE.Line }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtCommonLine, decorators: [{
            type: Directive,
            args: [{
                    providers: [{ provide: NGT_OBJECT_TYPE, useValue: THREE.Line }],
                }]
        }], ctorParameters: function () { return [{ type: i1.NgtMaterialGeometryController, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi90aHJlZS9saW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQ0wsd0NBQXdDLEVBQ3hDLGVBQWUsR0FFaEIsTUFBTSw2Q0FBNkMsQ0FBQzs7O0FBS3JELE1BQU0sT0FBZ0IsYUFBYTtJQUNqQyxZQUdZLDBCQUFnRTtRQUFoRSwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQXNDO0lBQ3pFLENBQUM7SUFFSixJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQywwQkFBMEIsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFpQixDQUFDO0lBQzdFLENBQUM7OzBHQVRtQixhQUFhLGtCQUd2Qix3Q0FBd0M7OEZBSDlCLGFBQWEsYUFGdEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzsyRkFFM0MsYUFBYTtrQkFIbEMsU0FBUzttQkFBQztvQkFDVCxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDaEU7OzBCQUdJLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQge1xuICBOR1RfTUFURVJJQUxfR0VPTUVUUllfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICBOR1RfT0JKRUNUX1RZUEUsXG4gIE5ndE1hdGVyaWFsR2VvbWV0cnlDb250cm9sbGVyLFxufSBmcm9tICcuLi9jb250cm9sbGVycy9tYXRlcmlhbC1nZW9tZXRyeS5jb250cm9sbGVyJztcblxuQERpcmVjdGl2ZSh7XG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTkdUX09CSkVDVF9UWVBFLCB1c2VWYWx1ZTogVEhSRUUuTGluZSB9XSxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmd0Q29tbW9uTGluZTxUTGluZSBleHRlbmRzIFRIUkVFLkxpbmUgPSBUSFJFRS5MaW5lPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChOR1RfTUFURVJJQUxfR0VPTUVUUllfV0FUQ0hFRF9DT05UUk9MTEVSKVxuICAgIHByb3RlY3RlZCBtYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcjogTmd0TWF0ZXJpYWxHZW9tZXRyeUNvbnRyb2xsZXIgfCBudWxsXG4gICkge31cblxuICBnZXQgbGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRlcmlhbEdlb21ldHJ5Q29udHJvbGxlcj8ub2JqZWN0Q29udHJvbGxlci5vYmplY3QzZCBhcyBUTGluZTtcbiAgfVxufVxuIl19