var _NgtObject3dController_instances, _NgtObject3dController_object3d, _NgtObject3dController_inputChangesSubscription, _NgtObject3dController_object3dInputsController, _NgtObject3dController_initFn, _NgtObject3dController_objectReady, _NgtObject3dController_appendToParent, _NgtObject3dController_addToScene, _NgtObject3dController_addToParent, _NgtObject3dController_remove, _NgtObject3dController_eventNameToHandler, _NgtObject3dController_applyCustomProps;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// GENERATED
import { Directive, EventEmitter, Inject, NgModule, NgZone, Optional, Output, SkipSelf, } from '@angular/core';
import { setTimeout } from '@rx-angular/cdk/zone-less';
import { take } from 'rxjs';
import { NgtEventsStore } from '../stores/events.store';
import { NgtStore } from '../stores/store';
import { applyProps } from '../utils/apply-props';
import { NGT_ANIMATION_SUBSCRIBER_CONTROLLER_PROVIDER, NGT_ANIMATION_SUBSCRIBER_WATCHED_CONTROLLER, NgtAnimationSubscriberController, } from './animation-subscriber.controller';
import { Controller, createControllerProviderFactory } from './controller';
import { NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER, NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NgtObject3dInputsController, } from './object-3d-inputs.controller';
import * as i0 from "@angular/core";
import * as i1 from "../stores/store";
import * as i2 from "../stores/events.store";
import * as i3 from "./object-3d-inputs.controller";
import * as i4 from "./animation-subscriber.controller";
const supportedEvents = [
    'click',
    'contextmenu',
    'dblclick',
    'pointerup',
    'pointerdown',
    'pointerover',
    'pointerout',
    'pointerenter',
    'pointerleave',
    'pointermove',
    'pointermissed',
    'pointercancel',
    'wheel',
];
export class NgtObject3dController extends Controller {
    constructor(ngZone, store, eventsStore, objectInputsController, animationSubscriberController, parentObject3d) {
        super(ngZone);
        this.store = store;
        this.eventsStore = eventsStore;
        this.objectInputsController = objectInputsController;
        this.animationSubscriberController = animationSubscriberController;
        this.parentObject3d = parentObject3d;
        _NgtObject3dController_instances.add(this);
        this.ready = new EventEmitter();
        _NgtObject3dController_object3d.set(this, void 0);
        _NgtObject3dController_inputChangesSubscription.set(this, void 0);
        _NgtObject3dController_object3dInputsController.set(this, void 0);
        _NgtObject3dController_initFn.set(this, void 0);
    }
    set initFn(v) {
        __classPrivateFieldSet(this, _NgtObject3dController_initFn, v, "f");
    }
    get initFn() {
        if (!__classPrivateFieldGet(this, _NgtObject3dController_initFn, "f")) {
            this.initFn = () => this.object3d;
        }
        return __classPrivateFieldGet(this, _NgtObject3dController_initFn, "f");
    }
    ngOnInit() {
        __classPrivateFieldSet(this, _NgtObject3dController_object3dInputsController, this.objectInputsController.object3dInputsController ??
            this.objectInputsController, "f");
        super.ngOnInit();
        __classPrivateFieldSet(this, _NgtObject3dController_inputChangesSubscription, __classPrivateFieldGet(this, _NgtObject3dController_object3dInputsController, "f").change$.subscribe(() => {
            if (this.object3d) {
                __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_applyCustomProps).call(this);
            }
        }), "f");
    }
    init() {
        this.ngZone.runOutsideAngular(() => {
            __classPrivateFieldSet(this, _NgtObject3dController_object3d, this.initFn(), "f");
            if (this.object3d) {
                __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_applyCustomProps).call(this);
                if (!this.disabled) {
                    const observedEvents = supportedEvents.reduce((result, event) => {
                        if (this.objectInputsController[event].observed) {
                            result.handlers[event] = __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_eventNameToHandler).call(this, event);
                            result.eventCount += 1;
                        }
                        return result;
                    }, { handlers: {}, eventCount: 0 });
                    // setup __ngt instance
                    applyProps(this.object3d, {
                        __ngt: {
                            stateGetter: () => this.store.get(),
                            eventsStateGetter: () => this.eventsStore.get(),
                            handlers: observedEvents.handlers,
                            eventCount: observedEvents.eventCount,
                            linear: this.store.get('linear'),
                        },
                    });
                    // add as an interaction if there are events observed
                    if (observedEvents.eventCount > 0) {
                        this.eventsStore.addInteraction(this.object3d);
                    }
                    this.store.set((state) => ({
                        ...state,
                        objects: { ...state.objects, [this.object3d.uuid]: this.object3d },
                    }));
                    if (this.objectInputsController.appendMode !== 'none') {
                        __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_appendToParent).call(this);
                    }
                }
                __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_objectReady).call(this);
            }
        });
    }
    ngOnDestroy() {
        if (__classPrivateFieldGet(this, _NgtObject3dController_inputChangesSubscription, "f")) {
            __classPrivateFieldGet(this, _NgtObject3dController_inputChangesSubscription, "f").unsubscribe();
        }
        if (this.object3d) {
            __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_remove).call(this);
            this.store.set((state) => {
                const { [this.object3d.uuid]: _, ...objects } = state.objects;
                return { ...state, objects };
            });
            this.eventsStore.removeInteraction(this.object3d.uuid);
        }
    }
    get object3d() {
        return __classPrivateFieldGet(this, _NgtObject3dController_object3d, "f");
    }
    get controller() {
        return undefined;
    }
    get props() {
        return [];
    }
}
_NgtObject3dController_object3d = new WeakMap(), _NgtObject3dController_inputChangesSubscription = new WeakMap(), _NgtObject3dController_object3dInputsController = new WeakMap(), _NgtObject3dController_initFn = new WeakMap(), _NgtObject3dController_instances = new WeakSet(), _NgtObject3dController_objectReady = function _NgtObject3dController_objectReady() {
    this.ready.emit();
    if (this.animationSubscriberController) {
        this.animationSubscriberController.prepare(this.object3d);
    }
}, _NgtObject3dController_appendToParent = function _NgtObject3dController_appendToParent() {
    // Schedule this in the next loop to allow for all appendTo's to settle
    // TODO: find better way
    setTimeout(() => {
        if (this.objectInputsController.appendTo) {
            this.objectInputsController.appendTo.add(this.object3d);
            return;
        }
        if (this.objectInputsController.appendMode === 'root') {
            __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_addToScene).call(this);
            return;
        }
        if (this.objectInputsController.appendMode === 'immediate') {
            __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_addToParent).call(this);
        }
    });
}, _NgtObject3dController_addToScene = function _NgtObject3dController_addToScene() {
    const scene = this.store.get('scene');
    if (scene) {
        scene.add(this.object3d);
    }
}, _NgtObject3dController_addToParent = function _NgtObject3dController_addToParent() {
    if (this.parentObject3d) {
        this.parentObject3d.object3d.add(this.object3d);
    }
    else {
        __classPrivateFieldGet(this, _NgtObject3dController_instances, "m", _NgtObject3dController_addToScene).call(this);
    }
}, _NgtObject3dController_remove = function _NgtObject3dController_remove() {
    if (this.objectInputsController.appendTo) {
        this.objectInputsController.appendTo.remove(this.object3d);
    }
    else if (this.parentObject3d &&
        this.objectInputsController.appendMode === 'immediate') {
        this.parentObject3d.object3d.remove(this.object3d);
    }
    else {
        const scene = this.store.get('scene');
        if (scene) {
            scene.remove(this.object3d);
        }
    }
    if (this.object3d.clear) {
        this.object3d.clear();
    }
}, _NgtObject3dController_eventNameToHandler = function _NgtObject3dController_eventNameToHandler(eventName) {
    return (event) => {
        this.ngZone.run(() => {
            this.objectInputsController[eventName].emit(event);
        });
    };
}, _NgtObject3dController_applyCustomProps = function _NgtObject3dController_applyCustomProps() {
    this.ngZone.runOutsideAngular(() => {
        const customProps = {
            castShadow: this.objectInputsController.castShadow,
            receiveShadow: this.objectInputsController.receiveShadow,
            visible: this.objectInputsController.visible,
            matrixAutoUpdate: this.objectInputsController.matrixAutoUpdate,
        };
        if (this.objectInputsController.name) {
            customProps['name'] = this.objectInputsController.name;
        }
        if (this.objectInputsController.position) {
            customProps['position'] = this.objectInputsController.position;
        }
        if (this.objectInputsController.rotation) {
            customProps['rotation'] = this.objectInputsController.rotation;
        }
        else if (this.objectInputsController.quaternion) {
            customProps['quaternion'] = this.objectInputsController.quaternion;
        }
        if (this.objectInputsController.scale) {
            customProps['scale'] = this.objectInputsController.scale;
        }
        if (this.objectInputsController.userData) {
            customProps['userData'] = this.objectInputsController.userData;
        }
        if (this.objectInputsController.color) {
            customProps['color'] = this.objectInputsController.color;
            if (!this.store.get('linear')) {
                customProps['color'].convertSRGBToLinear();
            }
        }
        if (this.objectInputsController.dispose) {
            customProps['dispose'] = this.objectInputsController.dispose;
        }
        if (this.objectInputsController.raycast) {
            customProps['raycast'] = this.objectInputsController.raycast;
        }
        this.objectInputsController.change$.pipe(take(1)).subscribe((changes) => {
            if (changes) {
                for (const [inputName, inputChange] of Object.entries(changes)) {
                    if (!inputChange.isFirstChange() ||
                        [
                            'name',
                            'position',
                            'rotation',
                            'quaternion',
                            'scale',
                            'userData',
                            'color',
                            'dispose',
                            'raycast',
                            'castShadow',
                            'receiveShadow',
                            'visible',
                            'matrixAutoUpdate',
                            'object3dController',
                        ].includes(inputName) // skip 14 common inputs
                    ) {
                        continue;
                    }
                    customProps[inputName] = inputChange.currentValue;
                }
            }
        });
        applyProps(this.object3d, customProps);
        this.object3d.updateMatrix?.();
    });
};
NgtObject3dController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dController, deps: [{ token: i0.NgZone }, { token: i1.NgtStore }, { token: i2.NgtEventsStore }, { token: NGT_OBJECT_INPUTS_WATCHED_CONTROLLER }, { token: NGT_ANIMATION_SUBSCRIBER_WATCHED_CONTROLLER }, { token: NgtObject3dController, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
NgtObject3dController.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtObject3dController, selector: "\n    ngt-primitive,\n    ngt-bone,\n    ngt-group,\n    ngt-lod,\n    ngt-points,\n    ngt-mesh,\n    ngt-instanced-mesh,\n    ngt-skinned-mesh,\n    ngt-audio,\n    ngt-positional-audio,\n    ngt-line,\n    ngt-line-loop,\n    ngt-line-segments,\n    ngt-light-probe,\n    ngt-ambient-light,\n    ngt-ambient-light-probe,\n    ngt-hemisphere-light,\n    ngt-hemisphere-light-probe,\n    ngt-directional-light,\n    ngt-point-light,\n    ngt-spot-light,\n    ngt-rect-area-light,\n    ngt-arrow-helper,\n    ngt-axes-helper,\n    ngt-box3-helper,\n    ngt-grid-helper,\n    ngt-plane-helper,\n    ngt-polar-grid-helper,\n    ngt-sprite,\n    ngt-camera,\n    ngt-perspective-camera,\n    ngt-orthographic-camera,\n    ngt-array-camera,\n    ngt-stereo-camera,\n    ngt-cube-camera\n  ", outputs: { ready: "ready" }, providers: [
        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
        NGT_ANIMATION_SUBSCRIBER_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtObject3dController"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dController, decorators: [{
            type: Directive,
            args: [{
                    selector: `
    ngt-primitive,
    ngt-bone,
    ngt-group,
    ngt-lod,
    ngt-points,
    ngt-mesh,
    ngt-instanced-mesh,
    ngt-skinned-mesh,
    ngt-audio,
    ngt-positional-audio,
    ngt-line,
    ngt-line-loop,
    ngt-line-segments,
    ngt-light-probe,
    ngt-ambient-light,
    ngt-ambient-light-probe,
    ngt-hemisphere-light,
    ngt-hemisphere-light-probe,
    ngt-directional-light,
    ngt-point-light,
    ngt-spot-light,
    ngt-rect-area-light,
    ngt-arrow-helper,
    ngt-axes-helper,
    ngt-box3-helper,
    ngt-grid-helper,
    ngt-plane-helper,
    ngt-polar-grid-helper,
    ngt-sprite,
    ngt-camera,
    ngt-perspective-camera,
    ngt-orthographic-camera,
    ngt-array-camera,
    ngt-stereo-camera,
    ngt-cube-camera
  `,
                    exportAs: 'ngtObject3dController',
                    providers: [
                        NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,
                        NGT_ANIMATION_SUBSCRIBER_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.NgtStore }, { type: i2.NgtEventsStore }, { type: i3.NgtObject3dInputsController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER]
                }] }, { type: i4.NgtAnimationSubscriberController, decorators: [{
                    type: Inject,
                    args: [NGT_ANIMATION_SUBSCRIBER_WATCHED_CONTROLLER]
                }] }, { type: NgtObject3dController, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { ready: [{
                type: Output
            }] } });
export class NgtObject3dControllerModule {
}
NgtObject3dControllerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dControllerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtObject3dControllerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dControllerModule, declarations: [NgtObject3dController], exports: [NgtObject3dController] });
NgtObject3dControllerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dControllerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dControllerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtObject3dController],
                    exports: [NgtObject3dController],
                }]
        }] });
export const [NGT_OBJECT_WATCHED_CONTROLLER, NGT_OBJECT_CONTROLLER_PROVIDER] = createControllerProviderFactory({
    watchedControllerTokenName: 'Watched Object3dController',
    controller: NgtObject3dController,
});
//# sourceMappingURL=data:application/json;base64,