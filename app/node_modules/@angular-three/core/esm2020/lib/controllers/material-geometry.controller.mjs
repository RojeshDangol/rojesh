var _NgtMaterialGeometryController_meshArgs, _NgtMaterialGeometryController_contentMaterialController, _NgtMaterialGeometryController_contentGeometryController;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// GENERATED
import { Directive, Inject, InjectionToken, Input, NgModule, NgZone, } from '@angular/core';
import * as THREE from 'three';
import { NGT_CONTENT_GEOMETRY_CONTROLLER_PROVIDER, NGT_CONTENT_GEOMETRY_WATCHED_CONTROLLER, NgtContentGeometryController, } from './content-geometry.controller';
import { NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER, NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER, NgtContentMaterialController, } from './content-material.controller';
import { Controller, createControllerProviderFactory } from './controller';
import { NGT_OBJECT_CONTROLLER_PROVIDER, NGT_OBJECT_WATCHED_CONTROLLER, NgtObject3dController, } from './object-3d.controller';
import * as i0 from "@angular/core";
import * as i1 from "./object-3d.controller";
import * as i2 from "./content-material.controller";
import * as i3 from "./content-geometry.controller";
export const NGT_OBJECT_TYPE = new InjectionToken('Object3d Type', {
    providedIn: 'root',
    factory: () => THREE.Object3D,
});
export const NGT_OBJECT_POST_INIT = new InjectionToken('Object3d PostInit', {
    providedIn: 'root',
    factory: () => undefined,
});
export class NgtMaterialGeometryController extends Controller {
    constructor(ngZone, objectController, objectType, objectPostInit, contentMaterialController, contentGeometryController) {
        super(ngZone);
        this.objectController = objectController;
        this.objectType = objectType;
        this.objectPostInit = objectPostInit;
        _NgtMaterialGeometryController_meshArgs.set(this, []);
        _NgtMaterialGeometryController_contentMaterialController.set(this, void 0);
        _NgtMaterialGeometryController_contentGeometryController.set(this, void 0);
        __classPrivateFieldSet(this, _NgtMaterialGeometryController_contentMaterialController, contentMaterialController.contentMaterialController ??
            contentMaterialController, "f");
        __classPrivateFieldSet(this, _NgtMaterialGeometryController_contentGeometryController, contentGeometryController.contentGeometryController ??
            contentGeometryController, "f");
        objectController.initFn = () => {
            if (!__classPrivateFieldGet(this, _NgtMaterialGeometryController_contentGeometryController, "f").geometry) {
                __classPrivateFieldGet(this, _NgtMaterialGeometryController_contentGeometryController, "f").construct();
            }
            if (!__classPrivateFieldGet(this, _NgtMaterialGeometryController_contentMaterialController, "f").material) {
                __classPrivateFieldGet(this, _NgtMaterialGeometryController_contentMaterialController, "f").construct();
            }
            const object = new this.objectType(__classPrivateFieldGet(this, _NgtMaterialGeometryController_contentGeometryController, "f").geometry || undefined, __classPrivateFieldGet(this, _NgtMaterialGeometryController_contentMaterialController, "f").material || undefined, ...__classPrivateFieldGet(this, _NgtMaterialGeometryController_meshArgs, "f"));
            if (this.morphTargetDictionary && 'morphTargetDictionary' in object) {
                object.morphTargetDictionary =
                    this.morphTargetDictionary;
            }
            if (this.morphTargetInfluences && 'morphTargetInfluences' in object) {
                object.morphTargetInfluences =
                    this.morphTargetInfluences;
            }
            if (this.objectPostInit) {
                this.objectPostInit(object);
            }
            return object;
        };
    }
    set meshArgs(v) {
        __classPrivateFieldSet(this, _NgtMaterialGeometryController_meshArgs, Array.isArray(v) ? v : [v], "f");
    }
    ngOnInit() {
        super.ngOnInit();
        this.ngZone.runOutsideAngular(() => {
            this.objectController.init();
        });
    }
    get controller() {
        return undefined;
    }
    get props() {
        return [];
    }
}
_NgtMaterialGeometryController_meshArgs = new WeakMap(), _NgtMaterialGeometryController_contentMaterialController = new WeakMap(), _NgtMaterialGeometryController_contentGeometryController = new WeakMap();
NgtMaterialGeometryController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterialGeometryController, deps: [{ token: i0.NgZone }, { token: NGT_OBJECT_WATCHED_CONTROLLER }, { token: NGT_OBJECT_TYPE }, { token: NGT_OBJECT_POST_INIT }, { token: NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER }, { token: NGT_CONTENT_GEOMETRY_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Directive });
NgtMaterialGeometryController.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtMaterialGeometryController, selector: "\n    ngt-mesh,\n    ngt-instanced-mesh,\n    ngt-skinned-mesh,\n    ngt-line,\n    ngt-line-loop,\n    ngt-line-segments,\n    ngt-points\n  ", inputs: { morphTargetInfluences: "morphTargetInfluences", morphTargetDictionary: "morphTargetDictionary" }, providers: [
        NGT_OBJECT_CONTROLLER_PROVIDER,
        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
        NGT_CONTENT_GEOMETRY_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtMaterialGeometryController"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterialGeometryController, decorators: [{
            type: Directive,
            args: [{
                    selector: `
    ngt-mesh,
    ngt-instanced-mesh,
    ngt-skinned-mesh,
    ngt-line,
    ngt-line-loop,
    ngt-line-segments,
    ngt-points
  `,
                    exportAs: 'ngtMaterialGeometryController',
                    providers: [
                        NGT_OBJECT_CONTROLLER_PROVIDER,
                        NGT_CONTENT_MATERIAL_CONTROLLER_PROVIDER,
                        NGT_CONTENT_GEOMETRY_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.NgtObject3dController, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_WATCHED_CONTROLLER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_TYPE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGT_OBJECT_POST_INIT]
                }] }, { type: i2.NgtContentMaterialController, decorators: [{
                    type: Inject,
                    args: [NGT_CONTENT_MATERIAL_WATCHED_CONTROLLER]
                }] }, { type: i3.NgtContentGeometryController, decorators: [{
                    type: Inject,
                    args: [NGT_CONTENT_GEOMETRY_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { morphTargetInfluences: [{
                type: Input
            }], morphTargetDictionary: [{
                type: Input
            }] } });
export class NgtMaterialGeometryControllerModule {
}
NgtMaterialGeometryControllerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterialGeometryControllerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtMaterialGeometryControllerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterialGeometryControllerModule, declarations: [NgtMaterialGeometryController], exports: [NgtMaterialGeometryController] });
NgtMaterialGeometryControllerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterialGeometryControllerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtMaterialGeometryControllerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtMaterialGeometryController],
                    exports: [NgtMaterialGeometryController],
                }]
        }] });
export const [NGT_MATERIAL_GEOMETRY_WATCHED_CONTROLLER, NGT_MATERIAL_GEOMETRY_CONTROLLER_PROVIDER,] = createControllerProviderFactory({
    watchedControllerTokenName: 'Watched MaterialGeometryController',
    controller: NgtMaterialGeometryController,
});
//# sourceMappingURL=data:application/json;base64,