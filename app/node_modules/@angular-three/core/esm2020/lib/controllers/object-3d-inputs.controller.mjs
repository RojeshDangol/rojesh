var _NgtObject3dInputsController_position, _NgtObject3dInputsController_rotation, _NgtObject3dInputsController_quaternion, _NgtObject3dInputsController_scale, _NgtObject3dInputsController_color;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// GENERATED
import { Directive, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import * as THREE from 'three';
import { makeColor, makeForSet, makeVector3 } from '../utils/make';
import { Controller, createControllerProviderFactory } from './controller';
import * as i0 from "@angular/core";
export class NgtObject3dInputsController extends Controller {
    constructor() {
        super(...arguments);
        _NgtObject3dInputsController_position.set(this, void 0);
        _NgtObject3dInputsController_rotation.set(this, void 0);
        _NgtObject3dInputsController_quaternion.set(this, void 0);
        _NgtObject3dInputsController_scale.set(this, void 0);
        _NgtObject3dInputsController_color.set(this, void 0);
        this.castShadow = false;
        this.receiveShadow = false;
        this.visible = true;
        this.matrixAutoUpdate = true;
        this.appendMode = 'immediate';
        // events
        this.click = new EventEmitter();
        this.contextmenu = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.pointerup = new EventEmitter();
        this.pointerdown = new EventEmitter();
        this.pointerover = new EventEmitter();
        this.pointerout = new EventEmitter();
        this.pointerenter = new EventEmitter();
        this.pointerleave = new EventEmitter();
        this.pointermove = new EventEmitter();
        this.pointermissed = new EventEmitter();
        this.pointercancel = new EventEmitter();
        this.wheel = new EventEmitter();
    }
    set position(position) {
        __classPrivateFieldSet(this, _NgtObject3dInputsController_position, makeVector3(position), "f");
    }
    get position() {
        return __classPrivateFieldGet(this, _NgtObject3dInputsController_position, "f");
    }
    set rotation(rotation) {
        __classPrivateFieldSet(this, _NgtObject3dInputsController_rotation, makeForSet(THREE.Euler, rotation), "f");
    }
    get rotation() {
        return __classPrivateFieldGet(this, _NgtObject3dInputsController_rotation, "f");
    }
    set quaternion(quaternion) {
        __classPrivateFieldSet(this, _NgtObject3dInputsController_quaternion, makeForSet(THREE.Quaternion, quaternion), "f");
    }
    get quaternion() {
        return __classPrivateFieldGet(this, _NgtObject3dInputsController_quaternion, "f");
    }
    set scale(scale) {
        __classPrivateFieldSet(this, _NgtObject3dInputsController_scale, makeVector3(scale), "f");
    }
    get scale() {
        return __classPrivateFieldGet(this, _NgtObject3dInputsController_scale, "f");
    }
    set color(color) {
        __classPrivateFieldSet(this, _NgtObject3dInputsController_color, makeColor(color), "f");
    }
    get color() {
        return __classPrivateFieldGet(this, _NgtObject3dInputsController_color, "f");
    }
    get props() {
        return [
            'name',
            'position',
            'rotation',
            'quaternion',
            'scale',
            'color',
            'userData',
            'dispose',
            'raycast',
            'castShadow',
            'receiveShadow',
            'visible',
            'matrixAutoUpdate',
            'appendMode',
            'appendTo',
            'click',
            'contextmenu',
            'dblclick',
            'pointerup',
            'pointerdown',
            'pointerover',
            'pointerout',
            'pointerenter',
            'pointerleave',
            'pointermove',
            'pointermissed',
            'pointercancel',
            'wheel',
        ];
    }
    get controller() {
        return this.object3dInputsController;
    }
    get object3dProps() {
        return {
            name: this.name,
            position: __classPrivateFieldGet(this, _NgtObject3dInputsController_position, "f")?.toArray(),
            rotation: __classPrivateFieldGet(this, _NgtObject3dInputsController_rotation, "f")?.toArray(),
            quaternion: __classPrivateFieldGet(this, _NgtObject3dInputsController_quaternion, "f")?.toArray(),
            scale: __classPrivateFieldGet(this, _NgtObject3dInputsController_scale, "f")?.toArray(),
            color: this.color,
            userData: this.userData,
            dispose: this.dispose,
            raycast: this.raycast,
            castShadow: this.castShadow,
            receiveShadow: this.receiveShadow,
            visible: this.visible,
            matrixAutoUpdate: this.matrixAutoUpdate,
        };
    }
}
_NgtObject3dInputsController_position = new WeakMap(), _NgtObject3dInputsController_rotation = new WeakMap(), _NgtObject3dInputsController_quaternion = new WeakMap(), _NgtObject3dInputsController_scale = new WeakMap(), _NgtObject3dInputsController_color = new WeakMap();
NgtObject3dInputsController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dInputsController, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NgtObject3dInputsController.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NgtObject3dInputsController, selector: "\n    ngt-primitive,\n    ngt-bone,\n    ngt-group,\n    ngt-lod,\n    ngt-points,\n    ngt-mesh,\n    ngt-instanced-mesh,\n    ngt-skinned-mesh,\n    ngt-audio,\n    ngt-positional-audio,\n    ngt-line,\n    ngt-line-loop,\n    ngt-line-segments,\n    ngt-light-probe,\n    ngt-ambient-light,\n    ngt-ambient-light-probe,\n    ngt-hemisphere-light,\n    ngt-hemisphere-light-probe,\n    ngt-directional-light,\n    ngt-point-light,\n    ngt-spot-light,\n    ngt-rect-area-light,\n    ngt-arrow-helper,\n    ngt-axes-helper,\n    ngt-box3-helper,\n    ngt-grid-helper,\n    ngt-plane-helper,\n    ngt-polar-grid-helper,\n    ngt-sprite,\n    ngt-camera,\n    ngt-perspective-camera,\n    ngt-orthographic-camera,\n    ngt-array-camera,\n    ngt-stereo-camera,\n    ngt-cube-camera,\n    ngt-soba-plane,\n    ngt-soba-box,\n    ngt-soba-cylinder,\n    ngt-soba-cone,\n    ngt-soba-circle,\n    ngt-soba-sphere,\n    ngt-soba-tube,\n    ngt-soba-torus,\n    ngt-soba-tetrahedron,\n    ngt-soba-ring,\n    ngt-soba-polyhedron,\n    ngt-soba-octahedron,\n    ngt-soba-dodecahedron,\n    ngt-soba-icosahedron,\n    ngt-soba-extrude,\n    ngt-soba-lathe,\n    ngt-soba-torus-knot,\n    ngt-soba-billboard,\n    ngt-soba-detailed,\n    ngt-soba-line,\n    ngt-soba-quadratic-bezier-line,\n    ngt-soba-cubic-bezier-line,\n    ngt-soba-text\n  ", inputs: { name: "name", position: "position", rotation: "rotation", quaternion: "quaternion", scale: "scale", color: "color", userData: "userData", castShadow: "castShadow", receiveShadow: "receiveShadow", visible: "visible", matrixAutoUpdate: "matrixAutoUpdate", dispose: "dispose", raycast: "raycast", appendMode: "appendMode", appendTo: "appendTo", object3dInputsController: "object3dInputsController" }, outputs: { click: "click", contextmenu: "contextmenu", dblclick: "dblclick", pointerup: "pointerup", pointerdown: "pointerdown", pointerover: "pointerover", pointerout: "pointerout", pointerenter: "pointerenter", pointerleave: "pointerleave", pointermove: "pointermove", pointermissed: "pointermissed", pointercancel: "pointercancel", wheel: "wheel" }, exportAs: ["ngtObject3dInputsController"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dInputsController, decorators: [{
            type: Directive,
            args: [{
                    selector: `
    ngt-primitive,
    ngt-bone,
    ngt-group,
    ngt-lod,
    ngt-points,
    ngt-mesh,
    ngt-instanced-mesh,
    ngt-skinned-mesh,
    ngt-audio,
    ngt-positional-audio,
    ngt-line,
    ngt-line-loop,
    ngt-line-segments,
    ngt-light-probe,
    ngt-ambient-light,
    ngt-ambient-light-probe,
    ngt-hemisphere-light,
    ngt-hemisphere-light-probe,
    ngt-directional-light,
    ngt-point-light,
    ngt-spot-light,
    ngt-rect-area-light,
    ngt-arrow-helper,
    ngt-axes-helper,
    ngt-box3-helper,
    ngt-grid-helper,
    ngt-plane-helper,
    ngt-polar-grid-helper,
    ngt-sprite,
    ngt-camera,
    ngt-perspective-camera,
    ngt-orthographic-camera,
    ngt-array-camera,
    ngt-stereo-camera,
    ngt-cube-camera,
    ngt-soba-plane,
    ngt-soba-box,
    ngt-soba-cylinder,
    ngt-soba-cone,
    ngt-soba-circle,
    ngt-soba-sphere,
    ngt-soba-tube,
    ngt-soba-torus,
    ngt-soba-tetrahedron,
    ngt-soba-ring,
    ngt-soba-polyhedron,
    ngt-soba-octahedron,
    ngt-soba-dodecahedron,
    ngt-soba-icosahedron,
    ngt-soba-extrude,
    ngt-soba-lathe,
    ngt-soba-torus-knot,
    ngt-soba-billboard,
    ngt-soba-detailed,
    ngt-soba-line,
    ngt-soba-quadratic-bezier-line,
    ngt-soba-cubic-bezier-line,
    ngt-soba-text
  `,
                    exportAs: 'ngtObject3dInputsController',
                }]
        }], propDecorators: { name: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], quaternion: [{
                type: Input
            }], scale: [{
                type: Input
            }], color: [{
                type: Input
            }], userData: [{
                type: Input
            }], castShadow: [{
                type: Input
            }], receiveShadow: [{
                type: Input
            }], visible: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], dispose: [{
                type: Input
            }], raycast: [{
                type: Input
            }], appendMode: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], object3dInputsController: [{
                type: Input
            }], click: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], pointerup: [{
                type: Output
            }], pointerdown: [{
                type: Output
            }], pointerover: [{
                type: Output
            }], pointerout: [{
                type: Output
            }], pointerenter: [{
                type: Output
            }], pointerleave: [{
                type: Output
            }], pointermove: [{
                type: Output
            }], pointermissed: [{
                type: Output
            }], pointercancel: [{
                type: Output
            }], wheel: [{
                type: Output
            }] } });
export class NgtObject3dInputsControllerModule {
}
NgtObject3dInputsControllerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dInputsControllerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgtObject3dInputsControllerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dInputsControllerModule, declarations: [NgtObject3dInputsController], exports: [NgtObject3dInputsController] });
NgtObject3dInputsControllerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dInputsControllerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgtObject3dInputsControllerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgtObject3dInputsController],
                    exports: [NgtObject3dInputsController],
                }]
        }] });
export const [NGT_OBJECT_INPUTS_WATCHED_CONTROLLER, NGT_OBJECT_INPUTS_CONTROLLER_PROVIDER,] = createControllerProviderFactory({
    watchedControllerTokenName: 'Watched Object3dInputsController',
    controller: NgtObject3dInputsController,
});
//# sourceMappingURL=data:application/json;base64,