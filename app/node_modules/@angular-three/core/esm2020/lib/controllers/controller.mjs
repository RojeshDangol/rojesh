import { ChangeDetectorRef, Directive, InjectionToken, Input, NgZone, Optional, } from '@angular/core';
import { ReplaySubject, takeUntil } from 'rxjs';
import { NgtDestroyedService } from '../services/destroyed.service';
import * as i0 from "@angular/core";
export class Controller {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.disabled = false;
        this.change$ = new ReplaySubject(1);
    }
    ngOnChanges(changes) {
        if (this.controller) {
            this.controller.ngOnChanges(changes);
            this.change$.next(changes);
        }
        else {
            this.change$.next(changes);
        }
    }
    ngOnInit() {
        if (this.controller) {
            this.ngZone.runOutsideAngular(() => {
                this.props.forEach((prop) => {
                    this[prop] = this.controller[prop];
                });
            });
        }
    }
}
Controller.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: Controller, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
Controller.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: Controller, inputs: { disabled: "disabled" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: Controller, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { disabled: [{
                type: Input
            }] } });
export function controllerFactory(newInstanceOnNull = false, controllerType) {
    return (controller, changeDetectorRef, destroyed) => {
        if (!controller) {
            return newInstanceOnNull ? new controllerType() : null;
        }
        controller.change$.pipe(takeUntil(destroyed)).subscribe(() => {
            changeDetectorRef.markForCheck();
        });
        return controller;
    };
}
export function createControllerProviderFactory({ watchedControllerTokenName, controller, newInstanceOnNull = false, }) {
    const watchedControllerToken = new InjectionToken(watchedControllerTokenName);
    const controllerProvider = [
        NgtDestroyedService,
        {
            provide: watchedControllerToken,
            deps: [
                [new Optional(), controller],
                ChangeDetectorRef,
                NgtDestroyedService,
            ],
            useFactory: controllerFactory(newInstanceOnNull, controller),
        },
    ];
    return [watchedControllerToken, controllerProvider];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi9jb250cm9sbGVycy9jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULGNBQWMsRUFDZCxLQUFLLEVBQ0wsTUFBTSxFQUdOLFFBQVEsR0FJVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWMsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7QUFJcEUsTUFBTSxPQUFnQixVQUFVO0lBUzlCLFlBQXNCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBUjNCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFNakIsWUFBTyxHQUFHLElBQUksYUFBYSxDQUFnQixDQUFDLENBQUMsQ0FBQztJQUVoQixDQUFDO0lBRXhDLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ3pCLElBQXNCLENBQUMsSUFBSSxDQUFDLEdBQzNCLElBQUksQ0FBQyxVQUNOLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ1YsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7dUdBOUJtQixVQUFVOzJGQUFWLFVBQVU7MkZBQVYsVUFBVTtrQkFEL0IsU0FBUzs2RkFFQyxRQUFRO3NCQUFoQixLQUFLOztBQXdDUixNQUFNLFVBQVUsaUJBQWlCLENBQy9CLGlCQUFpQixHQUFHLEtBQUssRUFDekIsY0FBaUM7SUFFakMsT0FBTyxDQUNMLFVBQThCLEVBQzlCLGlCQUFvQyxFQUNwQyxTQUEyQixFQUNQLEVBQUU7UUFDdEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8saUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN4RDtRQUVELFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDM0QsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLCtCQUErQixDQUU3QyxFQUNBLDBCQUEwQixFQUMxQixVQUFVLEVBQ1YsaUJBQWlCLEdBQUcsS0FBSyxHQUN3QjtJQUlqRCxNQUFNLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFFOUUsTUFBTSxrQkFBa0IsR0FBZTtRQUNyQyxtQkFBbUI7UUFDbkI7WUFDRSxPQUFPLEVBQUUsc0JBQXNCO1lBQy9CLElBQUksRUFBRTtnQkFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDO2dCQUM1QixpQkFBaUI7Z0JBQ2pCLG1CQUFtQjthQUNwQjtZQUNELFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUM7U0FDN0Q7S0FDRixDQUFDO0lBRUYsT0FBTyxDQUFDLHNCQUFzQixFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEaXJlY3RpdmUsXG4gIEluamVjdGlvblRva2VuLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFByb3ZpZGVyLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmd0RGVzdHJveWVkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2Rlc3Ryb3llZC5zZXJ2aWNlJztcbmltcG9ydCB7IFVua25vd25SZWNvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRyb2xsZXIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgYWJzdHJhY3QgZ2V0IHByb3BzKCk6IHN0cmluZ1tdO1xuXG4gIGFic3RyYWN0IGdldCBjb250cm9sbGVyKCk6IENvbnRyb2xsZXIgfCB1bmRlZmluZWQ7XG5cbiAgcmVhZG9ubHkgY2hhbmdlJCA9IG5ldyBSZXBsYXlTdWJqZWN0PFNpbXBsZUNoYW5nZXM+KDEpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZSkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlcikge1xuICAgICAgdGhpcy5jb250cm9sbGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoY2hhbmdlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhbmdlJC5uZXh0KGNoYW5nZXMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIpIHtcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgKHRoaXMgYXMgVW5rbm93blJlY29yZClbcHJvcF0gPSAoXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIgYXMgdW5rbm93biBhcyBVbmtub3duUmVjb3JkXG4gICAgICAgICAgKVtwcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVDb250cm9sbGVyVG9rZW5GYWN0b3J5T3B0aW9uczxcbiAgVENvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyXG4+IHtcbiAgd2F0Y2hlZENvbnRyb2xsZXJUb2tlbk5hbWU6IHN0cmluZztcbiAgY29udHJvbGxlcjogVHlwZTxUQ29udHJvbGxlcj47XG4gIG5ld0luc3RhbmNlT25OdWxsPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xsZXJGYWN0b3J5PFRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcj4oXG4gIG5ld0luc3RhbmNlT25OdWxsID0gZmFsc2UsXG4gIGNvbnRyb2xsZXJUeXBlOiBUeXBlPFRDb250cm9sbGVyPlxuKSB7XG4gIHJldHVybiAoXG4gICAgY29udHJvbGxlcjogVENvbnRyb2xsZXIgfCBudWxsLFxuICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBkZXN0cm95ZWQ6IE9ic2VydmFibGU8dm9pZD5cbiAgKTogVENvbnRyb2xsZXIgfCBudWxsID0+IHtcbiAgICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBuZXdJbnN0YW5jZU9uTnVsbCA/IG5ldyBjb250cm9sbGVyVHlwZSgpIDogbnVsbDtcbiAgICB9XG5cbiAgICBjb250cm9sbGVyLmNoYW5nZSQucGlwZSh0YWtlVW50aWwoZGVzdHJveWVkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRyb2xsZXI7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250cm9sbGVyUHJvdmlkZXJGYWN0b3J5PFxuICBUQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXJcbj4oe1xuICB3YXRjaGVkQ29udHJvbGxlclRva2VuTmFtZSxcbiAgY29udHJvbGxlcixcbiAgbmV3SW5zdGFuY2VPbk51bGwgPSBmYWxzZSxcbn06IENyZWF0ZUNvbnRyb2xsZXJUb2tlbkZhY3RvcnlPcHRpb25zPFRDb250cm9sbGVyPik6IFtcbiAgSW5qZWN0aW9uVG9rZW48VENvbnRyb2xsZXI+LFxuICBQcm92aWRlcltdXG5dIHtcbiAgY29uc3Qgd2F0Y2hlZENvbnRyb2xsZXJUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbih3YXRjaGVkQ29udHJvbGxlclRva2VuTmFtZSk7XG5cbiAgY29uc3QgY29udHJvbGxlclByb3ZpZGVyOiBQcm92aWRlcltdID0gW1xuICAgIE5ndERlc3Ryb3llZFNlcnZpY2UsXG4gICAge1xuICAgICAgcHJvdmlkZTogd2F0Y2hlZENvbnRyb2xsZXJUb2tlbixcbiAgICAgIGRlcHM6IFtcbiAgICAgICAgW25ldyBPcHRpb25hbCgpLCBjb250cm9sbGVyXSxcbiAgICAgICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIE5ndERlc3Ryb3llZFNlcnZpY2UsXG4gICAgICBdLFxuICAgICAgdXNlRmFjdG9yeTogY29udHJvbGxlckZhY3RvcnkobmV3SW5zdGFuY2VPbk51bGwsIGNvbnRyb2xsZXIpLFxuICAgIH0sXG4gIF07XG5cbiAgcmV0dXJuIFt3YXRjaGVkQ29udHJvbGxlclRva2VuLCBjb250cm9sbGVyUHJvdmlkZXJdO1xufVxuIl19